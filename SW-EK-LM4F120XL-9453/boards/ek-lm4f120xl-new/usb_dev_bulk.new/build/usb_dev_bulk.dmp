
usb_dev_bulk:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	24 0e 00 20 29 03 00 00 95 03 00 00 9b 03 00 00     $.. )...........
      10:	a1 03 00 00 a1 03 00 00 a1 03 00 00 00 00 00 00     ................
	...
      2c:	a1 03 00 00 a1 03 00 00 00 00 00 00 a1 03 00 00     ................
      3c:	a9 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      4c:	a1 03 00 00 a1 03 00 00 f9 0b 00 00 a1 03 00 00     ................
      5c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      6c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      7c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      8c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      9c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      ac:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      bc:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      cc:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      dc:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
      ec:	a1 03 00 00 d9 37 00 00 a1 03 00 00 a1 03 00 00     .....7..........
      fc:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     10c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     11c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     12c:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     13c:	a1 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     14c:	00 00 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     15c:	a1 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1b0:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     1c0:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     1d0:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     1e0:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     1f0:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     200:	a1 03 00 00 a1 03 00 00 a1 03 00 00 00 00 00 00     ................
     210:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     220:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     230:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     240:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     250:	a1 03 00 00 a1 03 00 00 a1 03 00 00 a1 03 00 00     ................
     260:	a1 03 00 00 a1 03 00 00 a1 03 00 00                 ............

0000026c <_init>:
     26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     26e:	bf00      	nop
     270:	bcf8      	pop	{r3, r4, r5, r6, r7}
     272:	bc08      	pop	{r3}
     274:	469e      	mov	lr, r3
     276:	4770      	bx	lr

00000278 <_fini>:
     278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     27a:	bf00      	nop
     27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
     27e:	bc08      	pop	{r3}
     280:	469e      	mov	lr, r3
     282:	4770      	bx	lr

00000284 <memset>:
     284:	b4f0      	push	{r4, r5, r6, r7}
     286:	0786      	lsls	r6, r0, #30
     288:	d043      	beq.n	312 <memset+0x8e>
     28a:	1e54      	subs	r4, r2, #1
     28c:	2a00      	cmp	r2, #0
     28e:	d03e      	beq.n	30e <memset+0x8a>
     290:	b2ca      	uxtb	r2, r1
     292:	4603      	mov	r3, r0
     294:	e002      	b.n	29c <memset+0x18>
     296:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
     29a:	d338      	bcc.n	30e <memset+0x8a>
     29c:	f803 2b01 	strb.w	r2, [r3], #1
     2a0:	079d      	lsls	r5, r3, #30
     2a2:	d1f8      	bne.n	296 <memset+0x12>
     2a4:	2c03      	cmp	r4, #3
     2a6:	d92b      	bls.n	300 <memset+0x7c>
     2a8:	b2cd      	uxtb	r5, r1
     2aa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
     2ae:	2c0f      	cmp	r4, #15
     2b0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
     2b4:	d916      	bls.n	2e4 <memset+0x60>
     2b6:	f1a4 0710 	sub.w	r7, r4, #16
     2ba:	093f      	lsrs	r7, r7, #4
     2bc:	f103 0620 	add.w	r6, r3, #32
     2c0:	eb06 1607 	add.w	r6, r6, r7, lsl #4
     2c4:	f103 0210 	add.w	r2, r3, #16
     2c8:	e942 5504 	strd	r5, r5, [r2, #-16]
     2cc:	e942 5502 	strd	r5, r5, [r2, #-8]
     2d0:	3210      	adds	r2, #16
     2d2:	42b2      	cmp	r2, r6
     2d4:	d1f8      	bne.n	2c8 <memset+0x44>
     2d6:	f004 040f 	and.w	r4, r4, #15
     2da:	3701      	adds	r7, #1
     2dc:	2c03      	cmp	r4, #3
     2de:	eb03 1307 	add.w	r3, r3, r7, lsl #4
     2e2:	d90d      	bls.n	300 <memset+0x7c>
     2e4:	461e      	mov	r6, r3
     2e6:	4622      	mov	r2, r4
     2e8:	3a04      	subs	r2, #4
     2ea:	2a03      	cmp	r2, #3
     2ec:	f846 5b04 	str.w	r5, [r6], #4
     2f0:	d8fa      	bhi.n	2e8 <memset+0x64>
     2f2:	1f22      	subs	r2, r4, #4
     2f4:	f022 0203 	bic.w	r2, r2, #3
     2f8:	3204      	adds	r2, #4
     2fa:	4413      	add	r3, r2
     2fc:	f004 0403 	and.w	r4, r4, #3
     300:	b12c      	cbz	r4, 30e <memset+0x8a>
     302:	b2c9      	uxtb	r1, r1
     304:	441c      	add	r4, r3
     306:	f803 1b01 	strb.w	r1, [r3], #1
     30a:	429c      	cmp	r4, r3
     30c:	d1fb      	bne.n	306 <memset+0x82>
     30e:	bcf0      	pop	{r4, r5, r6, r7}
     310:	4770      	bx	lr
     312:	4614      	mov	r4, r2
     314:	4603      	mov	r3, r0
     316:	e7c5      	b.n	2a4 <memset+0x20>

00000318 <__retarget_lock_init_recursive>:
     318:	4770      	bx	lr
     31a:	bf00      	nop

0000031c <__retarget_lock_close_recursive>:
     31c:	4770      	bx	lr
     31e:	bf00      	nop

00000320 <__retarget_lock_acquire_recursive>:
     320:	4770      	bx	lr
     322:	bf00      	nop

00000324 <__retarget_lock_release_recursive>:
     324:	4770      	bx	lr
     326:	bf00      	nop

00000328 <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
     328:	b580      	push	{r7, lr}
     32a:	b082      	sub	sp, #8
     32c:	af00      	add	r7, sp, #0
    unsigned long *pulSrc, *pulDest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
     32e:	4b13      	ldr	r3, [pc, #76]	; (37c <zero_loop+0x24>)
     330:	607b      	str	r3, [r7, #4]
    for(pulDest = &_data; pulDest < &_edata; )
     332:	4b13      	ldr	r3, [pc, #76]	; (380 <zero_loop+0x28>)
     334:	603b      	str	r3, [r7, #0]
     336:	e007      	b.n	348 <ResetISR+0x20>
    {
        *pulDest++ = *pulSrc++;
     338:	687a      	ldr	r2, [r7, #4]
     33a:	1d13      	adds	r3, r2, #4
     33c:	607b      	str	r3, [r7, #4]
     33e:	683b      	ldr	r3, [r7, #0]
     340:	1d19      	adds	r1, r3, #4
     342:	6039      	str	r1, [r7, #0]
     344:	6812      	ldr	r2, [r2, #0]
     346:	601a      	str	r2, [r3, #0]
    for(pulDest = &_data; pulDest < &_edata; )
     348:	683b      	ldr	r3, [r7, #0]
     34a:	4a0e      	ldr	r2, [pc, #56]	; (384 <zero_loop+0x2c>)
     34c:	4293      	cmp	r3, r2
     34e:	d3f3      	bcc.n	338 <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
     350:	480e      	ldr	r0, [pc, #56]	; (38c <zero_loop+0x34>)
     352:	490f      	ldr	r1, [pc, #60]	; (390 <zero_loop+0x38>)
     354:	f04f 0200 	mov.w	r2, #0

00000358 <zero_loop>:
     358:	4288      	cmp	r0, r1
     35a:	bfb8      	it	lt
     35c:	f840 2b04 	strlt.w	r2, [r0], #4
     360:	dbfa      	blt.n	358 <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
     362:	4b09      	ldr	r3, [pc, #36]	; (388 <zero_loop+0x30>)
     364:	681b      	ldr	r3, [r3, #0]
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <zero_loop+0x30>)
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
     368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
     36c:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    main();
     36e:	f000 f91f 	bl	5b0 <main>
}
     372:	bf00      	nop
     374:	3708      	adds	r7, #8
     376:	46bd      	mov	sp, r7
     378:	bd80      	pop	{r7, pc}
     37a:	bf00      	nop
     37c:	00006ba4 	.word	0x00006ba4
     380:	20000000 	.word	0x20000000
     384:	20000a21 	.word	0x20000a21
     388:	e000ed88 	.word	0xe000ed88
     38c:	20000a24 	.word	0x20000a24
     390:	200016ec 	.word	0x200016ec

00000394 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
     394:	b480      	push	{r7}
     396:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
     398:	e7fe      	b.n	398 <NmiSR+0x4>

0000039a <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
     39a:	b480      	push	{r7}
     39c:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
     39e:	e7fe      	b.n	39e <FaultISR+0x4>

000003a0 <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
     3a0:	b480      	push	{r7}
     3a2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     3a4:	e7fe      	b.n	3a4 <IntDefaultHandler+0x4>
	...

000003a8 <SysTickIntHandler>:
// Interrupt handler for the system tick counter.
//
//*****************************************************************************
void
SysTickIntHandler(void)
{
     3a8:	b480      	push	{r7}
     3aa:	af00      	add	r7, sp, #0
    //
    // Update our system tick counter.
    //
    g_ulSysTickCount++;
     3ac:	4b04      	ldr	r3, [pc, #16]	; (3c0 <SysTickIntHandler+0x18>)
     3ae:	681b      	ldr	r3, [r3, #0]
     3b0:	3301      	adds	r3, #1
     3b2:	4a03      	ldr	r2, [pc, #12]	; (3c0 <SysTickIntHandler+0x18>)
     3b4:	6013      	str	r3, [r2, #0]
}
     3b6:	bf00      	nop
     3b8:	46bd      	mov	sp, r7
     3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
     3be:	4770      	bx	lr
     3c0:	20000e24 	.word	0x20000e24

000003c4 <EchoNewDataToHost>:
//
//*****************************************************************************
static unsigned long
EchoNewDataToHost(tUSBDBulkDevice *psDevice, unsigned char *pcData,
                  unsigned long ulNumBytes)
{
     3c4:	b580      	push	{r7, lr}
     3c6:	b08e      	sub	sp, #56	; 0x38
     3c8:	af00      	add	r7, sp, #0
     3ca:	60f8      	str	r0, [r7, #12]
     3cc:	60b9      	str	r1, [r7, #8]
     3ce:	607a      	str	r2, [r7, #4]
    //
    // Get the current buffer information to allow us to write directly to
    // the transmit buffer (we already have enough information from the
    // parameters to access the receive buffer directly).
    //
    USBBufferInfoGet(&g_sTxBuffer, &sTxRing);
     3d0:	f107 0314 	add.w	r3, r7, #20
     3d4:	4619      	mov	r1, r3
     3d6:	483e      	ldr	r0, [pc, #248]	; (4d0 <EchoNewDataToHost+0x10c>)
     3d8:	f004 ff43 	bl	5262 <USBBufferInfoGet>

    //
    // How much space is there in the transmit buffer?
    //
    ulSpace = USBBufferSpaceAvailable(&g_sTxBuffer);
     3dc:	483c      	ldr	r0, [pc, #240]	; (4d0 <EchoNewDataToHost+0x10c>)
     3de:	f004 ff79 	bl	52d4 <USBBufferSpaceAvailable>
     3e2:	62b8      	str	r0, [r7, #40]	; 0x28

    //
    // How many characters can we process this time round?
    //
    ulLoop = (ulSpace < ulNumBytes) ? ulSpace : ulNumBytes;
     3e4:	687a      	ldr	r2, [r7, #4]
     3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
     3e8:	4293      	cmp	r3, r2
     3ea:	bf28      	it	cs
     3ec:	4613      	movcs	r3, r2
     3ee:	637b      	str	r3, [r7, #52]	; 0x34
    ulCount = ulLoop;
     3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     3f2:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Update our receive counter.
    //
    g_ulRxCount += ulNumBytes;
     3f4:	4b37      	ldr	r3, [pc, #220]	; (4d4 <EchoNewDataToHost+0x110>)
     3f6:	681a      	ldr	r2, [r3, #0]
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	4413      	add	r3, r2
     3fc:	4a35      	ldr	r2, [pc, #212]	; (4d4 <EchoNewDataToHost+0x110>)
     3fe:	6013      	str	r3, [r2, #0]

    //
    // Dump a debug message.
    //
    DEBUG_PRINT("Received %d bytes\n", ulNumBytes);
     400:	bf00      	nop

    //
    // Set up to process the characters by directly accessing the USB buffers.
    //
    ulReadIndex = (unsigned long)(pcData - g_pucUSBRxBuffer);
     402:	68bb      	ldr	r3, [r7, #8]
     404:	4a34      	ldr	r2, [pc, #208]	; (4d8 <EchoNewDataToHost+0x114>)
     406:	1a9b      	subs	r3, r3, r2
     408:	633b      	str	r3, [r7, #48]	; 0x30
    ulWriteIndex = sTxRing.ulWriteIndex;
     40a:	69bb      	ldr	r3, [r7, #24]
     40c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while(ulLoop)
     40e:	e051      	b.n	4b4 <EchoNewDataToHost+0xf0>
        //

        //
        // Is this a lower case character?
        //
        if((g_pucUSBRxBuffer[ulReadIndex] >= 'a') &&
     410:	4a31      	ldr	r2, [pc, #196]	; (4d8 <EchoNewDataToHost+0x114>)
     412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     414:	4413      	add	r3, r2
     416:	781b      	ldrb	r3, [r3, #0]
     418:	2b60      	cmp	r3, #96	; 0x60
     41a:	d911      	bls.n	440 <EchoNewDataToHost+0x7c>
           (g_pucUSBRxBuffer[ulReadIndex] <= 'z'))
     41c:	4a2e      	ldr	r2, [pc, #184]	; (4d8 <EchoNewDataToHost+0x114>)
     41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     420:	4413      	add	r3, r2
     422:	781b      	ldrb	r3, [r3, #0]
        if((g_pucUSBRxBuffer[ulReadIndex] >= 'a') &&
     424:	2b7a      	cmp	r3, #122	; 0x7a
     426:	d80b      	bhi.n	440 <EchoNewDataToHost+0x7c>
        {
            //
            // Convert to upper case and write to the transmit buffer.
            //
            g_pucUSBTxBuffer[ulWriteIndex] =
                (g_pucUSBRxBuffer[ulReadIndex] - 'a') + 'A';
     428:	4a2b      	ldr	r2, [pc, #172]	; (4d8 <EchoNewDataToHost+0x114>)
     42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     42c:	4413      	add	r3, r2
     42e:	781b      	ldrb	r3, [r3, #0]
     430:	3b20      	subs	r3, #32
     432:	b2d9      	uxtb	r1, r3
            g_pucUSBTxBuffer[ulWriteIndex] =
     434:	4a29      	ldr	r2, [pc, #164]	; (4dc <EchoNewDataToHost+0x118>)
     436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     438:	4413      	add	r3, r2
     43a:	460a      	mov	r2, r1
     43c:	701a      	strb	r2, [r3, #0]
     43e:	e020      	b.n	482 <EchoNewDataToHost+0xbe>
        else
        {
            //
            // Is this an upper case character?
            //
            if((g_pucUSBRxBuffer[ulReadIndex] >= 'A') &&
     440:	4a25      	ldr	r2, [pc, #148]	; (4d8 <EchoNewDataToHost+0x114>)
     442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     444:	4413      	add	r3, r2
     446:	781b      	ldrb	r3, [r3, #0]
     448:	2b40      	cmp	r3, #64	; 0x40
     44a:	d911      	bls.n	470 <EchoNewDataToHost+0xac>
               (g_pucUSBRxBuffer[ulReadIndex] <= 'Z'))
     44c:	4a22      	ldr	r2, [pc, #136]	; (4d8 <EchoNewDataToHost+0x114>)
     44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     450:	4413      	add	r3, r2
     452:	781b      	ldrb	r3, [r3, #0]
            if((g_pucUSBRxBuffer[ulReadIndex] >= 'A') &&
     454:	2b5a      	cmp	r3, #90	; 0x5a
     456:	d80b      	bhi.n	470 <EchoNewDataToHost+0xac>
            {
                //
                // Convert to lower case and write to the transmit buffer.
                //
                g_pucUSBTxBuffer[ulWriteIndex] =
                    (g_pucUSBRxBuffer[ulReadIndex] - 'Z') + 'z';
     458:	4a1f      	ldr	r2, [pc, #124]	; (4d8 <EchoNewDataToHost+0x114>)
     45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     45c:	4413      	add	r3, r2
     45e:	781b      	ldrb	r3, [r3, #0]
     460:	3320      	adds	r3, #32
     462:	b2d9      	uxtb	r1, r3
                g_pucUSBTxBuffer[ulWriteIndex] =
     464:	4a1d      	ldr	r2, [pc, #116]	; (4dc <EchoNewDataToHost+0x118>)
     466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     468:	4413      	add	r3, r2
     46a:	460a      	mov	r2, r1
     46c:	701a      	strb	r2, [r3, #0]
     46e:	e008      	b.n	482 <EchoNewDataToHost+0xbe>
            else
            {
                //
                // Copy the received character to the transmit buffer.
                //
                g_pucUSBTxBuffer[ulWriteIndex] = g_pucUSBRxBuffer[ulReadIndex];
     470:	4a19      	ldr	r2, [pc, #100]	; (4d8 <EchoNewDataToHost+0x114>)
     472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     474:	4413      	add	r3, r2
     476:	7819      	ldrb	r1, [r3, #0]
     478:	4a18      	ldr	r2, [pc, #96]	; (4dc <EchoNewDataToHost+0x118>)
     47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     47c:	4413      	add	r3, r2
     47e:	460a      	mov	r2, r1
     480:	701a      	strb	r2, [r3, #0]

        //
        // Move to the next character taking care to adjust the pointer for
        // the buffer wrap if necessary.
        //
        ulWriteIndex++;
     482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     484:	3301      	adds	r3, #1
     486:	62fb      	str	r3, [r7, #44]	; 0x2c
        ulWriteIndex = (ulWriteIndex == BULK_BUFFER_SIZE) ? 0 : ulWriteIndex;
     488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     48e:	d001      	beq.n	494 <EchoNewDataToHost+0xd0>
     490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     492:	e000      	b.n	496 <EchoNewDataToHost+0xd2>
     494:	2300      	movs	r3, #0
     496:	62fb      	str	r3, [r7, #44]	; 0x2c

        ulReadIndex++;
     498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     49a:	3301      	adds	r3, #1
     49c:	633b      	str	r3, [r7, #48]	; 0x30
        ulReadIndex = (ulReadIndex == BULK_BUFFER_SIZE) ? 0 : ulReadIndex;
     49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     4a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     4a4:	d001      	beq.n	4aa <EchoNewDataToHost+0xe6>
     4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     4a8:	e000      	b.n	4ac <EchoNewDataToHost+0xe8>
     4aa:	2300      	movs	r3, #0
     4ac:	633b      	str	r3, [r7, #48]	; 0x30

        ulLoop--;
     4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     4b0:	3b01      	subs	r3, #1
     4b2:	637b      	str	r3, [r7, #52]	; 0x34
    while(ulLoop)
     4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     4b6:	2b00      	cmp	r3, #0
     4b8:	d1aa      	bne.n	410 <EchoNewDataToHost+0x4c>

    //
    // We've processed the data in place so now send the processed data
    // back to the host.
    //
    USBBufferDataWritten(&g_sTxBuffer, ulCount);
     4ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
     4bc:	4804      	ldr	r0, [pc, #16]	; (4d0 <EchoNewDataToHost+0x10c>)
     4be:	f004 fee3 	bl	5288 <USBBufferDataWritten>

    DEBUG_PRINT("Wrote %d bytes\n", ulCount);
     4c2:	bf00      	nop
    //
    // We processed as much data as we can directly from the receive buffer so
    // we need to return the number of bytes to allow the lower layer to
    // update its read pointer appropriately.
    //
    return(ulCount);
     4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     4c6:	4618      	mov	r0, r3
     4c8:	3738      	adds	r7, #56	; 0x38
     4ca:	46bd      	mov	sp, r7
     4cc:	bd80      	pop	{r7, pc}
     4ce:	bf00      	nop
     4d0:	000068c4 	.word	0x000068c4
     4d4:	20000e2c 	.word	0x20000e2c
     4d8:	2000154c 	.word	0x2000154c
     4dc:	2000141c 	.word	0x2000141c

000004e0 <TxHandler>:
//
//*****************************************************************************
unsigned long
TxHandler(void *pvCBData, unsigned long ulEvent, unsigned long ulMsgValue,
          void *pvMsgData)
{
     4e0:	b480      	push	{r7}
     4e2:	b085      	sub	sp, #20
     4e4:	af00      	add	r7, sp, #0
     4e6:	60f8      	str	r0, [r7, #12]
     4e8:	60b9      	str	r1, [r7, #8]
     4ea:	607a      	str	r2, [r7, #4]
     4ec:	603b      	str	r3, [r7, #0]
    //
    // We are not required to do anything in response to any transmit event
    // in this example. All we do is update our transmit counter.
    //
    if(ulEvent == USB_EVENT_TX_COMPLETE)
     4ee:	68bb      	ldr	r3, [r7, #8]
     4f0:	2b05      	cmp	r3, #5
     4f2:	d105      	bne.n	500 <TxHandler+0x20>
    {
        g_ulTxCount += ulMsgValue;
     4f4:	4b06      	ldr	r3, [pc, #24]	; (510 <TxHandler+0x30>)
     4f6:	681a      	ldr	r2, [r3, #0]
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	4413      	add	r3, r2
     4fc:	4a04      	ldr	r2, [pc, #16]	; (510 <TxHandler+0x30>)
     4fe:	6013      	str	r3, [r2, #0]
    }

    //
    // Dump a debug message.
    //
    DEBUG_PRINT("TX complete %d\n", ulMsgValue);
     500:	bf00      	nop

    return(0);
     502:	2300      	movs	r3, #0
}
     504:	4618      	mov	r0, r3
     506:	3714      	adds	r7, #20
     508:	46bd      	mov	sp, r7
     50a:	f85d 7b04 	ldr.w	r7, [sp], #4
     50e:	4770      	bx	lr
     510:	20000e28 	.word	0x20000e28

00000514 <RxHandler>:
//
//*****************************************************************************
unsigned long
RxHandler(void *pvCBData, unsigned long ulEvent,
               unsigned long ulMsgValue, void *pvMsgData)
{
     514:	b580      	push	{r7, lr}
     516:	b086      	sub	sp, #24
     518:	af00      	add	r7, sp, #0
     51a:	60f8      	str	r0, [r7, #12]
     51c:	60b9      	str	r1, [r7, #8]
     51e:	607a      	str	r2, [r7, #4]
     520:	603b      	str	r3, [r7, #0]
    //
    // Which event are we being sent?
    //
    switch(ulEvent)
     522:	68bb      	ldr	r3, [r7, #8]
     524:	2b08      	cmp	r3, #8
     526:	d832      	bhi.n	58e <RxHandler+0x7a>
     528:	a201      	add	r2, pc, #4	; (adr r2, 530 <RxHandler+0x1c>)
     52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     52e:	bf00      	nop
     530:	00000555 	.word	0x00000555
     534:	0000056f 	.word	0x0000056f
     538:	0000057d 	.word	0x0000057d
     53c:	0000058f 	.word	0x0000058f
     540:	0000058f 	.word	0x0000058f
     544:	0000058f 	.word	0x0000058f
     548:	0000058f 	.word	0x0000058f
     54c:	0000058f 	.word	0x0000058f
     550:	0000058f 	.word	0x0000058f
        //
        // We are connected to a host and communication is now possible.
        //
        case USB_EVENT_CONNECTED:
        {
            g_bUSBConfigured = true;
     554:	4b11      	ldr	r3, [pc, #68]	; (59c <RxHandler+0x88>)
     556:	2201      	movs	r2, #1
     558:	701a      	strb	r2, [r3, #0]
            printf("Host connected.\r\n");
     55a:	4811      	ldr	r0, [pc, #68]	; (5a0 <RxHandler+0x8c>)
     55c:	f000 fc26 	bl	dac <iprintf>

            //
            // Flush our buffers.
            //
            USBBufferFlush(&g_sTxBuffer);
     560:	4810      	ldr	r0, [pc, #64]	; (5a4 <RxHandler+0x90>)
     562:	f004 fea8 	bl	52b6 <USBBufferFlush>
            USBBufferFlush(&g_sRxBuffer);
     566:	4810      	ldr	r0, [pc, #64]	; (5a8 <RxHandler+0x94>)
     568:	f004 fea5 	bl	52b6 <USBBufferFlush>

            break;
     56c:	e010      	b.n	590 <RxHandler+0x7c>
        //
        // The host has disconnected.
        //
        case USB_EVENT_DISCONNECTED:
        {
            g_bUSBConfigured = false;
     56e:	4b0b      	ldr	r3, [pc, #44]	; (59c <RxHandler+0x88>)
     570:	2200      	movs	r2, #0
     572:	701a      	strb	r2, [r3, #0]
            printf("Host disconnected.\r\n");
     574:	480d      	ldr	r0, [pc, #52]	; (5ac <RxHandler+0x98>)
     576:	f000 fc19 	bl	dac <iprintf>
            break;
     57a:	e009      	b.n	590 <RxHandler+0x7c>

            //
            // Get a pointer to our instance data from the callback data
            // parameter.
            //
            psDevice = (tUSBDBulkDevice *)pvCBData;
     57c:	68fb      	ldr	r3, [r7, #12]
     57e:	617b      	str	r3, [r7, #20]

            //
            // Read the new packet and echo it back to the host.
            //
            return(EchoNewDataToHost(psDevice, pvMsgData, ulMsgValue));
     580:	687a      	ldr	r2, [r7, #4]
     582:	6839      	ldr	r1, [r7, #0]
     584:	6978      	ldr	r0, [r7, #20]
     586:	f7ff ff1d 	bl	3c4 <EchoNewDataToHost>
     58a:	4603      	mov	r3, r0
     58c:	e001      	b.n	592 <RxHandler+0x7e>
        //
        // Ignore all other events and return 0.
        //
        default:
        {
            break;
     58e:	bf00      	nop
        }
    }

    return(0);
     590:	2300      	movs	r3, #0
}
     592:	4618      	mov	r0, r3
     594:	3718      	adds	r7, #24
     596:	46bd      	mov	sp, r7
     598:	bd80      	pop	{r7, pc}
     59a:	bf00      	nop
     59c:	20000e30 	.word	0x20000e30
     5a0:	00006698 	.word	0x00006698
     5a4:	000068c4 	.word	0x000068c4
     5a8:	000068a0 	.word	0x000068a0
     5ac:	000066ac 	.word	0x000066ac

000005b0 <main>:
// This is the main application entry function.
//
//*****************************************************************************
int
main(void)
{
     5b0:	b590      	push	{r4, r7, lr}
     5b2:	b085      	sub	sp, #20
     5b4:	af00      	add	r7, sp, #0
    //
    // Enable lazy stacking for interrupt handlers.  This allows floating-point
    // instructions to be used within interrupt handlers, but at the expense of
    // extra stack usage.
    //
    ROM_FPULazyStackingEnable();
     5b6:	4b62      	ldr	r3, [pc, #392]	; (740 <main+0x190>)
     5b8:	681b      	ldr	r3, [r3, #0]
     5ba:	3310      	adds	r3, #16
     5bc:	681b      	ldr	r3, [r3, #0]
     5be:	4798      	blx	r3

    //
    // Set the clocking to run from the PLL at 50MHz
    //
    ROM_SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN |
     5c0:	4b60      	ldr	r3, [pc, #384]	; (744 <main+0x194>)
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	335c      	adds	r3, #92	; 0x5c
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	485f      	ldr	r0, [pc, #380]	; (748 <main+0x198>)
     5ca:	4798      	blx	r3
                       SYSCTL_XTAL_16MHZ);

    //
    // Configure the relevant pins such that UART0 owns them.
    //
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
     5cc:	4b5d      	ldr	r3, [pc, #372]	; (744 <main+0x194>)
     5ce:	681b      	ldr	r3, [r3, #0]
     5d0:	3318      	adds	r3, #24
     5d2:	681b      	ldr	r3, [r3, #0]
     5d4:	485d      	ldr	r0, [pc, #372]	; (74c <main+0x19c>)
     5d6:	4798      	blx	r3
    GPIOPinConfigure(GPIO_PA0_U0RX);
     5d8:	2001      	movs	r0, #1
     5da:	f005 fd85 	bl	60e8 <GPIOPinConfigure>
    GPIOPinConfigure(GPIO_PA1_U0TX);
     5de:	f240 4001 	movw	r0, #1025	; 0x401
     5e2:	f005 fd81 	bl	60e8 <GPIOPinConfigure>
    ROM_GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
     5e6:	4b5a      	ldr	r3, [pc, #360]	; (750 <main+0x1a0>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	3354      	adds	r3, #84	; 0x54
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	2103      	movs	r1, #3
     5f0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     5f4:	4798      	blx	r3

    //
    // Enable the GPIO port that is used for the on-board LED.
    //
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
     5f6:	4b53      	ldr	r3, [pc, #332]	; (744 <main+0x194>)
     5f8:	681b      	ldr	r3, [r3, #0]
     5fa:	3318      	adds	r3, #24
     5fc:	681b      	ldr	r3, [r3, #0]
     5fe:	4855      	ldr	r0, [pc, #340]	; (754 <main+0x1a4>)
     600:	4798      	blx	r3

    //
    // Enable the GPIO pins for the LED (PF2 & PF3).  
    //
    ROM_GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3|GPIO_PIN_2);
     602:	4b53      	ldr	r3, [pc, #332]	; (750 <main+0x1a0>)
     604:	681b      	ldr	r3, [r3, #0]
     606:	333c      	adds	r3, #60	; 0x3c
     608:	681b      	ldr	r3, [r3, #0]
     60a:	210c      	movs	r1, #12
     60c:	4852      	ldr	r0, [pc, #328]	; (758 <main+0x1a8>)
     60e:	4798      	blx	r3

    
    //
    // Open UART0 and show the application name on the UART.
    //
    UARTStdioInit(0);
     610:	2000      	movs	r0, #0
     612:	f000 fa1d 	bl	a50 <UARTStdioInit>
    printf("\033[2JStellaris USB bulk device example\r\n");
     616:	4851      	ldr	r0, [pc, #324]	; (75c <main+0x1ac>)
     618:	f000 fbc8 	bl	dac <iprintf>
    printf("---------------------------------\r\n");
     61c:	4850      	ldr	r0, [pc, #320]	; (760 <main+0x1b0>)
     61e:	f000 fbc5 	bl	dac <iprintf>


    printf("helloworld.\r\n");
     622:	4850      	ldr	r0, [pc, #320]	; (764 <main+0x1b4>)
     624:	f000 fbc2 	bl	dac <iprintf>

    //
    // Not configured initially.
    //
    g_bUSBConfigured = false;
     628:	4b4f      	ldr	r3, [pc, #316]	; (768 <main+0x1b8>)
     62a:	2200      	movs	r2, #0
     62c:	701a      	strb	r2, [r3, #0]

    //
    // Enable the GPIO peripheral used for USB, and configure the USB
    // pins.
    //
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
     62e:	4b45      	ldr	r3, [pc, #276]	; (744 <main+0x194>)
     630:	681b      	ldr	r3, [r3, #0]
     632:	3318      	adds	r3, #24
     634:	681b      	ldr	r3, [r3, #0]
     636:	484d      	ldr	r0, [pc, #308]	; (76c <main+0x1bc>)
     638:	4798      	blx	r3
    ROM_GPIOPinTypeUSBAnalog(GPIO_PORTD_BASE, GPIO_PIN_4 | GPIO_PIN_5);
     63a:	4b45      	ldr	r3, [pc, #276]	; (750 <main+0x1a0>)
     63c:	681b      	ldr	r3, [r3, #0]
     63e:	3370      	adds	r3, #112	; 0x70
     640:	681b      	ldr	r3, [r3, #0]
     642:	2130      	movs	r1, #48	; 0x30
     644:	484a      	ldr	r0, [pc, #296]	; (770 <main+0x1c0>)
     646:	4798      	blx	r3

    //
    // Enable the system tick.
    //
    ROM_SysTickPeriodSet(ROM_SysCtlClockGet() / SYSTICKS_PER_SECOND);
     648:	4b4a      	ldr	r3, [pc, #296]	; (774 <main+0x1c4>)
     64a:	681b      	ldr	r3, [r3, #0]
     64c:	3314      	adds	r3, #20
     64e:	681b      	ldr	r3, [r3, #0]
     650:	461c      	mov	r4, r3
     652:	4b3c      	ldr	r3, [pc, #240]	; (744 <main+0x194>)
     654:	681b      	ldr	r3, [r3, #0]
     656:	3360      	adds	r3, #96	; 0x60
     658:	681b      	ldr	r3, [r3, #0]
     65a:	4798      	blx	r3
     65c:	4602      	mov	r2, r0
     65e:	4b46      	ldr	r3, [pc, #280]	; (778 <main+0x1c8>)
     660:	fba3 2302 	umull	r2, r3, r3, r2
     664:	095b      	lsrs	r3, r3, #5
     666:	4618      	mov	r0, r3
     668:	47a0      	blx	r4
    ROM_SysTickIntEnable();
     66a:	4b42      	ldr	r3, [pc, #264]	; (774 <main+0x1c4>)
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	330c      	adds	r3, #12
     670:	681b      	ldr	r3, [r3, #0]
     672:	4798      	blx	r3
    ROM_SysTickEnable();
     674:	4b3f      	ldr	r3, [pc, #252]	; (774 <main+0x1c4>)
     676:	681b      	ldr	r3, [r3, #0]
     678:	3304      	adds	r3, #4
     67a:	681b      	ldr	r3, [r3, #0]
     67c:	4798      	blx	r3

    //
    // Tell the user what we are up to.
    //
    printf("Configuring USB\r\n");
     67e:	483f      	ldr	r0, [pc, #252]	; (77c <main+0x1cc>)
     680:	f000 fb94 	bl	dac <iprintf>

    //
    // Initialize the transmit and receive buffers.
    //
    USBBufferInit((tUSBBuffer *)&g_sTxBuffer);
     684:	483e      	ldr	r0, [pc, #248]	; (780 <main+0x1d0>)
     686:	f004 fdd5 	bl	5234 <USBBufferInit>
    USBBufferInit((tUSBBuffer *)&g_sRxBuffer);
     68a:	483e      	ldr	r0, [pc, #248]	; (784 <main+0x1d4>)
     68c:	f004 fdd2 	bl	5234 <USBBufferInit>

    //
    // Set the USB stack mode to Device mode with VBUS monitoring.
    //
    USBStackModeSet(0, USB_MODE_FORCE_DEVICE, 0);
     690:	2200      	movs	r2, #0
     692:	2105      	movs	r1, #5
     694:	2000      	movs	r0, #0
     696:	f004 fe7d 	bl	5394 <USBStackModeSet>

    //
    // Pass our device information to the USB library and place the device
    // on the bus.
    //
    USBDBulkInit(0, (tUSBDBulkDevice *)&g_sBulkDevice);
     69a:	493b      	ldr	r1, [pc, #236]	; (788 <main+0x1d8>)
     69c:	2000      	movs	r0, #0
     69e:	f003 fa5d 	bl	3b5c <USBDBulkInit>

    //
    // Wait for initial configuration to complete.
    //
    printf("Waiting for host...\r\n");
     6a2:	483a      	ldr	r0, [pc, #232]	; (78c <main+0x1dc>)
     6a4:	f000 fb82 	bl	dac <iprintf>

    //
    // Clear our local byte counters.
    //
    ulRxCount = 0;
     6a8:	2300      	movs	r3, #0
     6aa:	60bb      	str	r3, [r7, #8]
    ulTxCount = 0;
     6ac:	2300      	movs	r3, #0
     6ae:	60fb      	str	r3, [r7, #12]
    while(1)
    {
        //
        // See if any data has been transferred.
        //
        if((ulTxCount != g_ulTxCount) || (ulRxCount != g_ulRxCount))
     6b0:	4b37      	ldr	r3, [pc, #220]	; (790 <main+0x1e0>)
     6b2:	681b      	ldr	r3, [r3, #0]
     6b4:	68fa      	ldr	r2, [r7, #12]
     6b6:	429a      	cmp	r2, r3
     6b8:	d104      	bne.n	6c4 <main+0x114>
     6ba:	4b36      	ldr	r3, [pc, #216]	; (794 <main+0x1e4>)
     6bc:	681b      	ldr	r3, [r3, #0]
     6be:	68ba      	ldr	r2, [r7, #8]
     6c0:	429a      	cmp	r2, r3
     6c2:	d0f5      	beq.n	6b0 <main+0x100>
        {
            //
            // Has there been any transmit traffic since we last checked?
            //
            if(ulTxCount != g_ulTxCount)
     6c4:	4b32      	ldr	r3, [pc, #200]	; (790 <main+0x1e0>)
     6c6:	681b      	ldr	r3, [r3, #0]
     6c8:	68fa      	ldr	r2, [r7, #12]
     6ca:	429a      	cmp	r2, r3
     6cc:	d016      	beq.n	6fc <main+0x14c>
            {
                //
                // Turn on the Green LED.
                //
                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, GPIO_PIN_3);
     6ce:	2208      	movs	r2, #8
     6d0:	2108      	movs	r1, #8
     6d2:	4821      	ldr	r0, [pc, #132]	; (758 <main+0x1a8>)
     6d4:	f005 fcf1 	bl	60ba <GPIOPinWrite>

                //
                // Delay for a bit.
                //
                for(ulLoop = 0; ulLoop < 150000; ulLoop++)
     6d8:	2300      	movs	r3, #0
     6da:	607b      	str	r3, [r7, #4]
     6dc:	e002      	b.n	6e4 <main+0x134>
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	3301      	adds	r3, #1
     6e2:	607b      	str	r3, [r7, #4]
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	4a2c      	ldr	r2, [pc, #176]	; (798 <main+0x1e8>)
     6e8:	4293      	cmp	r3, r2
     6ea:	d9f8      	bls.n	6de <main+0x12e>
                }
            
                //
                // Turn off the Green LED.
                //
                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0);
     6ec:	2200      	movs	r2, #0
     6ee:	2108      	movs	r1, #8
     6f0:	4819      	ldr	r0, [pc, #100]	; (758 <main+0x1a8>)
     6f2:	f005 fce2 	bl	60ba <GPIOPinWrite>
                
                //
                // Take a snapshot of the latest transmit count.
                //
                ulTxCount = g_ulTxCount;
     6f6:	4b26      	ldr	r3, [pc, #152]	; (790 <main+0x1e0>)
     6f8:	681b      	ldr	r3, [r3, #0]
     6fa:	60fb      	str	r3, [r7, #12]
            }

            //
            // Has there been any receive traffic since we last checked?
            //
            if(ulRxCount != g_ulRxCount)
     6fc:	4b25      	ldr	r3, [pc, #148]	; (794 <main+0x1e4>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	68ba      	ldr	r2, [r7, #8]
     702:	429a      	cmp	r2, r3
     704:	d016      	beq.n	734 <main+0x184>
            {
                //
                // Turn on the Blue LED.
                //
                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);
     706:	2204      	movs	r2, #4
     708:	2104      	movs	r1, #4
     70a:	4813      	ldr	r0, [pc, #76]	; (758 <main+0x1a8>)
     70c:	f005 fcd5 	bl	60ba <GPIOPinWrite>

                //
                // Delay for a bit.
                //
                for(ulLoop = 0; ulLoop < 150000; ulLoop++)
     710:	2300      	movs	r3, #0
     712:	607b      	str	r3, [r7, #4]
     714:	e002      	b.n	71c <main+0x16c>
     716:	687b      	ldr	r3, [r7, #4]
     718:	3301      	adds	r3, #1
     71a:	607b      	str	r3, [r7, #4]
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	4a1e      	ldr	r2, [pc, #120]	; (798 <main+0x1e8>)
     720:	4293      	cmp	r3, r2
     722:	d9f8      	bls.n	716 <main+0x166>
                }
            
                //
                // Turn off the Blue LED.
                //
                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0);
     724:	2200      	movs	r2, #0
     726:	2104      	movs	r1, #4
     728:	480b      	ldr	r0, [pc, #44]	; (758 <main+0x1a8>)
     72a:	f005 fcc6 	bl	60ba <GPIOPinWrite>

                //
                // Take a snapshot of the latest receive count.
                //
                ulRxCount = g_ulRxCount;
     72e:	4b19      	ldr	r3, [pc, #100]	; (794 <main+0x1e4>)
     730:	681b      	ldr	r3, [r3, #0]
     732:	60bb      	str	r3, [r7, #8]
            }

            //
            // Update the display of bytes transferred.
            //
            printf("\rTx: %d  Rx: %d", ulTxCount, ulRxCount);
     734:	68ba      	ldr	r2, [r7, #8]
     736:	68f9      	ldr	r1, [r7, #12]
     738:	4818      	ldr	r0, [pc, #96]	; (79c <main+0x1ec>)
     73a:	f000 fb37 	bl	dac <iprintf>
        if((ulTxCount != g_ulTxCount) || (ulRxCount != g_ulRxCount))
     73e:	e7b7      	b.n	6b0 <main+0x100>
     740:	01000078 	.word	0x01000078
     744:	01000044 	.word	0x01000044
     748:	01c00540 	.word	0x01c00540
     74c:	20000001 	.word	0x20000001
     750:	01000020 	.word	0x01000020
     754:	20000020 	.word	0x20000020
     758:	40025000 	.word	0x40025000
     75c:	000066c4 	.word	0x000066c4
     760:	000066ec 	.word	0x000066ec
     764:	00006710 	.word	0x00006710
     768:	20000e30 	.word	0x20000e30
     76c:	20000008 	.word	0x20000008
     770:	40007000 	.word	0x40007000
     774:	01000038 	.word	0x01000038
     778:	51eb851f 	.word	0x51eb851f
     77c:	00006720 	.word	0x00006720
     780:	000068c4 	.word	0x000068c4
     784:	000068a0 	.word	0x000068a0
     788:	0000687c 	.word	0x0000687c
     78c:	00006734 	.word	0x00006734
     790:	20000e28 	.word	0x20000e28
     794:	20000e2c 	.word	0x20000e2c
     798:	000249ef 	.word	0x000249ef
     79c:	0000674c 	.word	0x0000674c

000007a0 <_write>:
#include "inc/hw_memmap.h"
#include "driverlib/rom.h"

#ifdef __GNUC__
int _write(int fd, char *ptr, int len)
{
     7a0:	b590      	push	{r4, r7, lr}
     7a2:	b087      	sub	sp, #28
     7a4:	af00      	add	r7, sp, #0
     7a6:	60f8      	str	r0, [r7, #12]
     7a8:	60b9      	str	r1, [r7, #8]
     7aa:	607a      	str	r2, [r7, #4]
    int count=len;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	617b      	str	r3, [r7, #20]
    while(count--)
     7b0:	e00a      	b.n	7c8 <_write+0x28>
    {
        ROM_UARTCharPut(UART0_BASE, *ptr++);
     7b2:	4b0a      	ldr	r3, [pc, #40]	; (7dc <_write+0x3c>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	681b      	ldr	r3, [r3, #0]
     7b8:	461c      	mov	r4, r3
     7ba:	68bb      	ldr	r3, [r7, #8]
     7bc:	1c5a      	adds	r2, r3, #1
     7be:	60ba      	str	r2, [r7, #8]
     7c0:	781b      	ldrb	r3, [r3, #0]
     7c2:	4619      	mov	r1, r3
     7c4:	4806      	ldr	r0, [pc, #24]	; (7e0 <_write+0x40>)
     7c6:	47a0      	blx	r4
    while(count--)
     7c8:	697b      	ldr	r3, [r7, #20]
     7ca:	1e5a      	subs	r2, r3, #1
     7cc:	617a      	str	r2, [r7, #20]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d1ef      	bne.n	7b2 <_write+0x12>
    }
    return len;
     7d2:	687b      	ldr	r3, [r7, #4]
}
     7d4:	4618      	mov	r0, r3
     7d6:	371c      	adds	r7, #28
     7d8:	46bd      	mov	sp, r7
     7da:	bd90      	pop	{r4, r7, pc}
     7dc:	01000014 	.word	0x01000014
     7e0:	4000c000 	.word	0x4000c000

000007e4 <_sbrk>:
#endif

caddr_t _sbrk(int incr)
{
     7e4:	b480      	push	{r7}
     7e6:	b083      	sub	sp, #12
     7e8:	af00      	add	r7, sp, #0
     7ea:	6078      	str	r0, [r7, #4]
    return (caddr_t) 0;
     7ec:	2300      	movs	r3, #0
}
     7ee:	4618      	mov	r0, r3
     7f0:	370c      	adds	r7, #12
     7f2:	46bd      	mov	sp, r7
     7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7f8:	4770      	bx	lr

000007fa <_fstat>:

int _fstat(int file, struct stat *st)
{
     7fa:	b480      	push	{r7}
     7fc:	b083      	sub	sp, #12
     7fe:	af00      	add	r7, sp, #0
     800:	6078      	str	r0, [r7, #4]
     802:	6039      	str	r1, [r7, #0]
    return 0;
     804:	2300      	movs	r3, #0
}
     806:	4618      	mov	r0, r3
     808:	370c      	adds	r7, #12
     80a:	46bd      	mov	sp, r7
     80c:	f85d 7b04 	ldr.w	r7, [sp], #4
     810:	4770      	bx	lr

00000812 <_read>:

int _read(int file, char *ptr, int len)
{
     812:	b480      	push	{r7}
     814:	b085      	sub	sp, #20
     816:	af00      	add	r7, sp, #0
     818:	60f8      	str	r0, [r7, #12]
     81a:	60b9      	str	r1, [r7, #8]
     81c:	607a      	str	r2, [r7, #4]
    return 0;
     81e:	2300      	movs	r3, #0
     820:	4618      	mov	r0, r3
     822:	3714      	adds	r7, #20
     824:	46bd      	mov	sp, r7
     826:	f85d 7b04 	ldr.w	r7, [sp], #4
     82a:	4770      	bx	lr

0000082c <IsBufferFull>:
//*****************************************************************************
#ifdef UART_BUFFERED
static tBoolean
IsBufferFull(volatile unsigned long *pulRead,
             volatile unsigned long *pulWrite, unsigned long ulSize)
{
     82c:	b480      	push	{r7}
     82e:	b087      	sub	sp, #28
     830:	af00      	add	r7, sp, #0
     832:	60f8      	str	r0, [r7, #12]
     834:	60b9      	str	r1, [r7, #8]
     836:	607a      	str	r2, [r7, #4]
    unsigned long ulWrite;
    unsigned long ulRead;

    ulWrite = *pulWrite;
     838:	68bb      	ldr	r3, [r7, #8]
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	617b      	str	r3, [r7, #20]
    ulRead = *pulRead;
     83e:	68fb      	ldr	r3, [r7, #12]
     840:	681b      	ldr	r3, [r3, #0]
     842:	613b      	str	r3, [r7, #16]

    return((((ulWrite + 1) % ulSize) == ulRead) ? true : false);
     844:	697b      	ldr	r3, [r7, #20]
     846:	3301      	adds	r3, #1
     848:	687a      	ldr	r2, [r7, #4]
     84a:	fbb3 f2f2 	udiv	r2, r3, r2
     84e:	6879      	ldr	r1, [r7, #4]
     850:	fb01 f202 	mul.w	r2, r1, r2
     854:	1a9b      	subs	r3, r3, r2
     856:	693a      	ldr	r2, [r7, #16]
     858:	429a      	cmp	r2, r3
     85a:	bf0c      	ite	eq
     85c:	2301      	moveq	r3, #1
     85e:	2300      	movne	r3, #0
     860:	b2db      	uxtb	r3, r3
}
     862:	4618      	mov	r0, r3
     864:	371c      	adds	r7, #28
     866:	46bd      	mov	sp, r7
     868:	f85d 7b04 	ldr.w	r7, [sp], #4
     86c:	4770      	bx	lr

0000086e <IsBufferEmpty>:
//*****************************************************************************
#ifdef UART_BUFFERED
static tBoolean
IsBufferEmpty(volatile unsigned long *pulRead,
              volatile unsigned long *pulWrite)
{
     86e:	b480      	push	{r7}
     870:	b085      	sub	sp, #20
     872:	af00      	add	r7, sp, #0
     874:	6078      	str	r0, [r7, #4]
     876:	6039      	str	r1, [r7, #0]
    unsigned long ulWrite;
    unsigned long ulRead;

    ulWrite = *pulWrite;
     878:	683b      	ldr	r3, [r7, #0]
     87a:	681b      	ldr	r3, [r3, #0]
     87c:	60fb      	str	r3, [r7, #12]
    ulRead = *pulRead;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	681b      	ldr	r3, [r3, #0]
     882:	60bb      	str	r3, [r7, #8]

    return((ulWrite  == ulRead) ? true : false);
     884:	68fa      	ldr	r2, [r7, #12]
     886:	68bb      	ldr	r3, [r7, #8]
     888:	429a      	cmp	r2, r3
     88a:	bf0c      	ite	eq
     88c:	2301      	moveq	r3, #1
     88e:	2300      	movne	r3, #0
     890:	b2db      	uxtb	r3, r3
}
     892:	4618      	mov	r0, r3
     894:	3714      	adds	r7, #20
     896:	46bd      	mov	sp, r7
     898:	f85d 7b04 	ldr.w	r7, [sp], #4
     89c:	4770      	bx	lr
	...

000008a0 <UARTPrimeTransmit>:
//
//*****************************************************************************
#ifdef UART_BUFFERED
static void
UARTPrimeTransmit(unsigned long ulBase)
{
     8a0:	b590      	push	{r4, r7, lr}
     8a2:	b083      	sub	sp, #12
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY)
     8a8:	4922      	ldr	r1, [pc, #136]	; (934 <UARTPrimeTransmit+0x94>)
     8aa:	4823      	ldr	r0, [pc, #140]	; (938 <UARTPrimeTransmit+0x98>)
     8ac:	f7ff ffdf 	bl	86e <IsBufferEmpty>
     8b0:	4603      	mov	r3, r0
     8b2:	2b00      	cmp	r3, #0
     8b4:	d13a      	bne.n	92c <UARTPrimeTransmit+0x8c>
    {
        //
        // Disable the UART interrupt. If we don't do this there is a race
        // condition which can cause the read index to be corrupted.
        //
        MAP_IntDisable(g_ulUARTInt[g_ulPortNum]);
     8b6:	4b21      	ldr	r3, [pc, #132]	; (93c <UARTPrimeTransmit+0x9c>)
     8b8:	681b      	ldr	r3, [r3, #0]
     8ba:	330c      	adds	r3, #12
     8bc:	681b      	ldr	r3, [r3, #0]
     8be:	4619      	mov	r1, r3
     8c0:	4b1f      	ldr	r3, [pc, #124]	; (940 <UARTPrimeTransmit+0xa0>)
     8c2:	681b      	ldr	r3, [r3, #0]
     8c4:	4a1f      	ldr	r2, [pc, #124]	; (944 <UARTPrimeTransmit+0xa4>)
     8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     8ca:	4618      	mov	r0, r3
     8cc:	4788      	blx	r1

        //
        // Yes - take some characters out of the transmit buffer and feed
        // them to the UART transmit FIFO.
        //
        while(MAP_UARTSpaceAvail(ulBase) && !TX_BUFFER_EMPTY)
     8ce:	e012      	b.n	8f6 <UARTPrimeTransmit+0x56>
        {
            MAP_UARTCharPutNonBlocking(ulBase,
     8d0:	4b1d      	ldr	r3, [pc, #116]	; (948 <UARTPrimeTransmit+0xa8>)
     8d2:	681b      	ldr	r3, [r3, #0]
     8d4:	333c      	adds	r3, #60	; 0x3c
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	461c      	mov	r4, r3
     8da:	4b17      	ldr	r3, [pc, #92]	; (938 <UARTPrimeTransmit+0x98>)
     8dc:	681b      	ldr	r3, [r3, #0]
     8de:	4a1b      	ldr	r2, [pc, #108]	; (94c <UARTPrimeTransmit+0xac>)
     8e0:	5cd3      	ldrb	r3, [r2, r3]
     8e2:	4619      	mov	r1, r3
     8e4:	6878      	ldr	r0, [r7, #4]
     8e6:	47a0      	blx	r4
                                       g_pcUARTTxBuffer[g_ulUARTTxReadIndex]);
            ADVANCE_TX_BUFFER_INDEX(g_ulUARTTxReadIndex);
     8e8:	4b13      	ldr	r3, [pc, #76]	; (938 <UARTPrimeTransmit+0x98>)
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	3301      	adds	r3, #1
     8ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
     8f2:	4a11      	ldr	r2, [pc, #68]	; (938 <UARTPrimeTransmit+0x98>)
     8f4:	6013      	str	r3, [r2, #0]
        while(MAP_UARTSpaceAvail(ulBase) && !TX_BUFFER_EMPTY)
     8f6:	4b14      	ldr	r3, [pc, #80]	; (948 <UARTPrimeTransmit+0xa8>)
     8f8:	681b      	ldr	r3, [r3, #0]
     8fa:	3330      	adds	r3, #48	; 0x30
     8fc:	681b      	ldr	r3, [r3, #0]
     8fe:	6878      	ldr	r0, [r7, #4]
     900:	4798      	blx	r3
     902:	4603      	mov	r3, r0
     904:	2b00      	cmp	r3, #0
     906:	d006      	beq.n	916 <UARTPrimeTransmit+0x76>
     908:	490a      	ldr	r1, [pc, #40]	; (934 <UARTPrimeTransmit+0x94>)
     90a:	480b      	ldr	r0, [pc, #44]	; (938 <UARTPrimeTransmit+0x98>)
     90c:	f7ff ffaf 	bl	86e <IsBufferEmpty>
     910:	4603      	mov	r3, r0
     912:	2b00      	cmp	r3, #0
     914:	d0dc      	beq.n	8d0 <UARTPrimeTransmit+0x30>
        }

        //
        // Reenable the UART interrupt.
        //
        MAP_IntEnable(g_ulUARTInt[g_ulPortNum]);
     916:	4b09      	ldr	r3, [pc, #36]	; (93c <UARTPrimeTransmit+0x9c>)
     918:	681b      	ldr	r3, [r3, #0]
     91a:	681b      	ldr	r3, [r3, #0]
     91c:	4619      	mov	r1, r3
     91e:	4b08      	ldr	r3, [pc, #32]	; (940 <UARTPrimeTransmit+0xa0>)
     920:	681b      	ldr	r3, [r3, #0]
     922:	4a08      	ldr	r2, [pc, #32]	; (944 <UARTPrimeTransmit+0xa4>)
     924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     928:	4618      	mov	r0, r3
     92a:	4788      	blx	r1
    }
}
     92c:	bf00      	nop
     92e:	370c      	adds	r7, #12
     930:	46bd      	mov	sp, r7
     932:	bd90      	pop	{r4, r7, pc}
     934:	20001234 	.word	0x20001234
     938:	20001238 	.word	0x20001238
     93c:	01000048 	.word	0x01000048
     940:	200012c8 	.word	0x200012c8
     944:	00006790 	.word	0x00006790
     948:	01000014 	.word	0x01000014
     94c:	20000e34 	.word	0x20000e34

00000950 <UARTStdioConfig>:
//
//*****************************************************************************
void
UARTStdioConfig(unsigned long ulPortNum, unsigned long ulBaud,
                unsigned long ulSrcClock)
{
     950:	b590      	push	{r4, r7, lr}
     952:	b085      	sub	sp, #20
     954:	af00      	add	r7, sp, #0
     956:	60f8      	str	r0, [r7, #12]
     958:	60b9      	str	r1, [r7, #8]
     95a:	607a      	str	r2, [r7, #4]
#endif

    //
    // Check to make sure the UART peripheral is present.
    //
    if(!MAP_SysCtlPeripheralPresent(g_ulUARTPeriph[ulPortNum]))
     95c:	4b34      	ldr	r3, [pc, #208]	; (a30 <UARTStdioConfig+0xe0>)
     95e:	681b      	ldr	r3, [r3, #0]
     960:	3310      	adds	r3, #16
     962:	681b      	ldr	r3, [r3, #0]
     964:	4619      	mov	r1, r3
     966:	4a33      	ldr	r2, [pc, #204]	; (a34 <UARTStdioConfig+0xe4>)
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     96e:	4618      	mov	r0, r3
     970:	4788      	blx	r1
     972:	4603      	mov	r3, r0
     974:	2b00      	cmp	r3, #0
     976:	d057      	beq.n	a28 <UARTStdioConfig+0xd8>
    }

    //
    // Select the base address of the UART.
    //
    g_ulBase = g_ulUARTBase[ulPortNum];
     978:	4a2f      	ldr	r2, [pc, #188]	; (a38 <UARTStdioConfig+0xe8>)
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     980:	4a2e      	ldr	r2, [pc, #184]	; (a3c <UARTStdioConfig+0xec>)
     982:	6013      	str	r3, [r2, #0]

    //
    // Enable the UART peripheral for use.
    //
    MAP_SysCtlPeripheralEnable(g_ulUARTPeriph[ulPortNum]);
     984:	4b2a      	ldr	r3, [pc, #168]	; (a30 <UARTStdioConfig+0xe0>)
     986:	681b      	ldr	r3, [r3, #0]
     988:	3318      	adds	r3, #24
     98a:	681b      	ldr	r3, [r3, #0]
     98c:	4619      	mov	r1, r3
     98e:	4a29      	ldr	r2, [pc, #164]	; (a34 <UARTStdioConfig+0xe4>)
     990:	68fb      	ldr	r3, [r7, #12]
     992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     996:	4618      	mov	r0, r3
     998:	4788      	blx	r1

    //
    // Configure the UART for 115200, n, 8, 1
    //
    MAP_UARTConfigSetExpClk(g_ulBase, ulSrcClock, ulBaud,
     99a:	4b29      	ldr	r3, [pc, #164]	; (a40 <UARTStdioConfig+0xf0>)
     99c:	681b      	ldr	r3, [r3, #0]
     99e:	3314      	adds	r3, #20
     9a0:	681b      	ldr	r3, [r3, #0]
     9a2:	461c      	mov	r4, r3
     9a4:	4b25      	ldr	r3, [pc, #148]	; (a3c <UARTStdioConfig+0xec>)
     9a6:	6818      	ldr	r0, [r3, #0]
     9a8:	2360      	movs	r3, #96	; 0x60
     9aa:	68ba      	ldr	r2, [r7, #8]
     9ac:	6879      	ldr	r1, [r7, #4]
     9ae:	47a0      	blx	r4
#ifdef UART_BUFFERED
    //
    // Set the UART to interrupt whenever the TX FIFO is almost empty or
    // when any character is received.
    //
    MAP_UARTFIFOLevelSet(g_ulBase, UART_FIFO_TX1_8, UART_FIFO_RX1_8);
     9b0:	4b23      	ldr	r3, [pc, #140]	; (a40 <UARTStdioConfig+0xf0>)
     9b2:	681b      	ldr	r3, [r3, #0]
     9b4:	330c      	adds	r3, #12
     9b6:	681b      	ldr	r3, [r3, #0]
     9b8:	461c      	mov	r4, r3
     9ba:	4b20      	ldr	r3, [pc, #128]	; (a3c <UARTStdioConfig+0xec>)
     9bc:	681b      	ldr	r3, [r3, #0]
     9be:	2200      	movs	r2, #0
     9c0:	2100      	movs	r1, #0
     9c2:	4618      	mov	r0, r3
     9c4:	47a0      	blx	r4

    //
    // Flush both the buffers.
    //
    UARTFlushRx();
     9c6:	f000 f8c5 	bl	b54 <UARTFlushRx>
    UARTFlushTx(true);
     9ca:	2001      	movs	r0, #1
     9cc:	f000 f8e4 	bl	b98 <UARTFlushTx>

    //
    // Remember which interrupt we are dealing with.
    //
    g_ulPortNum = ulPortNum;
     9d0:	4a1c      	ldr	r2, [pc, #112]	; (a44 <UARTStdioConfig+0xf4>)
     9d2:	68fb      	ldr	r3, [r7, #12]
     9d4:	6013      	str	r3, [r2, #0]
    // We are configured for buffered output so enable the master interrupt
    // for this UART and the receive interrupts.  We don't actually enable the
    // transmit interrupt in the UART itself until some data has been placed
    // in the transmit buffer.
    //
    MAP_UARTIntDisable(g_ulBase, 0xFFFFFFFF);
     9d6:	4b1a      	ldr	r3, [pc, #104]	; (a40 <UARTStdioConfig+0xf0>)
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	3348      	adds	r3, #72	; 0x48
     9dc:	681b      	ldr	r3, [r3, #0]
     9de:	461a      	mov	r2, r3
     9e0:	4b16      	ldr	r3, [pc, #88]	; (a3c <UARTStdioConfig+0xec>)
     9e2:	681b      	ldr	r3, [r3, #0]
     9e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     9e8:	4618      	mov	r0, r3
     9ea:	4790      	blx	r2
    MAP_UARTIntEnable(g_ulBase, UART_INT_RX | UART_INT_RT);
     9ec:	4b14      	ldr	r3, [pc, #80]	; (a40 <UARTStdioConfig+0xf0>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	3344      	adds	r3, #68	; 0x44
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	461a      	mov	r2, r3
     9f6:	4b11      	ldr	r3, [pc, #68]	; (a3c <UARTStdioConfig+0xec>)
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	2150      	movs	r1, #80	; 0x50
     9fc:	4618      	mov	r0, r3
     9fe:	4790      	blx	r2
    MAP_IntEnable(g_ulUARTInt[ulPortNum]);
     a00:	4b11      	ldr	r3, [pc, #68]	; (a48 <UARTStdioConfig+0xf8>)
     a02:	681b      	ldr	r3, [r3, #0]
     a04:	681b      	ldr	r3, [r3, #0]
     a06:	4619      	mov	r1, r3
     a08:	4a10      	ldr	r2, [pc, #64]	; (a4c <UARTStdioConfig+0xfc>)
     a0a:	68fb      	ldr	r3, [r7, #12]
     a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     a10:	4618      	mov	r0, r3
     a12:	4788      	blx	r1
#endif

    //
    // Enable the UART operation.
    //
    MAP_UARTEnable(g_ulBase);
     a14:	4b0a      	ldr	r3, [pc, #40]	; (a40 <UARTStdioConfig+0xf0>)
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	331c      	adds	r3, #28
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	461a      	mov	r2, r3
     a1e:	4b07      	ldr	r3, [pc, #28]	; (a3c <UARTStdioConfig+0xec>)
     a20:	681b      	ldr	r3, [r3, #0]
     a22:	4618      	mov	r0, r3
     a24:	4790      	blx	r2
     a26:	e000      	b.n	a2a <UARTStdioConfig+0xda>
        return;
     a28:	bf00      	nop
}
     a2a:	3714      	adds	r7, #20
     a2c:	46bd      	mov	sp, r7
     a2e:	bd90      	pop	{r4, r7, pc}
     a30:	01000044 	.word	0x01000044
     a34:	0000679c 	.word	0x0000679c
     a38:	00006784 	.word	0x00006784
     a3c:	200012c4 	.word	0x200012c4
     a40:	01000014 	.word	0x01000014
     a44:	200012c8 	.word	0x200012c8
     a48:	01000048 	.word	0x01000048
     a4c:	00006790 	.word	0x00006790

00000a50 <UARTStdioInit>:
//! \return None.
//
//*****************************************************************************
void
UARTStdioInit(unsigned long ulPortNum)
{
     a50:	b580      	push	{r7, lr}
     a52:	b082      	sub	sp, #8
     a54:	af00      	add	r7, sp, #0
     a56:	6078      	str	r0, [r7, #4]
    //
    // Pass this call on to the version of the function allowing the baud rate
    // to be specified.
    //
    UARTStdioConfig(ulPortNum, 115200, MAP_SysCtlClockGet());
     a58:	4b07      	ldr	r3, [pc, #28]	; (a78 <UARTStdioInit+0x28>)
     a5a:	681b      	ldr	r3, [r3, #0]
     a5c:	3360      	adds	r3, #96	; 0x60
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	4798      	blx	r3
     a62:	4603      	mov	r3, r0
     a64:	461a      	mov	r2, r3
     a66:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     a6a:	6878      	ldr	r0, [r7, #4]
     a6c:	f7ff ff70 	bl	950 <UARTStdioConfig>
}
     a70:	bf00      	nop
     a72:	3708      	adds	r7, #8
     a74:	46bd      	mov	sp, r7
     a76:	bd80      	pop	{r7, pc}
     a78:	01000044 	.word	0x01000044

00000a7c <UARTwrite>:
//! \return Returns the count of characters written.
//
//*****************************************************************************
int
UARTwrite(const char *pcBuf, unsigned long ulLen)
{
     a7c:	b580      	push	{r7, lr}
     a7e:	b084      	sub	sp, #16
     a80:	af00      	add	r7, sp, #0
     a82:	6078      	str	r0, [r7, #4]
     a84:	6039      	str	r1, [r7, #0]
    ASSERT(g_ulBase != 0);

    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ulLen; uIdx++)
     a86:	2300      	movs	r3, #0
     a88:	60fb      	str	r3, [r7, #12]
     a8a:	e035      	b.n	af8 <UARTwrite+0x7c>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output.
        //
        if(pcBuf[uIdx] == '\n')
     a8c:	687a      	ldr	r2, [r7, #4]
     a8e:	68fb      	ldr	r3, [r7, #12]
     a90:	4413      	add	r3, r2
     a92:	781b      	ldrb	r3, [r3, #0]
     a94:	2b0a      	cmp	r3, #10
     a96:	d114      	bne.n	ac2 <UARTwrite+0x46>
        {
            if(!TX_BUFFER_FULL)
     a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
     a9c:	4928      	ldr	r1, [pc, #160]	; (b40 <UARTwrite+0xc4>)
     a9e:	4829      	ldr	r0, [pc, #164]	; (b44 <UARTwrite+0xc8>)
     aa0:	f7ff fec4 	bl	82c <IsBufferFull>
     aa4:	4603      	mov	r3, r0
     aa6:	2b00      	cmp	r3, #0
     aa8:	d12b      	bne.n	b02 <UARTwrite+0x86>
            {
                g_pcUARTTxBuffer[g_ulUARTTxWriteIndex] = '\r';
     aaa:	4b25      	ldr	r3, [pc, #148]	; (b40 <UARTwrite+0xc4>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	4a26      	ldr	r2, [pc, #152]	; (b48 <UARTwrite+0xcc>)
     ab0:	210d      	movs	r1, #13
     ab2:	54d1      	strb	r1, [r2, r3]
                ADVANCE_TX_BUFFER_INDEX(g_ulUARTTxWriteIndex);
     ab4:	4b22      	ldr	r3, [pc, #136]	; (b40 <UARTwrite+0xc4>)
     ab6:	681b      	ldr	r3, [r3, #0]
     ab8:	3301      	adds	r3, #1
     aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
     abe:	4a20      	ldr	r2, [pc, #128]	; (b40 <UARTwrite+0xc4>)
     ac0:	6013      	str	r3, [r2, #0]
        }

        //
        // Send the character to the UART output.
        //
        if(!TX_BUFFER_FULL)
     ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ac6:	491e      	ldr	r1, [pc, #120]	; (b40 <UARTwrite+0xc4>)
     ac8:	481e      	ldr	r0, [pc, #120]	; (b44 <UARTwrite+0xc8>)
     aca:	f7ff feaf 	bl	82c <IsBufferFull>
     ace:	4603      	mov	r3, r0
     ad0:	2b00      	cmp	r3, #0
     ad2:	d118      	bne.n	b06 <UARTwrite+0x8a>
        {
            g_pcUARTTxBuffer[g_ulUARTTxWriteIndex] = pcBuf[uIdx];
     ad4:	687a      	ldr	r2, [r7, #4]
     ad6:	68fb      	ldr	r3, [r7, #12]
     ad8:	441a      	add	r2, r3
     ada:	4b19      	ldr	r3, [pc, #100]	; (b40 <UARTwrite+0xc4>)
     adc:	681b      	ldr	r3, [r3, #0]
     ade:	7811      	ldrb	r1, [r2, #0]
     ae0:	4a19      	ldr	r2, [pc, #100]	; (b48 <UARTwrite+0xcc>)
     ae2:	54d1      	strb	r1, [r2, r3]
            ADVANCE_TX_BUFFER_INDEX(g_ulUARTTxWriteIndex);
     ae4:	4b16      	ldr	r3, [pc, #88]	; (b40 <UARTwrite+0xc4>)
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	3301      	adds	r3, #1
     aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
     aee:	4a14      	ldr	r2, [pc, #80]	; (b40 <UARTwrite+0xc4>)
     af0:	6013      	str	r3, [r2, #0]
    for(uIdx = 0; uIdx < ulLen; uIdx++)
     af2:	68fb      	ldr	r3, [r7, #12]
     af4:	3301      	adds	r3, #1
     af6:	60fb      	str	r3, [r7, #12]
     af8:	68fa      	ldr	r2, [r7, #12]
     afa:	683b      	ldr	r3, [r7, #0]
     afc:	429a      	cmp	r2, r3
     afe:	d3c5      	bcc.n	a8c <UARTwrite+0x10>
     b00:	e002      	b.n	b08 <UARTwrite+0x8c>
                break;
     b02:	bf00      	nop
     b04:	e000      	b.n	b08 <UARTwrite+0x8c>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            break;
     b06:	bf00      	nop

    //
    // If we have anything in the buffer, make sure that the UART is set
    // up to transmit it.
    //
    if(!TX_BUFFER_EMPTY)
     b08:	490d      	ldr	r1, [pc, #52]	; (b40 <UARTwrite+0xc4>)
     b0a:	480e      	ldr	r0, [pc, #56]	; (b44 <UARTwrite+0xc8>)
     b0c:	f7ff feaf 	bl	86e <IsBufferEmpty>
     b10:	4603      	mov	r3, r0
     b12:	2b00      	cmp	r3, #0
     b14:	d10e      	bne.n	b34 <UARTwrite+0xb8>
    {
        UARTPrimeTransmit(g_ulBase);
     b16:	4b0d      	ldr	r3, [pc, #52]	; (b4c <UARTwrite+0xd0>)
     b18:	681b      	ldr	r3, [r3, #0]
     b1a:	4618      	mov	r0, r3
     b1c:	f7ff fec0 	bl	8a0 <UARTPrimeTransmit>
        MAP_UARTIntEnable(g_ulBase, UART_INT_TX);
     b20:	4b0b      	ldr	r3, [pc, #44]	; (b50 <UARTwrite+0xd4>)
     b22:	681b      	ldr	r3, [r3, #0]
     b24:	3344      	adds	r3, #68	; 0x44
     b26:	681b      	ldr	r3, [r3, #0]
     b28:	461a      	mov	r2, r3
     b2a:	4b08      	ldr	r3, [pc, #32]	; (b4c <UARTwrite+0xd0>)
     b2c:	681b      	ldr	r3, [r3, #0]
     b2e:	2120      	movs	r1, #32
     b30:	4618      	mov	r0, r3
     b32:	4790      	blx	r2
    }

    //
    // Return the number of characters written.
    //
    return(uIdx);
     b34:	68fb      	ldr	r3, [r7, #12]
    //
    // Return the number of characters written.
    //
    return(uIdx);
#endif
}
     b36:	4618      	mov	r0, r3
     b38:	3710      	adds	r7, #16
     b3a:	46bd      	mov	sp, r7
     b3c:	bd80      	pop	{r7, pc}
     b3e:	bf00      	nop
     b40:	20001234 	.word	0x20001234
     b44:	20001238 	.word	0x20001238
     b48:	20000e34 	.word	0x20000e34
     b4c:	200012c4 	.word	0x200012c4
     b50:	01000014 	.word	0x01000014

00000b54 <UARTFlushRx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushRx(void)
{
     b54:	b580      	push	{r7, lr}
     b56:	b082      	sub	sp, #8
     b58:	af00      	add	r7, sp, #0
    unsigned long ulInt;

    //
    // Temporarily turn off interrupts.
    //
    ulInt = MAP_IntMasterDisable();
     b5a:	4b0c      	ldr	r3, [pc, #48]	; (b8c <UARTFlushRx+0x38>)
     b5c:	681b      	ldr	r3, [r3, #0]
     b5e:	3308      	adds	r3, #8
     b60:	681b      	ldr	r3, [r3, #0]
     b62:	4798      	blx	r3
     b64:	4603      	mov	r3, r0
     b66:	607b      	str	r3, [r7, #4]

    //
    // Flush the receive buffer.
    //
    g_ulUARTRxReadIndex = 0;
     b68:	4b09      	ldr	r3, [pc, #36]	; (b90 <UARTFlushRx+0x3c>)
     b6a:	2200      	movs	r2, #0
     b6c:	601a      	str	r2, [r3, #0]
    g_ulUARTRxWriteIndex = 0;
     b6e:	4b09      	ldr	r3, [pc, #36]	; (b94 <UARTFlushRx+0x40>)
     b70:	2200      	movs	r2, #0
     b72:	601a      	str	r2, [r3, #0]

    //
    // If interrupts were enabled when we turned them off, turn them
    // back on again.
    //
    if(!ulInt)
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	2b00      	cmp	r3, #0
     b78:	d104      	bne.n	b84 <UARTFlushRx+0x30>
    {
        MAP_IntMasterEnable();
     b7a:	4b04      	ldr	r3, [pc, #16]	; (b8c <UARTFlushRx+0x38>)
     b7c:	681b      	ldr	r3, [r3, #0]
     b7e:	3304      	adds	r3, #4
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	4798      	blx	r3
    }
}
     b84:	bf00      	nop
     b86:	3708      	adds	r7, #8
     b88:	46bd      	mov	sp, r7
     b8a:	bd80      	pop	{r7, pc}
     b8c:	01000048 	.word	0x01000048
     b90:	200012c0 	.word	0x200012c0
     b94:	200012bc 	.word	0x200012bc

00000b98 <UARTFlushTx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushTx(tBoolean bDiscard)
{
     b98:	b580      	push	{r7, lr}
     b9a:	b084      	sub	sp, #16
     b9c:	af00      	add	r7, sp, #0
     b9e:	4603      	mov	r3, r0
     ba0:	71fb      	strb	r3, [r7, #7]
    unsigned long ulInt;

    //
    // Should the remaining data be discarded or transmitted?
    //
    if(bDiscard)
     ba2:	79fb      	ldrb	r3, [r7, #7]
     ba4:	2b00      	cmp	r3, #0
     ba6:	d015      	beq.n	bd4 <UARTFlushTx+0x3c>
    {
        //
        // The remaining data should be discarded, so temporarily turn off
        // interrupts.
        //
        ulInt = MAP_IntMasterDisable();
     ba8:	4b10      	ldr	r3, [pc, #64]	; (bec <UARTFlushTx+0x54>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	3308      	adds	r3, #8
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	4798      	blx	r3
     bb2:	4603      	mov	r3, r0
     bb4:	60fb      	str	r3, [r7, #12]

        //
        // Flush the transmit buffer.
        //
        g_ulUARTTxReadIndex = 0;
     bb6:	4b0e      	ldr	r3, [pc, #56]	; (bf0 <UARTFlushTx+0x58>)
     bb8:	2200      	movs	r2, #0
     bba:	601a      	str	r2, [r3, #0]
        g_ulUARTTxWriteIndex = 0;
     bbc:	4b0d      	ldr	r3, [pc, #52]	; (bf4 <UARTFlushTx+0x5c>)
     bbe:	2200      	movs	r2, #0
     bc0:	601a      	str	r2, [r3, #0]

        //
        // If interrupts were enabled when we turned them off, turn them
        // back on again.
        //
        if(!ulInt)
     bc2:	68fb      	ldr	r3, [r7, #12]
     bc4:	2b00      	cmp	r3, #0
     bc6:	d10d      	bne.n	be4 <UARTFlushTx+0x4c>
        {
            MAP_IntMasterEnable();
     bc8:	4b08      	ldr	r3, [pc, #32]	; (bec <UARTFlushTx+0x54>)
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	3304      	adds	r3, #4
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	4798      	blx	r3
        //
        while(!TX_BUFFER_EMPTY)
        {
        }
    }
}
     bd2:	e007      	b.n	be4 <UARTFlushTx+0x4c>
        while(!TX_BUFFER_EMPTY)
     bd4:	bf00      	nop
     bd6:	4907      	ldr	r1, [pc, #28]	; (bf4 <UARTFlushTx+0x5c>)
     bd8:	4805      	ldr	r0, [pc, #20]	; (bf0 <UARTFlushTx+0x58>)
     bda:	f7ff fe48 	bl	86e <IsBufferEmpty>
     bde:	4603      	mov	r3, r0
     be0:	2b00      	cmp	r3, #0
     be2:	d0f8      	beq.n	bd6 <UARTFlushTx+0x3e>
}
     be4:	bf00      	nop
     be6:	3710      	adds	r7, #16
     be8:	46bd      	mov	sp, r7
     bea:	bd80      	pop	{r7, pc}
     bec:	01000048 	.word	0x01000048
     bf0:	20001238 	.word	0x20001238
     bf4:	20001234 	.word	0x20001234

00000bf8 <UARTStdioIntHandler>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTStdioIntHandler(void)
{
     bf8:	b580      	push	{r7, lr}
     bfa:	b084      	sub	sp, #16
     bfc:	af00      	add	r7, sp, #0
    static tBoolean bLastWasCR = false;

    //
    // Get and clear the current interrupt source(s)
    //
    ulInts = MAP_UARTIntStatus(g_ulBase, true);
     bfe:	4b60      	ldr	r3, [pc, #384]	; (d80 <UARTStdioIntHandler+0x188>)
     c00:	681b      	ldr	r3, [r3, #0]
     c02:	334c      	adds	r3, #76	; 0x4c
     c04:	681b      	ldr	r3, [r3, #0]
     c06:	461a      	mov	r2, r3
     c08:	4b5e      	ldr	r3, [pc, #376]	; (d84 <UARTStdioIntHandler+0x18c>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	2101      	movs	r1, #1
     c0e:	4618      	mov	r0, r3
     c10:	4790      	blx	r2
     c12:	60f8      	str	r0, [r7, #12]
    MAP_UARTIntClear(g_ulBase, ulInts);
     c14:	4b5a      	ldr	r3, [pc, #360]	; (d80 <UARTStdioIntHandler+0x188>)
     c16:	681b      	ldr	r3, [r3, #0]
     c18:	3350      	adds	r3, #80	; 0x50
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	461a      	mov	r2, r3
     c1e:	4b59      	ldr	r3, [pc, #356]	; (d84 <UARTStdioIntHandler+0x18c>)
     c20:	681b      	ldr	r3, [r3, #0]
     c22:	68f9      	ldr	r1, [r7, #12]
     c24:	4618      	mov	r0, r3
     c26:	4790      	blx	r2

    //
    // Are we being interrupted because the TX FIFO has space available?
    //
    if(ulInts & UART_INT_TX)
     c28:	68fb      	ldr	r3, [r7, #12]
     c2a:	f003 0320 	and.w	r3, r3, #32
     c2e:	2b00      	cmp	r3, #0
     c30:	d015      	beq.n	c5e <UARTStdioIntHandler+0x66>
    {
        //
        // Move as many bytes as we can into the transmit FIFO.
        //
        UARTPrimeTransmit(g_ulBase);
     c32:	4b54      	ldr	r3, [pc, #336]	; (d84 <UARTStdioIntHandler+0x18c>)
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	4618      	mov	r0, r3
     c38:	f7ff fe32 	bl	8a0 <UARTPrimeTransmit>

        //
        // If the output buffer is empty, turn off the transmit interrupt.
        //
        if(TX_BUFFER_EMPTY)
     c3c:	4952      	ldr	r1, [pc, #328]	; (d88 <UARTStdioIntHandler+0x190>)
     c3e:	4853      	ldr	r0, [pc, #332]	; (d8c <UARTStdioIntHandler+0x194>)
     c40:	f7ff fe15 	bl	86e <IsBufferEmpty>
     c44:	4603      	mov	r3, r0
     c46:	2b00      	cmp	r3, #0
     c48:	d009      	beq.n	c5e <UARTStdioIntHandler+0x66>
        {
            MAP_UARTIntDisable(g_ulBase, UART_INT_TX);
     c4a:	4b4d      	ldr	r3, [pc, #308]	; (d80 <UARTStdioIntHandler+0x188>)
     c4c:	681b      	ldr	r3, [r3, #0]
     c4e:	3348      	adds	r3, #72	; 0x48
     c50:	681b      	ldr	r3, [r3, #0]
     c52:	461a      	mov	r2, r3
     c54:	4b4b      	ldr	r3, [pc, #300]	; (d84 <UARTStdioIntHandler+0x18c>)
     c56:	681b      	ldr	r3, [r3, #0]
     c58:	2120      	movs	r1, #32
     c5a:	4618      	mov	r0, r3
     c5c:	4790      	blx	r2
    }

    //
    // Are we being interrupted due to a received character?
    //
    if(ulInts & (UART_INT_RX | UART_INT_RT))
     c5e:	68fb      	ldr	r3, [r7, #12]
     c60:	f003 0350 	and.w	r3, r3, #80	; 0x50
     c64:	2b00      	cmp	r3, #0
     c66:	f000 8087 	beq.w	d78 <UARTStdioIntHandler+0x180>
    {
        //
        // Get all the available characters from the UART.
        //
        while(MAP_UARTCharsAvail(g_ulBase))
     c6a:	e06a      	b.n	d42 <UARTStdioIntHandler+0x14a>
        {
            //
            // Read a character
            //
            lChar = MAP_UARTCharGetNonBlocking(g_ulBase);
     c6c:	4b44      	ldr	r3, [pc, #272]	; (d80 <UARTStdioIntHandler+0x188>)
     c6e:	681b      	ldr	r3, [r3, #0]
     c70:	3334      	adds	r3, #52	; 0x34
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	461a      	mov	r2, r3
     c76:	4b43      	ldr	r3, [pc, #268]	; (d84 <UARTStdioIntHandler+0x18c>)
     c78:	681b      	ldr	r3, [r3, #0]
     c7a:	4618      	mov	r0, r3
     c7c:	4790      	blx	r2
     c7e:	60b8      	str	r0, [r7, #8]
            cChar = (unsigned char)(lChar & 0xFF);
     c80:	68bb      	ldr	r3, [r7, #8]
     c82:	b2db      	uxtb	r3, r3
     c84:	71fb      	strb	r3, [r7, #7]
            //
            // If echo is disabled, we skip the various text filtering
            // operations that would typically be required when supporting a
            // command line.
            //
            if(!g_bDisableEcho)
     c86:	4b42      	ldr	r3, [pc, #264]	; (d90 <UARTStdioIntHandler+0x198>)
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d13b      	bne.n	d06 <UARTStdioIntHandler+0x10e>
            {
                //
                // Handle backspace by erasing the last character in the buffer.
                //
                if(cChar == '\b')
     c8e:	79fb      	ldrb	r3, [r7, #7]
     c90:	2b08      	cmp	r3, #8
     c92:	d118      	bne.n	cc6 <UARTStdioIntHandler+0xce>
                {
                    //
                    // If there are any characters already in the buffer, then
                    // delete the last.
                    //
                    if(!RX_BUFFER_EMPTY)
     c94:	493f      	ldr	r1, [pc, #252]	; (d94 <UARTStdioIntHandler+0x19c>)
     c96:	4840      	ldr	r0, [pc, #256]	; (d98 <UARTStdioIntHandler+0x1a0>)
     c98:	f7ff fde9 	bl	86e <IsBufferEmpty>
     c9c:	4603      	mov	r3, r0
     c9e:	2b00      	cmp	r3, #0
     ca0:	d14f      	bne.n	d42 <UARTStdioIntHandler+0x14a>
                    {
                        //
                        // Rub out the previous character on the users terminal.
                        //
                        UARTwrite("\b \b", 3);
     ca2:	2103      	movs	r1, #3
     ca4:	483d      	ldr	r0, [pc, #244]	; (d9c <UARTStdioIntHandler+0x1a4>)
     ca6:	f7ff fee9 	bl	a7c <UARTwrite>

                        //
                        // Decrement the number of characters in the buffer.
                        //
                        if(g_ulUARTRxWriteIndex == 0)
     caa:	4b3a      	ldr	r3, [pc, #232]	; (d94 <UARTStdioIntHandler+0x19c>)
     cac:	681b      	ldr	r3, [r3, #0]
     cae:	2b00      	cmp	r3, #0
     cb0:	d103      	bne.n	cba <UARTStdioIntHandler+0xc2>
                        {
                            g_ulUARTRxWriteIndex = UART_RX_BUFFER_SIZE - 1;
     cb2:	4b38      	ldr	r3, [pc, #224]	; (d94 <UARTStdioIntHandler+0x19c>)
     cb4:	227f      	movs	r2, #127	; 0x7f
     cb6:	601a      	str	r2, [r3, #0]
     cb8:	e043      	b.n	d42 <UARTStdioIntHandler+0x14a>
                        }
                        else
                        {
                            g_ulUARTRxWriteIndex--;
     cba:	4b36      	ldr	r3, [pc, #216]	; (d94 <UARTStdioIntHandler+0x19c>)
     cbc:	681b      	ldr	r3, [r3, #0]
     cbe:	3b01      	subs	r3, #1
     cc0:	4a34      	ldr	r2, [pc, #208]	; (d94 <UARTStdioIntHandler+0x19c>)
     cc2:	6013      	str	r3, [r2, #0]
                    }

                    //
                    // Skip ahead to read the next character.
                    //
                    continue;
     cc4:	e03d      	b.n	d42 <UARTStdioIntHandler+0x14a>
                // If this character is LF and last was CR, then just gobble up
                // the character since we already echoed the previous CR and we
                // don't want to store 2 characters in the buffer if we don't
                // need to.
                //
                if((cChar == '\n') && bLastWasCR)
     cc6:	79fb      	ldrb	r3, [r7, #7]
     cc8:	2b0a      	cmp	r3, #10
     cca:	d107      	bne.n	cdc <UARTStdioIntHandler+0xe4>
     ccc:	4b34      	ldr	r3, [pc, #208]	; (da0 <UARTStdioIntHandler+0x1a8>)
     cce:	781b      	ldrb	r3, [r3, #0]
     cd0:	2b00      	cmp	r3, #0
     cd2:	d003      	beq.n	cdc <UARTStdioIntHandler+0xe4>
                {
                    bLastWasCR = false;
     cd4:	4b32      	ldr	r3, [pc, #200]	; (da0 <UARTStdioIntHandler+0x1a8>)
     cd6:	2200      	movs	r2, #0
     cd8:	701a      	strb	r2, [r3, #0]
                    continue;
     cda:	e032      	b.n	d42 <UARTStdioIntHandler+0x14a>
                }

                //
                // See if a newline or escape character was received.
                //
                if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b))
     cdc:	79fb      	ldrb	r3, [r7, #7]
     cde:	2b0d      	cmp	r3, #13
     ce0:	d005      	beq.n	cee <UARTStdioIntHandler+0xf6>
     ce2:	79fb      	ldrb	r3, [r7, #7]
     ce4:	2b0a      	cmp	r3, #10
     ce6:	d002      	beq.n	cee <UARTStdioIntHandler+0xf6>
     ce8:	79fb      	ldrb	r3, [r7, #7]
     cea:	2b1b      	cmp	r3, #27
     cec:	d10b      	bne.n	d06 <UARTStdioIntHandler+0x10e>
                    //
                    // If the character is a CR, then it may be followed by an
                    // LF which should be paired with the CR.  So remember that
                    // a CR was received.
                    //
                    if(cChar == '\r')
     cee:	79fb      	ldrb	r3, [r7, #7]
     cf0:	2b0d      	cmp	r3, #13
     cf2:	d102      	bne.n	cfa <UARTStdioIntHandler+0x102>
                    {
                        bLastWasCR = 1;
     cf4:	4b2a      	ldr	r3, [pc, #168]	; (da0 <UARTStdioIntHandler+0x1a8>)
     cf6:	2201      	movs	r2, #1
     cf8:	701a      	strb	r2, [r3, #0]
                    // put a CR in the receive buffer as a marker telling
                    // UARTgets() where the line ends.  We also send an
                    // additional LF to ensure that the local terminal echo
                    // receives both CR and LF.
                    //
                    cChar = '\r';
     cfa:	230d      	movs	r3, #13
     cfc:	71fb      	strb	r3, [r7, #7]
                    UARTwrite("\n", 1);
     cfe:	2101      	movs	r1, #1
     d00:	4828      	ldr	r0, [pc, #160]	; (da4 <UARTStdioIntHandler+0x1ac>)
     d02:	f7ff febb 	bl	a7c <UARTwrite>

            //
            // If there is space in the receive buffer, put the character
            // there, otherwise throw it away.
            //
            if(!RX_BUFFER_FULL)
     d06:	2280      	movs	r2, #128	; 0x80
     d08:	4922      	ldr	r1, [pc, #136]	; (d94 <UARTStdioIntHandler+0x19c>)
     d0a:	4823      	ldr	r0, [pc, #140]	; (d98 <UARTStdioIntHandler+0x1a0>)
     d0c:	f7ff fd8e 	bl	82c <IsBufferFull>
     d10:	4603      	mov	r3, r0
     d12:	2b00      	cmp	r3, #0
     d14:	d115      	bne.n	d42 <UARTStdioIntHandler+0x14a>
            {
                //
                // Store the new character in the receive buffer
                //
                g_pcUARTRxBuffer[g_ulUARTRxWriteIndex] =
     d16:	4b1f      	ldr	r3, [pc, #124]	; (d94 <UARTStdioIntHandler+0x19c>)
     d18:	681b      	ldr	r3, [r3, #0]
                    (unsigned char)(lChar & 0xFF);
     d1a:	68ba      	ldr	r2, [r7, #8]
     d1c:	b2d1      	uxtb	r1, r2
                g_pcUARTRxBuffer[g_ulUARTRxWriteIndex] =
     d1e:	4a22      	ldr	r2, [pc, #136]	; (da8 <UARTStdioIntHandler+0x1b0>)
     d20:	54d1      	strb	r1, [r2, r3]
                ADVANCE_RX_BUFFER_INDEX(g_ulUARTRxWriteIndex);
     d22:	4b1c      	ldr	r3, [pc, #112]	; (d94 <UARTStdioIntHandler+0x19c>)
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	3301      	adds	r3, #1
     d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     d2c:	4a19      	ldr	r2, [pc, #100]	; (d94 <UARTStdioIntHandler+0x19c>)
     d2e:	6013      	str	r3, [r2, #0]

                //
                // If echo is enabled, write the character to the transmit
                // buffer so that the user gets some immediate feedback.
                //
                if(!g_bDisableEcho)
     d30:	4b17      	ldr	r3, [pc, #92]	; (d90 <UARTStdioIntHandler+0x198>)
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	2b00      	cmp	r3, #0
     d36:	d104      	bne.n	d42 <UARTStdioIntHandler+0x14a>
                {
                    UARTwrite(&cChar, 1);
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	2101      	movs	r1, #1
     d3c:	4618      	mov	r0, r3
     d3e:	f7ff fe9d 	bl	a7c <UARTwrite>
        while(MAP_UARTCharsAvail(g_ulBase))
     d42:	4b0f      	ldr	r3, [pc, #60]	; (d80 <UARTStdioIntHandler+0x188>)
     d44:	681b      	ldr	r3, [r3, #0]
     d46:	332c      	adds	r3, #44	; 0x2c
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	461a      	mov	r2, r3
     d4c:	4b0d      	ldr	r3, [pc, #52]	; (d84 <UARTStdioIntHandler+0x18c>)
     d4e:	681b      	ldr	r3, [r3, #0]
     d50:	4618      	mov	r0, r3
     d52:	4790      	blx	r2
     d54:	4603      	mov	r3, r0
     d56:	2b00      	cmp	r3, #0
     d58:	d188      	bne.n	c6c <UARTStdioIntHandler+0x74>

        //
        // If we wrote anything to the transmit buffer, make sure it actually
        // gets transmitted.
        //
        UARTPrimeTransmit(g_ulBase);
     d5a:	4b0a      	ldr	r3, [pc, #40]	; (d84 <UARTStdioIntHandler+0x18c>)
     d5c:	681b      	ldr	r3, [r3, #0]
     d5e:	4618      	mov	r0, r3
     d60:	f7ff fd9e 	bl	8a0 <UARTPrimeTransmit>
        MAP_UARTIntEnable(g_ulBase, UART_INT_TX);
     d64:	4b06      	ldr	r3, [pc, #24]	; (d80 <UARTStdioIntHandler+0x188>)
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	3344      	adds	r3, #68	; 0x44
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	461a      	mov	r2, r3
     d6e:	4b05      	ldr	r3, [pc, #20]	; (d84 <UARTStdioIntHandler+0x18c>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	2120      	movs	r1, #32
     d74:	4618      	mov	r0, r3
     d76:	4790      	blx	r2
    }
}
     d78:	bf00      	nop
     d7a:	3710      	adds	r7, #16
     d7c:	46bd      	mov	sp, r7
     d7e:	bd80      	pop	{r7, pc}
     d80:	01000014 	.word	0x01000014
     d84:	200012c4 	.word	0x200012c4
     d88:	20001234 	.word	0x20001234
     d8c:	20001238 	.word	0x20001238
     d90:	20000e31 	.word	0x20000e31
     d94:	200012bc 	.word	0x200012bc
     d98:	200012c0 	.word	0x200012c0
     d9c:	0000677c 	.word	0x0000677c
     da0:	200012cc 	.word	0x200012cc
     da4:	00006780 	.word	0x00006780
     da8:	2000123c 	.word	0x2000123c

00000dac <iprintf>:
     dac:	b40f      	push	{r0, r1, r2, r3}
     dae:	b500      	push	{lr}
     db0:	4907      	ldr	r1, [pc, #28]	; (dd0 <iprintf+0x24>)
     db2:	b083      	sub	sp, #12
     db4:	ab04      	add	r3, sp, #16
     db6:	6808      	ldr	r0, [r1, #0]
     db8:	f853 2b04 	ldr.w	r2, [r3], #4
     dbc:	6881      	ldr	r1, [r0, #8]
     dbe:	9301      	str	r3, [sp, #4]
     dc0:	f000 f844 	bl	e4c <_vfiprintf_r>
     dc4:	b003      	add	sp, #12
     dc6:	f85d eb04 	ldr.w	lr, [sp], #4
     dca:	b004      	add	sp, #16
     dcc:	4770      	bx	lr
     dce:	bf00      	nop
     dd0:	20000000 	.word	0x20000000

00000dd4 <__sprint_r.part.0>:
     dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dd8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
     dda:	049c      	lsls	r4, r3, #18
     ddc:	4692      	mov	sl, r2
     dde:	d52d      	bpl.n	e3c <__sprint_r.part.0+0x68>
     de0:	6893      	ldr	r3, [r2, #8]
     de2:	6812      	ldr	r2, [r2, #0]
     de4:	b343      	cbz	r3, e38 <__sprint_r.part.0+0x64>
     de6:	460e      	mov	r6, r1
     de8:	4607      	mov	r7, r0
     dea:	f102 0908 	add.w	r9, r2, #8
     dee:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
     df2:	ea5f 089b 	movs.w	r8, fp, lsr #2
     df6:	d015      	beq.n	e24 <__sprint_r.part.0+0x50>
     df8:	3d04      	subs	r5, #4
     dfa:	2400      	movs	r4, #0
     dfc:	e001      	b.n	e02 <__sprint_r.part.0+0x2e>
     dfe:	45a0      	cmp	r8, r4
     e00:	d00e      	beq.n	e20 <__sprint_r.part.0+0x4c>
     e02:	4632      	mov	r2, r6
     e04:	f855 1f04 	ldr.w	r1, [r5, #4]!
     e08:	4638      	mov	r0, r7
     e0a:	f001 f867 	bl	1edc <_fputwc_r>
     e0e:	1c43      	adds	r3, r0, #1
     e10:	f104 0401 	add.w	r4, r4, #1
     e14:	d1f3      	bne.n	dfe <__sprint_r.part.0+0x2a>
     e16:	2300      	movs	r3, #0
     e18:	e9ca 3301 	strd	r3, r3, [sl, #4]
     e1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e20:	f8da 3008 	ldr.w	r3, [sl, #8]
     e24:	f02b 0b03 	bic.w	fp, fp, #3
     e28:	eba3 030b 	sub.w	r3, r3, fp
     e2c:	f8ca 3008 	str.w	r3, [sl, #8]
     e30:	f109 0908 	add.w	r9, r9, #8
     e34:	2b00      	cmp	r3, #0
     e36:	d1da      	bne.n	dee <__sprint_r.part.0+0x1a>
     e38:	2000      	movs	r0, #0
     e3a:	e7ec      	b.n	e16 <__sprint_r.part.0+0x42>
     e3c:	f001 f9c4 	bl	21c8 <__sfvwrite_r>
     e40:	2300      	movs	r3, #0
     e42:	e9ca 3301 	strd	r3, r3, [sl, #4]
     e46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e4a:	bf00      	nop

00000e4c <_vfiprintf_r>:
     e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e50:	b0ad      	sub	sp, #180	; 0xb4
     e52:	461c      	mov	r4, r3
     e54:	9102      	str	r1, [sp, #8]
     e56:	4691      	mov	r9, r2
     e58:	e9cd 0307 	strd	r0, r3, [sp, #28]
     e5c:	b118      	cbz	r0, e66 <_vfiprintf_r+0x1a>
     e5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
     e60:	2b00      	cmp	r3, #0
     e62:	f000 83a3 	beq.w	15ac <_vfiprintf_r+0x760>
     e66:	9b02      	ldr	r3, [sp, #8]
     e68:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
     e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     e6e:	07d8      	lsls	r0, r3, #31
     e70:	b28a      	uxth	r2, r1
     e72:	d402      	bmi.n	e7a <_vfiprintf_r+0x2e>
     e74:	0593      	lsls	r3, r2, #22
     e76:	f140 8521 	bpl.w	18bc <_vfiprintf_r+0xa70>
     e7a:	0497      	lsls	r7, r2, #18
     e7c:	d408      	bmi.n	e90 <_vfiprintf_r+0x44>
     e7e:	9802      	ldr	r0, [sp, #8]
     e80:	6e43      	ldr	r3, [r0, #100]	; 0x64
     e82:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
     e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     e8a:	8182      	strh	r2, [r0, #12]
     e8c:	6643      	str	r3, [r0, #100]	; 0x64
     e8e:	b292      	uxth	r2, r2
     e90:	0716      	lsls	r6, r2, #28
     e92:	f140 8100 	bpl.w	1096 <_vfiprintf_r+0x24a>
     e96:	9b02      	ldr	r3, [sp, #8]
     e98:	691b      	ldr	r3, [r3, #16]
     e9a:	2b00      	cmp	r3, #0
     e9c:	f000 80fb 	beq.w	1096 <_vfiprintf_r+0x24a>
     ea0:	f002 031a 	and.w	r3, r2, #26
     ea4:	2b0a      	cmp	r3, #10
     ea6:	f000 8368 	beq.w	157a <_vfiprintf_r+0x72e>
     eaa:	2300      	movs	r3, #0
     eac:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
     eb0:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
     eb4:	930a      	str	r3, [sp, #40]	; 0x28
     eb6:	9304      	str	r3, [sp, #16]
     eb8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
     ebc:	46d3      	mov	fp, sl
     ebe:	f899 3000 	ldrb.w	r3, [r9]
     ec2:	2b00      	cmp	r3, #0
     ec4:	f000 841e 	beq.w	1704 <_vfiprintf_r+0x8b8>
     ec8:	2b25      	cmp	r3, #37	; 0x25
     eca:	464c      	mov	r4, r9
     ecc:	d102      	bne.n	ed4 <_vfiprintf_r+0x88>
     ece:	e01e      	b.n	f0e <_vfiprintf_r+0xc2>
     ed0:	2b25      	cmp	r3, #37	; 0x25
     ed2:	d003      	beq.n	edc <_vfiprintf_r+0x90>
     ed4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
     ed8:	2b00      	cmp	r3, #0
     eda:	d1f9      	bne.n	ed0 <_vfiprintf_r+0x84>
     edc:	eba4 0509 	sub.w	r5, r4, r9
     ee0:	b18d      	cbz	r5, f06 <_vfiprintf_r+0xba>
     ee2:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
     ee6:	3301      	adds	r3, #1
     ee8:	442a      	add	r2, r5
     eea:	2b07      	cmp	r3, #7
     eec:	f8cb 9000 	str.w	r9, [fp]
     ef0:	f8cb 5004 	str.w	r5, [fp, #4]
     ef4:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
     ef8:	f300 80e4 	bgt.w	10c4 <_vfiprintf_r+0x278>
     efc:	f10b 0b08 	add.w	fp, fp, #8
     f00:	9b04      	ldr	r3, [sp, #16]
     f02:	442b      	add	r3, r5
     f04:	9304      	str	r3, [sp, #16]
     f06:	7823      	ldrb	r3, [r4, #0]
     f08:	2b00      	cmp	r3, #0
     f0a:	f000 83fb 	beq.w	1704 <_vfiprintf_r+0x8b8>
     f0e:	2100      	movs	r1, #0
     f10:	f04f 0300 	mov.w	r3, #0
     f14:	7862      	ldrb	r2, [r4, #1]
     f16:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
     f1a:	4608      	mov	r0, r1
     f1c:	9106      	str	r1, [sp, #24]
     f1e:	460f      	mov	r7, r1
     f20:	f104 0901 	add.w	r9, r4, #1
     f24:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     f28:	f109 0901 	add.w	r9, r9, #1
     f2c:	f1a2 0320 	sub.w	r3, r2, #32
     f30:	2b58      	cmp	r3, #88	; 0x58
     f32:	f200 8340 	bhi.w	15b6 <_vfiprintf_r+0x76a>
     f36:	e8df f013 	tbh	[pc, r3, lsl #1]
     f3a:	02da      	.short	0x02da
     f3c:	033e033e 	.word	0x033e033e
     f40:	033e02d5 	.word	0x033e02d5
     f44:	033e033e 	.word	0x033e033e
     f48:	033e033e 	.word	0x033e033e
     f4c:	02c9033e 	.word	0x02c9033e
     f50:	033e02e7 	.word	0x033e02e7
     f54:	02ec02e2 	.word	0x02ec02e2
     f58:	00da033e 	.word	0x00da033e
     f5c:	00cb00cb 	.word	0x00cb00cb
     f60:	00cb00cb 	.word	0x00cb00cb
     f64:	00cb00cb 	.word	0x00cb00cb
     f68:	00cb00cb 	.word	0x00cb00cb
     f6c:	033e00cb 	.word	0x033e00cb
     f70:	033e033e 	.word	0x033e033e
     f74:	033e033e 	.word	0x033e033e
     f78:	033e033e 	.word	0x033e033e
     f7c:	033e033e 	.word	0x033e033e
     f80:	02b4033e 	.word	0x02b4033e
     f84:	033e033e 	.word	0x033e033e
     f88:	033e033e 	.word	0x033e033e
     f8c:	033e033e 	.word	0x033e033e
     f90:	033e033e 	.word	0x033e033e
     f94:	033e033e 	.word	0x033e033e
     f98:	033e009d 	.word	0x033e009d
     f9c:	033e033e 	.word	0x033e033e
     fa0:	033e033e 	.word	0x033e033e
     fa4:	033e0059 	.word	0x033e0059
     fa8:	029f033e 	.word	0x029f033e
     fac:	033e033e 	.word	0x033e033e
     fb0:	033e033e 	.word	0x033e033e
     fb4:	033e033e 	.word	0x033e033e
     fb8:	033e033e 	.word	0x033e033e
     fbc:	033e033e 	.word	0x033e033e
     fc0:	017b0198 	.word	0x017b0198
     fc4:	033e033e 	.word	0x033e033e
     fc8:	0176033e 	.word	0x0176033e
     fcc:	033e017b 	.word	0x033e017b
     fd0:	0169033e 	.word	0x0169033e
     fd4:	0155033e 	.word	0x0155033e
     fd8:	0125009f 	.word	0x0125009f
     fdc:	033e0120 	.word	0x033e0120
     fe0:	033e0100 	.word	0x033e0100
     fe4:	033e005b 	.word	0x033e005b
     fe8:	00df033e 	.word	0x00df033e
     fec:	f047 0710 	orr.w	r7, r7, #16
     ff0:	06bb      	lsls	r3, r7, #26
     ff2:	f140 82a8 	bpl.w	1546 <_vfiprintf_r+0x6fa>
     ff6:	9c08      	ldr	r4, [sp, #32]
     ff8:	3407      	adds	r4, #7
     ffa:	f024 0307 	bic.w	r3, r4, #7
     ffe:	f103 0208 	add.w	r2, r3, #8
    1002:	9208      	str	r2, [sp, #32]
    1004:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    1008:	f04f 0200 	mov.w	r2, #0
    100c:	e9d3 4500 	ldrd	r4, r5, [r3]
    1010:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    1014:	f04f 0301 	mov.w	r3, #1
    1018:	f040 80ca 	bne.w	11b0 <_vfiprintf_r+0x364>
    101c:	2200      	movs	r2, #0
    101e:	9703      	str	r7, [sp, #12]
    1020:	9209      	str	r2, [sp, #36]	; 0x24
    1022:	2b01      	cmp	r3, #1
    1024:	f000 83f9 	beq.w	181a <_vfiprintf_r+0x9ce>
    1028:	2b02      	cmp	r3, #2
    102a:	f000 8385 	beq.w	1738 <_vfiprintf_r+0x8ec>
    102e:	4651      	mov	r1, sl
    1030:	e000      	b.n	1034 <_vfiprintf_r+0x1e8>
    1032:	4631      	mov	r1, r6
    1034:	08e2      	lsrs	r2, r4, #3
    1036:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    103a:	08e8      	lsrs	r0, r5, #3
    103c:	f004 0307 	and.w	r3, r4, #7
    1040:	4605      	mov	r5, r0
    1042:	4614      	mov	r4, r2
    1044:	3330      	adds	r3, #48	; 0x30
    1046:	ea54 0205 	orrs.w	r2, r4, r5
    104a:	f801 3c01 	strb.w	r3, [r1, #-1]
    104e:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
    1052:	d1ee      	bne.n	1032 <_vfiprintf_r+0x1e6>
    1054:	9a03      	ldr	r2, [sp, #12]
    1056:	07d7      	lsls	r7, r2, #31
    1058:	f140 837e 	bpl.w	1758 <_vfiprintf_r+0x90c>
    105c:	2b30      	cmp	r3, #48	; 0x30
    105e:	f000 837b 	beq.w	1758 <_vfiprintf_r+0x90c>
    1062:	3902      	subs	r1, #2
    1064:	2330      	movs	r3, #48	; 0x30
    1066:	f806 3c01 	strb.w	r3, [r6, #-1]
    106a:	ebaa 0301 	sub.w	r3, sl, r1
    106e:	9305      	str	r3, [sp, #20]
    1070:	460e      	mov	r6, r1
    1072:	e374      	b.n	175e <_vfiprintf_r+0x912>
    1074:	f047 0710 	orr.w	r7, r7, #16
    1078:	f017 0320 	ands.w	r3, r7, #32
    107c:	f000 826d 	beq.w	155a <_vfiprintf_r+0x70e>
    1080:	9c08      	ldr	r4, [sp, #32]
    1082:	3407      	adds	r4, #7
    1084:	f024 0307 	bic.w	r3, r4, #7
    1088:	f103 0208 	add.w	r2, r3, #8
    108c:	e9d3 4500 	ldrd	r4, r5, [r3]
    1090:	9208      	str	r2, [sp, #32]
    1092:	2300      	movs	r3, #0
    1094:	e084      	b.n	11a0 <_vfiprintf_r+0x354>
    1096:	9d02      	ldr	r5, [sp, #8]
    1098:	9807      	ldr	r0, [sp, #28]
    109a:	4629      	mov	r1, r5
    109c:	f000 fd2a 	bl	1af4 <__swsetup_r>
    10a0:	2800      	cmp	r0, #0
    10a2:	f000 8264 	beq.w	156e <_vfiprintf_r+0x722>
    10a6:	9a02      	ldr	r2, [sp, #8]
    10a8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    10aa:	07dd      	lsls	r5, r3, #31
    10ac:	d403      	bmi.n	10b6 <_vfiprintf_r+0x26a>
    10ae:	8993      	ldrh	r3, [r2, #12]
    10b0:	059c      	lsls	r4, r3, #22
    10b2:	f140 843e 	bpl.w	1932 <_vfiprintf_r+0xae6>
    10b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10ba:	9304      	str	r3, [sp, #16]
    10bc:	9804      	ldr	r0, [sp, #16]
    10be:	b02d      	add	sp, #180	; 0xb4
    10c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10c4:	2a00      	cmp	r2, #0
    10c6:	f040 83b8 	bne.w	183a <_vfiprintf_r+0x9ee>
    10ca:	9210      	str	r2, [sp, #64]	; 0x40
    10cc:	46d3      	mov	fp, sl
    10ce:	e717      	b.n	f00 <_vfiprintf_r+0xb4>
    10d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    10d4:	2400      	movs	r4, #0
    10d6:	f819 2b01 	ldrb.w	r2, [r9], #1
    10da:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    10de:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    10e2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    10e6:	2b09      	cmp	r3, #9
    10e8:	d9f5      	bls.n	10d6 <_vfiprintf_r+0x28a>
    10ea:	9406      	str	r4, [sp, #24]
    10ec:	e71e      	b.n	f2c <_vfiprintf_r+0xe0>
    10ee:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    10f2:	f899 2000 	ldrb.w	r2, [r9]
    10f6:	e717      	b.n	f28 <_vfiprintf_r+0xdc>
    10f8:	2900      	cmp	r1, #0
    10fa:	f040 84ae 	bne.w	1a5a <_vfiprintf_r+0xc0e>
    10fe:	4bc5      	ldr	r3, [pc, #788]	; (1414 <_vfiprintf_r+0x5c8>)
    1100:	930a      	str	r3, [sp, #40]	; 0x28
    1102:	06bc      	lsls	r4, r7, #26
    1104:	f140 81c0 	bpl.w	1488 <_vfiprintf_r+0x63c>
    1108:	9c08      	ldr	r4, [sp, #32]
    110a:	3407      	adds	r4, #7
    110c:	f024 0307 	bic.w	r3, r4, #7
    1110:	e9d3 4500 	ldrd	r4, r5, [r3]
    1114:	f103 0108 	add.w	r1, r3, #8
    1118:	9108      	str	r1, [sp, #32]
    111a:	07fb      	lsls	r3, r7, #31
    111c:	f140 8249 	bpl.w	15b2 <_vfiprintf_r+0x766>
    1120:	ea54 0305 	orrs.w	r3, r4, r5
    1124:	f000 8245 	beq.w	15b2 <_vfiprintf_r+0x766>
    1128:	2330      	movs	r3, #48	; 0x30
    112a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    112e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    1132:	f047 0702 	orr.w	r7, r7, #2
    1136:	2302      	movs	r3, #2
    1138:	e032      	b.n	11a0 <_vfiprintf_r+0x354>
    113a:	9b08      	ldr	r3, [sp, #32]
    113c:	681e      	ldr	r6, [r3, #0]
    113e:	f04f 0200 	mov.w	r2, #0
    1142:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    1146:	1d1c      	adds	r4, r3, #4
    1148:	2e00      	cmp	r6, #0
    114a:	f000 83f9 	beq.w	1940 <_vfiprintf_r+0xaf4>
    114e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    1152:	f000 843d 	beq.w	19d0 <_vfiprintf_r+0xb84>
    1156:	4642      	mov	r2, r8
    1158:	2100      	movs	r1, #0
    115a:	4630      	mov	r0, r6
    115c:	f001 fd20 	bl	2ba0 <memchr>
    1160:	2800      	cmp	r0, #0
    1162:	f000 844d 	beq.w	1a00 <_vfiprintf_r+0xbb4>
    1166:	1b83      	subs	r3, r0, r6
    1168:	9305      	str	r3, [sp, #20]
    116a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    116e:	9408      	str	r4, [sp, #32]
    1170:	9703      	str	r7, [sp, #12]
    1172:	9309      	str	r3, [sp, #36]	; 0x24
    1174:	f04f 0800 	mov.w	r8, #0
    1178:	e2f1      	b.n	175e <_vfiprintf_r+0x912>
    117a:	f047 0720 	orr.w	r7, r7, #32
    117e:	f899 2000 	ldrb.w	r2, [r9]
    1182:	e6d1      	b.n	f28 <_vfiprintf_r+0xdc>
    1184:	9a08      	ldr	r2, [sp, #32]
    1186:	4ba3      	ldr	r3, [pc, #652]	; (1414 <_vfiprintf_r+0x5c8>)
    1188:	6814      	ldr	r4, [r2, #0]
    118a:	930a      	str	r3, [sp, #40]	; 0x28
    118c:	3204      	adds	r2, #4
    118e:	f647 0330 	movw	r3, #30768	; 0x7830
    1192:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    1196:	f047 0702 	orr.w	r7, r7, #2
    119a:	9208      	str	r2, [sp, #32]
    119c:	2500      	movs	r5, #0
    119e:	2302      	movs	r3, #2
    11a0:	f04f 0200 	mov.w	r2, #0
    11a4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    11a8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    11ac:	f43f af36 	beq.w	101c <_vfiprintf_r+0x1d0>
    11b0:	2200      	movs	r2, #0
    11b2:	9209      	str	r2, [sp, #36]	; 0x24
    11b4:	f027 0280 	bic.w	r2, r7, #128	; 0x80
    11b8:	9203      	str	r2, [sp, #12]
    11ba:	ea54 0205 	orrs.w	r2, r4, r5
    11be:	f47f af30 	bne.w	1022 <_vfiprintf_r+0x1d6>
    11c2:	f1b8 0f00 	cmp.w	r8, #0
    11c6:	f040 83d7 	bne.w	1978 <_vfiprintf_r+0xb2c>
    11ca:	2b00      	cmp	r3, #0
    11cc:	f040 8331 	bne.w	1832 <_vfiprintf_r+0x9e6>
    11d0:	f017 0301 	ands.w	r3, r7, #1
    11d4:	9305      	str	r3, [sp, #20]
    11d6:	f000 837a 	beq.w	18ce <_vfiprintf_r+0xa82>
    11da:	ae2c      	add	r6, sp, #176	; 0xb0
    11dc:	2330      	movs	r3, #48	; 0x30
    11de:	f806 3d41 	strb.w	r3, [r6, #-65]!
    11e2:	e2bc      	b.n	175e <_vfiprintf_r+0x912>
    11e4:	2900      	cmp	r1, #0
    11e6:	f040 843c 	bne.w	1a62 <_vfiprintf_r+0xc16>
    11ea:	9a08      	ldr	r2, [sp, #32]
    11ec:	06b8      	lsls	r0, r7, #26
    11ee:	f852 3b04 	ldr.w	r3, [r2], #4
    11f2:	9208      	str	r2, [sp, #32]
    11f4:	f100 837a 	bmi.w	18ec <_vfiprintf_r+0xaa0>
    11f8:	06f9      	lsls	r1, r7, #27
    11fa:	f100 83b9 	bmi.w	1970 <_vfiprintf_r+0xb24>
    11fe:	067a      	lsls	r2, r7, #25
    1200:	f140 83b6 	bpl.w	1970 <_vfiprintf_r+0xb24>
    1204:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    1208:	801a      	strh	r2, [r3, #0]
    120a:	e658      	b.n	ebe <_vfiprintf_r+0x72>
    120c:	f899 2000 	ldrb.w	r2, [r9]
    1210:	2a6c      	cmp	r2, #108	; 0x6c
    1212:	bf03      	ittte	eq
    1214:	f899 2001 	ldrbeq.w	r2, [r9, #1]
    1218:	f047 0720 	orreq.w	r7, r7, #32
    121c:	f109 0901 	addeq.w	r9, r9, #1
    1220:	f047 0710 	orrne.w	r7, r7, #16
    1224:	e680      	b.n	f28 <_vfiprintf_r+0xdc>
    1226:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    122a:	f899 2000 	ldrb.w	r2, [r9]
    122e:	e67b      	b.n	f28 <_vfiprintf_r+0xdc>
    1230:	2900      	cmp	r1, #0
    1232:	f040 840e 	bne.w	1a52 <_vfiprintf_r+0xc06>
    1236:	06bb      	lsls	r3, r7, #26
    1238:	f140 813b 	bpl.w	14b2 <_vfiprintf_r+0x666>
    123c:	9c08      	ldr	r4, [sp, #32]
    123e:	3407      	adds	r4, #7
    1240:	f024 0307 	bic.w	r3, r4, #7
    1244:	e9d3 4500 	ldrd	r4, r5, [r3]
    1248:	f103 0208 	add.w	r2, r3, #8
    124c:	9208      	str	r2, [sp, #32]
    124e:	2c00      	cmp	r4, #0
    1250:	f175 0300 	sbcs.w	r3, r5, #0
    1254:	f2c0 8304 	blt.w	1860 <_vfiprintf_r+0xa14>
    1258:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    125c:	9309      	str	r3, [sp, #36]	; 0x24
    125e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    1262:	f000 82d9 	beq.w	1818 <_vfiprintf_r+0x9cc>
    1266:	2301      	movs	r3, #1
    1268:	e7a4      	b.n	11b4 <_vfiprintf_r+0x368>
    126a:	9b08      	ldr	r3, [sp, #32]
    126c:	f04f 0100 	mov.w	r1, #0
    1270:	681a      	ldr	r2, [r3, #0]
    1272:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
    1276:	3304      	adds	r3, #4
    1278:	2101      	movs	r1, #1
    127a:	9101      	str	r1, [sp, #4]
    127c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    1280:	9308      	str	r3, [sp, #32]
    1282:	9105      	str	r1, [sp, #20]
    1284:	ae12      	add	r6, sp, #72	; 0x48
    1286:	9703      	str	r7, [sp, #12]
    1288:	f04f 0800 	mov.w	r8, #0
    128c:	9b03      	ldr	r3, [sp, #12]
    128e:	f013 0302 	ands.w	r3, r3, #2
    1292:	d002      	beq.n	129a <_vfiprintf_r+0x44e>
    1294:	9a01      	ldr	r2, [sp, #4]
    1296:	3202      	adds	r2, #2
    1298:	9201      	str	r2, [sp, #4]
    129a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    129e:	9c03      	ldr	r4, [sp, #12]
    12a0:	1c48      	adds	r0, r1, #1
    12a2:	f014 0484 	ands.w	r4, r4, #132	; 0x84
    12a6:	4684      	mov	ip, r0
    12a8:	9409      	str	r4, [sp, #36]	; 0x24
    12aa:	d138      	bne.n	131e <_vfiprintf_r+0x4d2>
    12ac:	9c06      	ldr	r4, [sp, #24]
    12ae:	9d01      	ldr	r5, [sp, #4]
    12b0:	1b64      	subs	r4, r4, r5
    12b2:	2c00      	cmp	r4, #0
    12b4:	dd33      	ble.n	131e <_vfiprintf_r+0x4d2>
    12b6:	2c10      	cmp	r4, #16
    12b8:	4d57      	ldr	r5, [pc, #348]	; (1418 <_vfiprintf_r+0x5cc>)
    12ba:	f340 8395 	ble.w	19e8 <_vfiprintf_r+0xb9c>
    12be:	46dc      	mov	ip, fp
    12c0:	2710      	movs	r7, #16
    12c2:	469b      	mov	fp, r3
    12c4:	4663      	mov	r3, ip
    12c6:	e007      	b.n	12d8 <_vfiprintf_r+0x48c>
    12c8:	f101 0e02 	add.w	lr, r1, #2
    12cc:	3308      	adds	r3, #8
    12ce:	4601      	mov	r1, r0
    12d0:	3c10      	subs	r4, #16
    12d2:	2c10      	cmp	r4, #16
    12d4:	dd11      	ble.n	12fa <_vfiprintf_r+0x4ae>
    12d6:	1c48      	adds	r0, r1, #1
    12d8:	3210      	adds	r2, #16
    12da:	2807      	cmp	r0, #7
    12dc:	9211      	str	r2, [sp, #68]	; 0x44
    12de:	e9c3 5700 	strd	r5, r7, [r3]
    12e2:	9010      	str	r0, [sp, #64]	; 0x40
    12e4:	ddf0      	ble.n	12c8 <_vfiprintf_r+0x47c>
    12e6:	2a00      	cmp	r2, #0
    12e8:	f040 8245 	bne.w	1776 <_vfiprintf_r+0x92a>
    12ec:	3c10      	subs	r4, #16
    12ee:	2c10      	cmp	r4, #16
    12f0:	4611      	mov	r1, r2
    12f2:	f04f 0e01 	mov.w	lr, #1
    12f6:	4653      	mov	r3, sl
    12f8:	dced      	bgt.n	12d6 <_vfiprintf_r+0x48a>
    12fa:	4619      	mov	r1, r3
    12fc:	465b      	mov	r3, fp
    12fe:	468b      	mov	fp, r1
    1300:	4422      	add	r2, r4
    1302:	f1be 0f07 	cmp.w	lr, #7
    1306:	9211      	str	r2, [sp, #68]	; 0x44
    1308:	e9cb 5400 	strd	r5, r4, [fp]
    130c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    1310:	f300 8256 	bgt.w	17c0 <_vfiprintf_r+0x974>
    1314:	f10b 0b08 	add.w	fp, fp, #8
    1318:	f10e 0c01 	add.w	ip, lr, #1
    131c:	4671      	mov	r1, lr
    131e:	f89d 4037 	ldrb.w	r4, [sp, #55]	; 0x37
    1322:	f10b 0008 	add.w	r0, fp, #8
    1326:	2c00      	cmp	r4, #0
    1328:	f000 8174 	beq.w	1614 <_vfiprintf_r+0x7c8>
    132c:	3201      	adds	r2, #1
    132e:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    1332:	2101      	movs	r1, #1
    1334:	f1bc 0f07 	cmp.w	ip, #7
    1338:	e9cd c210 	strd	ip, r2, [sp, #64]	; 0x40
    133c:	e9cb 4100 	strd	r4, r1, [fp]
    1340:	f340 824e 	ble.w	17e0 <_vfiprintf_r+0x994>
    1344:	2a00      	cmp	r2, #0
    1346:	f040 8155 	bne.w	15f4 <_vfiprintf_r+0x7a8>
    134a:	2b00      	cmp	r3, #0
    134c:	f040 824e 	bne.w	17ec <_vfiprintf_r+0x9a0>
    1350:	468c      	mov	ip, r1
    1352:	a81e      	add	r0, sp, #120	; 0x78
    1354:	4611      	mov	r1, r2
    1356:	46d3      	mov	fp, sl
    1358:	9b09      	ldr	r3, [sp, #36]	; 0x24
    135a:	2b80      	cmp	r3, #128	; 0x80
    135c:	f000 8174 	beq.w	1648 <_vfiprintf_r+0x7fc>
    1360:	9b05      	ldr	r3, [sp, #20]
    1362:	eba8 0503 	sub.w	r5, r8, r3
    1366:	2d00      	cmp	r5, #0
    1368:	dd32      	ble.n	13d0 <_vfiprintf_r+0x584>
    136a:	2d10      	cmp	r5, #16
    136c:	4c2b      	ldr	r4, [pc, #172]	; (141c <_vfiprintf_r+0x5d0>)
    136e:	f340 832d 	ble.w	19cc <_vfiprintf_r+0xb80>
    1372:	2710      	movs	r7, #16
    1374:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1378:	e007      	b.n	138a <_vfiprintf_r+0x53e>
    137a:	f101 0c02 	add.w	ip, r1, #2
    137e:	f10b 0b08 	add.w	fp, fp, #8
    1382:	4619      	mov	r1, r3
    1384:	3d10      	subs	r5, #16
    1386:	2d10      	cmp	r5, #16
    1388:	dd11      	ble.n	13ae <_vfiprintf_r+0x562>
    138a:	1c4b      	adds	r3, r1, #1
    138c:	3210      	adds	r2, #16
    138e:	2b07      	cmp	r3, #7
    1390:	9211      	str	r2, [sp, #68]	; 0x44
    1392:	e9cb 4700 	strd	r4, r7, [fp]
    1396:	9310      	str	r3, [sp, #64]	; 0x40
    1398:	ddef      	ble.n	137a <_vfiprintf_r+0x52e>
    139a:	2a00      	cmp	r2, #0
    139c:	f040 811c 	bne.w	15d8 <_vfiprintf_r+0x78c>
    13a0:	3d10      	subs	r5, #16
    13a2:	2d10      	cmp	r5, #16
    13a4:	f04f 0c01 	mov.w	ip, #1
    13a8:	4611      	mov	r1, r2
    13aa:	46d3      	mov	fp, sl
    13ac:	dced      	bgt.n	138a <_vfiprintf_r+0x53e>
    13ae:	f10b 0108 	add.w	r1, fp, #8
    13b2:	442a      	add	r2, r5
    13b4:	f1bc 0f07 	cmp.w	ip, #7
    13b8:	9211      	str	r2, [sp, #68]	; 0x44
    13ba:	e9cb 4500 	strd	r4, r5, [fp]
    13be:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    13c2:	f300 821f 	bgt.w	1804 <_vfiprintf_r+0x9b8>
    13c6:	f10c 0c01 	add.w	ip, ip, #1
    13ca:	f101 0008 	add.w	r0, r1, #8
    13ce:	468b      	mov	fp, r1
    13d0:	9b05      	ldr	r3, [sp, #20]
    13d2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    13d6:	441a      	add	r2, r3
    13d8:	f1bc 0f07 	cmp.w	ip, #7
    13dc:	9211      	str	r2, [sp, #68]	; 0x44
    13de:	e9cb 6300 	strd	r6, r3, [fp]
    13e2:	f340 816f 	ble.w	16c4 <_vfiprintf_r+0x878>
    13e6:	2a00      	cmp	r2, #0
    13e8:	f040 8164 	bne.w	16b4 <_vfiprintf_r+0x868>
    13ec:	9b03      	ldr	r3, [sp, #12]
    13ee:	9210      	str	r2, [sp, #64]	; 0x40
    13f0:	075d      	lsls	r5, r3, #29
    13f2:	d538      	bpl.n	1466 <_vfiprintf_r+0x61a>
    13f4:	9b06      	ldr	r3, [sp, #24]
    13f6:	9901      	ldr	r1, [sp, #4]
    13f8:	1a5c      	subs	r4, r3, r1
    13fa:	2c00      	cmp	r4, #0
    13fc:	dd33      	ble.n	1466 <_vfiprintf_r+0x61a>
    13fe:	4650      	mov	r0, sl
    1400:	2c10      	cmp	r4, #16
    1402:	9f10      	ldr	r7, [sp, #64]	; 0x40
    1404:	4d04      	ldr	r5, [pc, #16]	; (1418 <_vfiprintf_r+0x5cc>)
    1406:	f340 82f9 	ble.w	19fc <_vfiprintf_r+0xbb0>
    140a:	2610      	movs	r6, #16
    140c:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1410:	e00c      	b.n	142c <_vfiprintf_r+0x5e0>
    1412:	bf00      	nop
    1414:	000068fc 	.word	0x000068fc
    1418:	00006918 	.word	0x00006918
    141c:	00006928 	.word	0x00006928
    1420:	1cbb      	adds	r3, r7, #2
    1422:	3008      	adds	r0, #8
    1424:	460f      	mov	r7, r1
    1426:	3c10      	subs	r4, #16
    1428:	2c10      	cmp	r4, #16
    142a:	dd11      	ble.n	1450 <_vfiprintf_r+0x604>
    142c:	1c79      	adds	r1, r7, #1
    142e:	3210      	adds	r2, #16
    1430:	2907      	cmp	r1, #7
    1432:	9211      	str	r2, [sp, #68]	; 0x44
    1434:	e9c0 5600 	strd	r5, r6, [r0]
    1438:	9110      	str	r1, [sp, #64]	; 0x40
    143a:	ddf1      	ble.n	1420 <_vfiprintf_r+0x5d4>
    143c:	2a00      	cmp	r2, #0
    143e:	f040 81a7 	bne.w	1790 <_vfiprintf_r+0x944>
    1442:	3c10      	subs	r4, #16
    1444:	2c10      	cmp	r4, #16
    1446:	f04f 0301 	mov.w	r3, #1
    144a:	4617      	mov	r7, r2
    144c:	4650      	mov	r0, sl
    144e:	dced      	bgt.n	142c <_vfiprintf_r+0x5e0>
    1450:	4422      	add	r2, r4
    1452:	2b07      	cmp	r3, #7
    1454:	9211      	str	r2, [sp, #68]	; 0x44
    1456:	e9c0 5400 	strd	r5, r4, [r0]
    145a:	9310      	str	r3, [sp, #64]	; 0x40
    145c:	f340 813b 	ble.w	16d6 <_vfiprintf_r+0x88a>
    1460:	2a00      	cmp	r2, #0
    1462:	f040 825c 	bne.w	191e <_vfiprintf_r+0xad2>
    1466:	9b04      	ldr	r3, [sp, #16]
    1468:	9a06      	ldr	r2, [sp, #24]
    146a:	9901      	ldr	r1, [sp, #4]
    146c:	428a      	cmp	r2, r1
    146e:	bfac      	ite	ge
    1470:	189b      	addge	r3, r3, r2
    1472:	185b      	addlt	r3, r3, r1
    1474:	9304      	str	r3, [sp, #16]
    1476:	e13d      	b.n	16f4 <_vfiprintf_r+0x8a8>
    1478:	2900      	cmp	r1, #0
    147a:	f040 82e1 	bne.w	1a40 <_vfiprintf_r+0xbf4>
    147e:	4bac      	ldr	r3, [pc, #688]	; (1730 <_vfiprintf_r+0x8e4>)
    1480:	930a      	str	r3, [sp, #40]	; 0x28
    1482:	06bc      	lsls	r4, r7, #26
    1484:	f53f ae40 	bmi.w	1108 <_vfiprintf_r+0x2bc>
    1488:	9b08      	ldr	r3, [sp, #32]
    148a:	06f8      	lsls	r0, r7, #27
    148c:	f853 4b04 	ldr.w	r4, [r3], #4
    1490:	9308      	str	r3, [sp, #32]
    1492:	f100 81dd 	bmi.w	1850 <_vfiprintf_r+0xa04>
    1496:	0679      	lsls	r1, r7, #25
    1498:	f140 81da 	bpl.w	1850 <_vfiprintf_r+0xa04>
    149c:	b2a4      	uxth	r4, r4
    149e:	2500      	movs	r5, #0
    14a0:	e63b      	b.n	111a <_vfiprintf_r+0x2ce>
    14a2:	2900      	cmp	r1, #0
    14a4:	f040 82d2 	bne.w	1a4c <_vfiprintf_r+0xc00>
    14a8:	f047 0710 	orr.w	r7, r7, #16
    14ac:	06bb      	lsls	r3, r7, #26
    14ae:	f53f aec5 	bmi.w	123c <_vfiprintf_r+0x3f0>
    14b2:	9b08      	ldr	r3, [sp, #32]
    14b4:	06fe      	lsls	r6, r7, #27
    14b6:	f853 4b04 	ldr.w	r4, [r3], #4
    14ba:	9308      	str	r3, [sp, #32]
    14bc:	f100 81ca 	bmi.w	1854 <_vfiprintf_r+0xa08>
    14c0:	067d      	lsls	r5, r7, #25
    14c2:	f140 81c7 	bpl.w	1854 <_vfiprintf_r+0xa08>
    14c6:	b224      	sxth	r4, r4
    14c8:	17e5      	asrs	r5, r4, #31
    14ca:	e6c0      	b.n	124e <_vfiprintf_r+0x402>
    14cc:	9b08      	ldr	r3, [sp, #32]
    14ce:	f899 2000 	ldrb.w	r2, [r9]
    14d2:	681c      	ldr	r4, [r3, #0]
    14d4:	9406      	str	r4, [sp, #24]
    14d6:	2c00      	cmp	r4, #0
    14d8:	f103 0304 	add.w	r3, r3, #4
    14dc:	f2c0 8215 	blt.w	190a <_vfiprintf_r+0xabe>
    14e0:	9308      	str	r3, [sp, #32]
    14e2:	e521      	b.n	f28 <_vfiprintf_r+0xdc>
    14e4:	f047 0701 	orr.w	r7, r7, #1
    14e8:	f899 2000 	ldrb.w	r2, [r9]
    14ec:	e51c      	b.n	f28 <_vfiprintf_r+0xdc>
    14ee:	f899 2000 	ldrb.w	r2, [r9]
    14f2:	2800      	cmp	r0, #0
    14f4:	f47f ad18 	bne.w	f28 <_vfiprintf_r+0xdc>
    14f8:	2101      	movs	r1, #1
    14fa:	2020      	movs	r0, #32
    14fc:	e514      	b.n	f28 <_vfiprintf_r+0xdc>
    14fe:	f899 2000 	ldrb.w	r2, [r9]
    1502:	f047 0704 	orr.w	r7, r7, #4
    1506:	e50f      	b.n	f28 <_vfiprintf_r+0xdc>
    1508:	f899 2000 	ldrb.w	r2, [r9]
    150c:	2101      	movs	r1, #1
    150e:	202b      	movs	r0, #43	; 0x2b
    1510:	e50a      	b.n	f28 <_vfiprintf_r+0xdc>
    1512:	f899 2000 	ldrb.w	r2, [r9]
    1516:	2a2a      	cmp	r2, #42	; 0x2a
    1518:	f109 0401 	add.w	r4, r9, #1
    151c:	f000 8285 	beq.w	1a2a <_vfiprintf_r+0xbde>
    1520:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    1524:	2b09      	cmp	r3, #9
    1526:	46a1      	mov	r9, r4
    1528:	f04f 0800 	mov.w	r8, #0
    152c:	f63f acfe 	bhi.w	f2c <_vfiprintf_r+0xe0>
    1530:	f819 2b01 	ldrb.w	r2, [r9], #1
    1534:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    1538:	eb03 0848 	add.w	r8, r3, r8, lsl #1
    153c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    1540:	2b09      	cmp	r3, #9
    1542:	d9f5      	bls.n	1530 <_vfiprintf_r+0x6e4>
    1544:	e4f2      	b.n	f2c <_vfiprintf_r+0xe0>
    1546:	9b08      	ldr	r3, [sp, #32]
    1548:	06fe      	lsls	r6, r7, #27
    154a:	f853 4b04 	ldr.w	r4, [r3], #4
    154e:	9308      	str	r3, [sp, #32]
    1550:	f140 81c6 	bpl.w	18e0 <_vfiprintf_r+0xa94>
    1554:	2500      	movs	r5, #0
    1556:	2301      	movs	r3, #1
    1558:	e622      	b.n	11a0 <_vfiprintf_r+0x354>
    155a:	9a08      	ldr	r2, [sp, #32]
    155c:	f852 4b04 	ldr.w	r4, [r2], #4
    1560:	9208      	str	r2, [sp, #32]
    1562:	f017 0210 	ands.w	r2, r7, #16
    1566:	f000 81b4 	beq.w	18d2 <_vfiprintf_r+0xa86>
    156a:	2500      	movs	r5, #0
    156c:	e618      	b.n	11a0 <_vfiprintf_r+0x354>
    156e:	89aa      	ldrh	r2, [r5, #12]
    1570:	f002 031a 	and.w	r3, r2, #26
    1574:	2b0a      	cmp	r3, #10
    1576:	f47f ac98 	bne.w	eaa <_vfiprintf_r+0x5e>
    157a:	9902      	ldr	r1, [sp, #8]
    157c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    1580:	2b00      	cmp	r3, #0
    1582:	f6ff ac92 	blt.w	eaa <_vfiprintf_r+0x5e>
    1586:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    1588:	07d8      	lsls	r0, r3, #31
    158a:	d404      	bmi.n	1596 <_vfiprintf_r+0x74a>
    158c:	0592      	lsls	r2, r2, #22
    158e:	d402      	bmi.n	1596 <_vfiprintf_r+0x74a>
    1590:	6d88      	ldr	r0, [r1, #88]	; 0x58
    1592:	f7fe fec7 	bl	324 <__retarget_lock_release_recursive>
    1596:	4623      	mov	r3, r4
    1598:	464a      	mov	r2, r9
    159a:	9902      	ldr	r1, [sp, #8]
    159c:	9807      	ldr	r0, [sp, #28]
    159e:	f000 fa67 	bl	1a70 <__sbprintf>
    15a2:	9004      	str	r0, [sp, #16]
    15a4:	9804      	ldr	r0, [sp, #16]
    15a6:	b02d      	add	sp, #180	; 0xb4
    15a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ac:	f000 fc0e 	bl	1dcc <__sinit>
    15b0:	e459      	b.n	e66 <_vfiprintf_r+0x1a>
    15b2:	2302      	movs	r3, #2
    15b4:	e5f4      	b.n	11a0 <_vfiprintf_r+0x354>
    15b6:	2900      	cmp	r1, #0
    15b8:	f040 8245 	bne.w	1a46 <_vfiprintf_r+0xbfa>
    15bc:	2a00      	cmp	r2, #0
    15be:	f000 80a1 	beq.w	1704 <_vfiprintf_r+0x8b8>
    15c2:	2301      	movs	r3, #1
    15c4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    15c8:	f04f 0200 	mov.w	r2, #0
    15cc:	9301      	str	r3, [sp, #4]
    15ce:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    15d2:	9305      	str	r3, [sp, #20]
    15d4:	ae12      	add	r6, sp, #72	; 0x48
    15d6:	e656      	b.n	1286 <_vfiprintf_r+0x43a>
    15d8:	aa0f      	add	r2, sp, #60	; 0x3c
    15da:	9902      	ldr	r1, [sp, #8]
    15dc:	4640      	mov	r0, r8
    15de:	f7ff fbf9 	bl	dd4 <__sprint_r.part.0>
    15e2:	2800      	cmp	r0, #0
    15e4:	f040 8094 	bne.w	1710 <_vfiprintf_r+0x8c4>
    15e8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    15ec:	46d3      	mov	fp, sl
    15ee:	f101 0c01 	add.w	ip, r1, #1
    15f2:	e6c7      	b.n	1384 <_vfiprintf_r+0x538>
    15f4:	aa0f      	add	r2, sp, #60	; 0x3c
    15f6:	9902      	ldr	r1, [sp, #8]
    15f8:	9807      	ldr	r0, [sp, #28]
    15fa:	930b      	str	r3, [sp, #44]	; 0x2c
    15fc:	f7ff fbea 	bl	dd4 <__sprint_r.part.0>
    1600:	2800      	cmp	r0, #0
    1602:	f040 8085 	bne.w	1710 <_vfiprintf_r+0x8c4>
    1606:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    160a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    160c:	f101 0c01 	add.w	ip, r1, #1
    1610:	a81e      	add	r0, sp, #120	; 0x78
    1612:	46d3      	mov	fp, sl
    1614:	2b00      	cmp	r3, #0
    1616:	f43f ae9f 	beq.w	1358 <_vfiprintf_r+0x50c>
    161a:	3202      	adds	r2, #2
    161c:	ac0e      	add	r4, sp, #56	; 0x38
    161e:	2102      	movs	r1, #2
    1620:	f1bc 0f07 	cmp.w	ip, #7
    1624:	e9cd c210 	strd	ip, r2, [sp, #64]	; 0x40
    1628:	e9cb 4100 	strd	r4, r1, [fp]
    162c:	f340 80e4 	ble.w	17f8 <_vfiprintf_r+0x9ac>
    1630:	2a00      	cmp	r2, #0
    1632:	f040 811d 	bne.w	1870 <_vfiprintf_r+0xa24>
    1636:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1638:	2b80      	cmp	r3, #128	; 0x80
    163a:	a81e      	add	r0, sp, #120	; 0x78
    163c:	f04f 0c01 	mov.w	ip, #1
    1640:	4611      	mov	r1, r2
    1642:	46d3      	mov	fp, sl
    1644:	f47f ae8c 	bne.w	1360 <_vfiprintf_r+0x514>
    1648:	9b06      	ldr	r3, [sp, #24]
    164a:	9c01      	ldr	r4, [sp, #4]
    164c:	1b1d      	subs	r5, r3, r4
    164e:	2d00      	cmp	r5, #0
    1650:	f77f ae86 	ble.w	1360 <_vfiprintf_r+0x514>
    1654:	2d10      	cmp	r5, #16
    1656:	4c37      	ldr	r4, [pc, #220]	; (1734 <_vfiprintf_r+0x8e8>)
    1658:	f340 81db 	ble.w	1a12 <_vfiprintf_r+0xbc6>
    165c:	2710      	movs	r7, #16
    165e:	e006      	b.n	166e <_vfiprintf_r+0x822>
    1660:	1c88      	adds	r0, r1, #2
    1662:	f10b 0b08 	add.w	fp, fp, #8
    1666:	4619      	mov	r1, r3
    1668:	3d10      	subs	r5, #16
    166a:	2d10      	cmp	r5, #16
    166c:	dd11      	ble.n	1692 <_vfiprintf_r+0x846>
    166e:	1c4b      	adds	r3, r1, #1
    1670:	3210      	adds	r2, #16
    1672:	2b07      	cmp	r3, #7
    1674:	9211      	str	r2, [sp, #68]	; 0x44
    1676:	e9cb 4700 	strd	r4, r7, [fp]
    167a:	9310      	str	r3, [sp, #64]	; 0x40
    167c:	ddf0      	ble.n	1660 <_vfiprintf_r+0x814>
    167e:	2a00      	cmp	r2, #0
    1680:	f040 8092 	bne.w	17a8 <_vfiprintf_r+0x95c>
    1684:	3d10      	subs	r5, #16
    1686:	2d10      	cmp	r5, #16
    1688:	f04f 0001 	mov.w	r0, #1
    168c:	4611      	mov	r1, r2
    168e:	46d3      	mov	fp, sl
    1690:	dced      	bgt.n	166e <_vfiprintf_r+0x822>
    1692:	f10b 0708 	add.w	r7, fp, #8
    1696:	442a      	add	r2, r5
    1698:	2807      	cmp	r0, #7
    169a:	9211      	str	r2, [sp, #68]	; 0x44
    169c:	e9cb 4500 	strd	r4, r5, [fp]
    16a0:	9010      	str	r0, [sp, #64]	; 0x40
    16a2:	f300 80f4 	bgt.w	188e <_vfiprintf_r+0xa42>
    16a6:	f100 0c01 	add.w	ip, r0, #1
    16aa:	4601      	mov	r1, r0
    16ac:	46bb      	mov	fp, r7
    16ae:	f107 0008 	add.w	r0, r7, #8
    16b2:	e655      	b.n	1360 <_vfiprintf_r+0x514>
    16b4:	aa0f      	add	r2, sp, #60	; 0x3c
    16b6:	9902      	ldr	r1, [sp, #8]
    16b8:	9807      	ldr	r0, [sp, #28]
    16ba:	f7ff fb8b 	bl	dd4 <__sprint_r.part.0>
    16be:	bb38      	cbnz	r0, 1710 <_vfiprintf_r+0x8c4>
    16c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    16c2:	4650      	mov	r0, sl
    16c4:	9b03      	ldr	r3, [sp, #12]
    16c6:	075c      	lsls	r4, r3, #29
    16c8:	d505      	bpl.n	16d6 <_vfiprintf_r+0x88a>
    16ca:	9b06      	ldr	r3, [sp, #24]
    16cc:	9901      	ldr	r1, [sp, #4]
    16ce:	1a5c      	subs	r4, r3, r1
    16d0:	2c00      	cmp	r4, #0
    16d2:	f73f ae95 	bgt.w	1400 <_vfiprintf_r+0x5b4>
    16d6:	9b04      	ldr	r3, [sp, #16]
    16d8:	9906      	ldr	r1, [sp, #24]
    16da:	9801      	ldr	r0, [sp, #4]
    16dc:	4281      	cmp	r1, r0
    16de:	bfac      	ite	ge
    16e0:	185b      	addge	r3, r3, r1
    16e2:	181b      	addlt	r3, r3, r0
    16e4:	9304      	str	r3, [sp, #16]
    16e6:	b12a      	cbz	r2, 16f4 <_vfiprintf_r+0x8a8>
    16e8:	aa0f      	add	r2, sp, #60	; 0x3c
    16ea:	9902      	ldr	r1, [sp, #8]
    16ec:	9807      	ldr	r0, [sp, #28]
    16ee:	f7ff fb71 	bl	dd4 <__sprint_r.part.0>
    16f2:	b968      	cbnz	r0, 1710 <_vfiprintf_r+0x8c4>
    16f4:	2300      	movs	r3, #0
    16f6:	9310      	str	r3, [sp, #64]	; 0x40
    16f8:	f899 3000 	ldrb.w	r3, [r9]
    16fc:	46d3      	mov	fp, sl
    16fe:	2b00      	cmp	r3, #0
    1700:	f47f abe2 	bne.w	ec8 <_vfiprintf_r+0x7c>
    1704:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1706:	2b00      	cmp	r3, #0
    1708:	f040 8186 	bne.w	1a18 <_vfiprintf_r+0xbcc>
    170c:	2300      	movs	r3, #0
    170e:	9310      	str	r3, [sp, #64]	; 0x40
    1710:	9b02      	ldr	r3, [sp, #8]
    1712:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    1714:	899b      	ldrh	r3, [r3, #12]
    1716:	07d1      	lsls	r1, r2, #31
    1718:	d402      	bmi.n	1720 <_vfiprintf_r+0x8d4>
    171a:	059a      	lsls	r2, r3, #22
    171c:	f140 80f9 	bpl.w	1912 <_vfiprintf_r+0xac6>
    1720:	065b      	lsls	r3, r3, #25
    1722:	f53f acc8 	bmi.w	10b6 <_vfiprintf_r+0x26a>
    1726:	9804      	ldr	r0, [sp, #16]
    1728:	b02d      	add	sp, #180	; 0xb4
    172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    172e:	bf00      	nop
    1730:	000068e8 	.word	0x000068e8
    1734:	00006928 	.word	0x00006928
    1738:	980a      	ldr	r0, [sp, #40]	; 0x28
    173a:	4656      	mov	r6, sl
    173c:	0923      	lsrs	r3, r4, #4
    173e:	f004 010f 	and.w	r1, r4, #15
    1742:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    1746:	092a      	lsrs	r2, r5, #4
    1748:	461c      	mov	r4, r3
    174a:	4615      	mov	r5, r2
    174c:	5c43      	ldrb	r3, [r0, r1]
    174e:	f806 3d01 	strb.w	r3, [r6, #-1]!
    1752:	ea54 0305 	orrs.w	r3, r4, r5
    1756:	d1f1      	bne.n	173c <_vfiprintf_r+0x8f0>
    1758:	ebaa 0306 	sub.w	r3, sl, r6
    175c:	9305      	str	r3, [sp, #20]
    175e:	9b05      	ldr	r3, [sp, #20]
    1760:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1762:	4543      	cmp	r3, r8
    1764:	bfb8      	it	lt
    1766:	4643      	movlt	r3, r8
    1768:	9301      	str	r3, [sp, #4]
    176a:	2a00      	cmp	r2, #0
    176c:	f43f ad8e 	beq.w	128c <_vfiprintf_r+0x440>
    1770:	3301      	adds	r3, #1
    1772:	9301      	str	r3, [sp, #4]
    1774:	e58a      	b.n	128c <_vfiprintf_r+0x440>
    1776:	aa0f      	add	r2, sp, #60	; 0x3c
    1778:	9902      	ldr	r1, [sp, #8]
    177a:	9807      	ldr	r0, [sp, #28]
    177c:	f7ff fb2a 	bl	dd4 <__sprint_r.part.0>
    1780:	2800      	cmp	r0, #0
    1782:	d1c5      	bne.n	1710 <_vfiprintf_r+0x8c4>
    1784:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    1788:	4653      	mov	r3, sl
    178a:	f101 0e01 	add.w	lr, r1, #1
    178e:	e59f      	b.n	12d0 <_vfiprintf_r+0x484>
    1790:	aa0f      	add	r2, sp, #60	; 0x3c
    1792:	9902      	ldr	r1, [sp, #8]
    1794:	4640      	mov	r0, r8
    1796:	f7ff fb1d 	bl	dd4 <__sprint_r.part.0>
    179a:	2800      	cmp	r0, #0
    179c:	d1b8      	bne.n	1710 <_vfiprintf_r+0x8c4>
    179e:	e9dd 7210 	ldrd	r7, r2, [sp, #64]	; 0x40
    17a2:	4650      	mov	r0, sl
    17a4:	1c7b      	adds	r3, r7, #1
    17a6:	e63e      	b.n	1426 <_vfiprintf_r+0x5da>
    17a8:	aa0f      	add	r2, sp, #60	; 0x3c
    17aa:	9902      	ldr	r1, [sp, #8]
    17ac:	9807      	ldr	r0, [sp, #28]
    17ae:	f7ff fb11 	bl	dd4 <__sprint_r.part.0>
    17b2:	2800      	cmp	r0, #0
    17b4:	d1ac      	bne.n	1710 <_vfiprintf_r+0x8c4>
    17b6:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    17ba:	46d3      	mov	fp, sl
    17bc:	1c48      	adds	r0, r1, #1
    17be:	e753      	b.n	1668 <_vfiprintf_r+0x81c>
    17c0:	2a00      	cmp	r2, #0
    17c2:	f040 80f3 	bne.w	19ac <_vfiprintf_r+0xb60>
    17c6:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
    17ca:	2900      	cmp	r1, #0
    17cc:	f000 8095 	beq.w	18fa <_vfiprintf_r+0xaae>
    17d0:	2101      	movs	r1, #1
    17d2:	f10d 0037 	add.w	r0, sp, #55	; 0x37
    17d6:	901c      	str	r0, [sp, #112]	; 0x70
    17d8:	460a      	mov	r2, r1
    17da:	911d      	str	r1, [sp, #116]	; 0x74
    17dc:	468c      	mov	ip, r1
    17de:	a81e      	add	r0, sp, #120	; 0x78
    17e0:	4661      	mov	r1, ip
    17e2:	4683      	mov	fp, r0
    17e4:	f10c 0c01 	add.w	ip, ip, #1
    17e8:	3008      	adds	r0, #8
    17ea:	e713      	b.n	1614 <_vfiprintf_r+0x7c8>
    17ec:	a80e      	add	r0, sp, #56	; 0x38
    17ee:	2202      	movs	r2, #2
    17f0:	e9cd 021c 	strd	r0, r2, [sp, #112]	; 0x70
    17f4:	468c      	mov	ip, r1
    17f6:	a81e      	add	r0, sp, #120	; 0x78
    17f8:	4661      	mov	r1, ip
    17fa:	4683      	mov	fp, r0
    17fc:	f10c 0c01 	add.w	ip, ip, #1
    1800:	3008      	adds	r0, #8
    1802:	e5a9      	b.n	1358 <_vfiprintf_r+0x50c>
    1804:	2a00      	cmp	r2, #0
    1806:	d14a      	bne.n	189e <_vfiprintf_r+0xa52>
    1808:	9a05      	ldr	r2, [sp, #20]
    180a:	921d      	str	r2, [sp, #116]	; 0x74
    180c:	2101      	movs	r1, #1
    180e:	9211      	str	r2, [sp, #68]	; 0x44
    1810:	961c      	str	r6, [sp, #112]	; 0x70
    1812:	9110      	str	r1, [sp, #64]	; 0x40
    1814:	a81e      	add	r0, sp, #120	; 0x78
    1816:	e755      	b.n	16c4 <_vfiprintf_r+0x878>
    1818:	9703      	str	r7, [sp, #12]
    181a:	2d00      	cmp	r5, #0
    181c:	bf08      	it	eq
    181e:	2c0a      	cmpeq	r4, #10
    1820:	f080 80ae 	bcs.w	1980 <_vfiprintf_r+0xb34>
    1824:	ae2c      	add	r6, sp, #176	; 0xb0
    1826:	3430      	adds	r4, #48	; 0x30
    1828:	2301      	movs	r3, #1
    182a:	f806 4d41 	strb.w	r4, [r6, #-65]!
    182e:	9305      	str	r3, [sp, #20]
    1830:	e795      	b.n	175e <_vfiprintf_r+0x912>
    1832:	f8cd 8014 	str.w	r8, [sp, #20]
    1836:	4656      	mov	r6, sl
    1838:	e791      	b.n	175e <_vfiprintf_r+0x912>
    183a:	aa0f      	add	r2, sp, #60	; 0x3c
    183c:	9902      	ldr	r1, [sp, #8]
    183e:	9807      	ldr	r0, [sp, #28]
    1840:	f7ff fac8 	bl	dd4 <__sprint_r.part.0>
    1844:	2800      	cmp	r0, #0
    1846:	f47f af63 	bne.w	1710 <_vfiprintf_r+0x8c4>
    184a:	46d3      	mov	fp, sl
    184c:	f7ff bb58 	b.w	f00 <_vfiprintf_r+0xb4>
    1850:	2500      	movs	r5, #0
    1852:	e462      	b.n	111a <_vfiprintf_r+0x2ce>
    1854:	17e5      	asrs	r5, r4, #31
    1856:	2c00      	cmp	r4, #0
    1858:	f175 0300 	sbcs.w	r3, r5, #0
    185c:	f6bf acfc 	bge.w	1258 <_vfiprintf_r+0x40c>
    1860:	232d      	movs	r3, #45	; 0x2d
    1862:	4264      	negs	r4, r4
    1864:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    1868:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    186c:	9309      	str	r3, [sp, #36]	; 0x24
    186e:	e4f6      	b.n	125e <_vfiprintf_r+0x412>
    1870:	aa0f      	add	r2, sp, #60	; 0x3c
    1872:	9902      	ldr	r1, [sp, #8]
    1874:	9807      	ldr	r0, [sp, #28]
    1876:	f7ff faad 	bl	dd4 <__sprint_r.part.0>
    187a:	2800      	cmp	r0, #0
    187c:	f47f af48 	bne.w	1710 <_vfiprintf_r+0x8c4>
    1880:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    1884:	a81e      	add	r0, sp, #120	; 0x78
    1886:	f101 0c01 	add.w	ip, r1, #1
    188a:	46d3      	mov	fp, sl
    188c:	e564      	b.n	1358 <_vfiprintf_r+0x50c>
    188e:	2a00      	cmp	r2, #0
    1890:	d15f      	bne.n	1952 <_vfiprintf_r+0xb06>
    1892:	a81e      	add	r0, sp, #120	; 0x78
    1894:	f04f 0c01 	mov.w	ip, #1
    1898:	4611      	mov	r1, r2
    189a:	46d3      	mov	fp, sl
    189c:	e560      	b.n	1360 <_vfiprintf_r+0x514>
    189e:	aa0f      	add	r2, sp, #60	; 0x3c
    18a0:	9902      	ldr	r1, [sp, #8]
    18a2:	9807      	ldr	r0, [sp, #28]
    18a4:	f7ff fa96 	bl	dd4 <__sprint_r.part.0>
    18a8:	2800      	cmp	r0, #0
    18aa:	f47f af31 	bne.w	1710 <_vfiprintf_r+0x8c4>
    18ae:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    18b2:	a81e      	add	r0, sp, #120	; 0x78
    18b4:	f101 0c01 	add.w	ip, r1, #1
    18b8:	46d3      	mov	fp, sl
    18ba:	e589      	b.n	13d0 <_vfiprintf_r+0x584>
    18bc:	9d02      	ldr	r5, [sp, #8]
    18be:	6da8      	ldr	r0, [r5, #88]	; 0x58
    18c0:	f7fe fd2e 	bl	320 <__retarget_lock_acquire_recursive>
    18c4:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    18c8:	b28a      	uxth	r2, r1
    18ca:	f7ff bad6 	b.w	e7a <_vfiprintf_r+0x2e>
    18ce:	4656      	mov	r6, sl
    18d0:	e745      	b.n	175e <_vfiprintf_r+0x912>
    18d2:	f017 0340 	ands.w	r3, r7, #64	; 0x40
    18d6:	bf1c      	itt	ne
    18d8:	4613      	movne	r3, r2
    18da:	b2a4      	uxthne	r4, r4
    18dc:	2500      	movs	r5, #0
    18de:	e45f      	b.n	11a0 <_vfiprintf_r+0x354>
    18e0:	067d      	lsls	r5, r7, #25
    18e2:	bf48      	it	mi
    18e4:	b2a4      	uxthmi	r4, r4
    18e6:	2500      	movs	r5, #0
    18e8:	2301      	movs	r3, #1
    18ea:	e459      	b.n	11a0 <_vfiprintf_r+0x354>
    18ec:	9a04      	ldr	r2, [sp, #16]
    18ee:	4610      	mov	r0, r2
    18f0:	17d1      	asrs	r1, r2, #31
    18f2:	e9c3 0100 	strd	r0, r1, [r3]
    18f6:	f7ff bae2 	b.w	ebe <_vfiprintf_r+0x72>
    18fa:	2b00      	cmp	r3, #0
    18fc:	d176      	bne.n	19ec <_vfiprintf_r+0xba0>
    18fe:	4611      	mov	r1, r2
    1900:	a81e      	add	r0, sp, #120	; 0x78
    1902:	f04f 0c01 	mov.w	ip, #1
    1906:	46d3      	mov	fp, sl
    1908:	e52a      	b.n	1360 <_vfiprintf_r+0x514>
    190a:	4264      	negs	r4, r4
    190c:	9406      	str	r4, [sp, #24]
    190e:	9308      	str	r3, [sp, #32]
    1910:	e5f7      	b.n	1502 <_vfiprintf_r+0x6b6>
    1912:	9c02      	ldr	r4, [sp, #8]
    1914:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1916:	f7fe fd05 	bl	324 <__retarget_lock_release_recursive>
    191a:	89a3      	ldrh	r3, [r4, #12]
    191c:	e700      	b.n	1720 <_vfiprintf_r+0x8d4>
    191e:	aa0f      	add	r2, sp, #60	; 0x3c
    1920:	9902      	ldr	r1, [sp, #8]
    1922:	9807      	ldr	r0, [sp, #28]
    1924:	f7ff fa56 	bl	dd4 <__sprint_r.part.0>
    1928:	2800      	cmp	r0, #0
    192a:	f47f aef1 	bne.w	1710 <_vfiprintf_r+0x8c4>
    192e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    1930:	e6d1      	b.n	16d6 <_vfiprintf_r+0x88a>
    1932:	6d90      	ldr	r0, [r2, #88]	; 0x58
    1934:	f7fe fcf6 	bl	324 <__retarget_lock_release_recursive>
    1938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    193c:	9304      	str	r3, [sp, #16]
    193e:	e6f2      	b.n	1726 <_vfiprintf_r+0x8da>
    1940:	4643      	mov	r3, r8
    1942:	2b06      	cmp	r3, #6
    1944:	bf28      	it	cs
    1946:	2306      	movcs	r3, #6
    1948:	9305      	str	r3, [sp, #20]
    194a:	9408      	str	r4, [sp, #32]
    194c:	9301      	str	r3, [sp, #4]
    194e:	4e47      	ldr	r6, [pc, #284]	; (1a6c <_vfiprintf_r+0xc20>)
    1950:	e499      	b.n	1286 <_vfiprintf_r+0x43a>
    1952:	aa0f      	add	r2, sp, #60	; 0x3c
    1954:	9902      	ldr	r1, [sp, #8]
    1956:	9807      	ldr	r0, [sp, #28]
    1958:	f7ff fa3c 	bl	dd4 <__sprint_r.part.0>
    195c:	2800      	cmp	r0, #0
    195e:	f47f aed7 	bne.w	1710 <_vfiprintf_r+0x8c4>
    1962:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    1966:	a81e      	add	r0, sp, #120	; 0x78
    1968:	f101 0c01 	add.w	ip, r1, #1
    196c:	46d3      	mov	fp, sl
    196e:	e4f7      	b.n	1360 <_vfiprintf_r+0x514>
    1970:	9a04      	ldr	r2, [sp, #16]
    1972:	601a      	str	r2, [r3, #0]
    1974:	f7ff baa3 	b.w	ebe <_vfiprintf_r+0x72>
    1978:	2b01      	cmp	r3, #1
    197a:	f47f ab55 	bne.w	1028 <_vfiprintf_r+0x1dc>
    197e:	e751      	b.n	1824 <_vfiprintf_r+0x9d8>
    1980:	4656      	mov	r6, sl
    1982:	4620      	mov	r0, r4
    1984:	4629      	mov	r1, r5
    1986:	220a      	movs	r2, #10
    1988:	2300      	movs	r3, #0
    198a:	f004 fcff 	bl	638c <__aeabi_uldivmod>
    198e:	3230      	adds	r2, #48	; 0x30
    1990:	f806 2d01 	strb.w	r2, [r6, #-1]!
    1994:	4620      	mov	r0, r4
    1996:	4629      	mov	r1, r5
    1998:	2300      	movs	r3, #0
    199a:	220a      	movs	r2, #10
    199c:	f004 fcf6 	bl	638c <__aeabi_uldivmod>
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
    19a4:	ea54 0305 	orrs.w	r3, r4, r5
    19a8:	d1eb      	bne.n	1982 <_vfiprintf_r+0xb36>
    19aa:	e6d5      	b.n	1758 <_vfiprintf_r+0x90c>
    19ac:	aa0f      	add	r2, sp, #60	; 0x3c
    19ae:	9902      	ldr	r1, [sp, #8]
    19b0:	9807      	ldr	r0, [sp, #28]
    19b2:	930b      	str	r3, [sp, #44]	; 0x2c
    19b4:	f7ff fa0e 	bl	dd4 <__sprint_r.part.0>
    19b8:	2800      	cmp	r0, #0
    19ba:	f47f aea9 	bne.w	1710 <_vfiprintf_r+0x8c4>
    19be:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    19c2:	46d3      	mov	fp, sl
    19c4:	f101 0c01 	add.w	ip, r1, #1
    19c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19ca:	e4a8      	b.n	131e <_vfiprintf_r+0x4d2>
    19cc:	4601      	mov	r1, r0
    19ce:	e4f0      	b.n	13b2 <_vfiprintf_r+0x566>
    19d0:	4630      	mov	r0, r6
    19d2:	9408      	str	r4, [sp, #32]
    19d4:	9703      	str	r7, [sp, #12]
    19d6:	f001 fc53 	bl	3280 <strlen>
    19da:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    19de:	9005      	str	r0, [sp, #20]
    19e0:	9309      	str	r3, [sp, #36]	; 0x24
    19e2:	f04f 0800 	mov.w	r8, #0
    19e6:	e6ba      	b.n	175e <_vfiprintf_r+0x912>
    19e8:	4686      	mov	lr, r0
    19ea:	e489      	b.n	1300 <_vfiprintf_r+0x4b4>
    19ec:	a90e      	add	r1, sp, #56	; 0x38
    19ee:	2202      	movs	r2, #2
    19f0:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
    19f4:	a81e      	add	r0, sp, #120	; 0x78
    19f6:	f04f 0c01 	mov.w	ip, #1
    19fa:	e6fd      	b.n	17f8 <_vfiprintf_r+0x9ac>
    19fc:	1c7b      	adds	r3, r7, #1
    19fe:	e527      	b.n	1450 <_vfiprintf_r+0x604>
    1a00:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    1a04:	f8cd 8014 	str.w	r8, [sp, #20]
    1a08:	9309      	str	r3, [sp, #36]	; 0x24
    1a0a:	9408      	str	r4, [sp, #32]
    1a0c:	9703      	str	r7, [sp, #12]
    1a0e:	4680      	mov	r8, r0
    1a10:	e6a5      	b.n	175e <_vfiprintf_r+0x912>
    1a12:	4607      	mov	r7, r0
    1a14:	4660      	mov	r0, ip
    1a16:	e63e      	b.n	1696 <_vfiprintf_r+0x84a>
    1a18:	9807      	ldr	r0, [sp, #28]
    1a1a:	9902      	ldr	r1, [sp, #8]
    1a1c:	aa0f      	add	r2, sp, #60	; 0x3c
    1a1e:	f7ff f9d9 	bl	dd4 <__sprint_r.part.0>
    1a22:	2800      	cmp	r0, #0
    1a24:	f43f ae72 	beq.w	170c <_vfiprintf_r+0x8c0>
    1a28:	e672      	b.n	1710 <_vfiprintf_r+0x8c4>
    1a2a:	9d08      	ldr	r5, [sp, #32]
    1a2c:	f899 2001 	ldrb.w	r2, [r9, #1]
    1a30:	682b      	ldr	r3, [r5, #0]
    1a32:	ea43 78e3 	orr.w	r8, r3, r3, asr #31
    1a36:	1d2b      	adds	r3, r5, #4
    1a38:	46a1      	mov	r9, r4
    1a3a:	9308      	str	r3, [sp, #32]
    1a3c:	f7ff ba74 	b.w	f28 <_vfiprintf_r+0xdc>
    1a40:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    1a44:	e51b      	b.n	147e <_vfiprintf_r+0x632>
    1a46:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    1a4a:	e5b7      	b.n	15bc <_vfiprintf_r+0x770>
    1a4c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    1a50:	e52a      	b.n	14a8 <_vfiprintf_r+0x65c>
    1a52:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    1a56:	f7ff bbee 	b.w	1236 <_vfiprintf_r+0x3ea>
    1a5a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    1a5e:	f7ff bb4e 	b.w	10fe <_vfiprintf_r+0x2b2>
    1a62:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    1a66:	f7ff bbc0 	b.w	11ea <_vfiprintf_r+0x39e>
    1a6a:	bf00      	nop
    1a6c:	00006910 	.word	0x00006910

00001a70 <__sbprintf>:
    1a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a74:	460c      	mov	r4, r1
    1a76:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    1a7a:	8989      	ldrh	r1, [r1, #12]
    1a7c:	6e66      	ldr	r6, [r4, #100]	; 0x64
    1a7e:	89e5      	ldrh	r5, [r4, #14]
    1a80:	9619      	str	r6, [sp, #100]	; 0x64
    1a82:	f021 0102 	bic.w	r1, r1, #2
    1a86:	4606      	mov	r6, r0
    1a88:	69e0      	ldr	r0, [r4, #28]
    1a8a:	f8ad 100c 	strh.w	r1, [sp, #12]
    1a8e:	4617      	mov	r7, r2
    1a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1a94:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1a96:	f8ad 500e 	strh.w	r5, [sp, #14]
    1a9a:	4698      	mov	r8, r3
    1a9c:	ad1a      	add	r5, sp, #104	; 0x68
    1a9e:	2300      	movs	r3, #0
    1aa0:	9007      	str	r0, [sp, #28]
    1aa2:	a816      	add	r0, sp, #88	; 0x58
    1aa4:	9209      	str	r2, [sp, #36]	; 0x24
    1aa6:	9306      	str	r3, [sp, #24]
    1aa8:	9500      	str	r5, [sp, #0]
    1aaa:	9504      	str	r5, [sp, #16]
    1aac:	9102      	str	r1, [sp, #8]
    1aae:	9105      	str	r1, [sp, #20]
    1ab0:	f7fe fc32 	bl	318 <__retarget_lock_init_recursive>
    1ab4:	4643      	mov	r3, r8
    1ab6:	463a      	mov	r2, r7
    1ab8:	4669      	mov	r1, sp
    1aba:	4630      	mov	r0, r6
    1abc:	f7ff f9c6 	bl	e4c <_vfiprintf_r>
    1ac0:	1e05      	subs	r5, r0, #0
    1ac2:	db07      	blt.n	1ad4 <__sbprintf+0x64>
    1ac4:	4630      	mov	r0, r6
    1ac6:	4669      	mov	r1, sp
    1ac8:	f000 f924 	bl	1d14 <_fflush_r>
    1acc:	2800      	cmp	r0, #0
    1ace:	bf18      	it	ne
    1ad0:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    1ad4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    1ad8:	065b      	lsls	r3, r3, #25
    1ada:	d503      	bpl.n	1ae4 <__sbprintf+0x74>
    1adc:	89a3      	ldrh	r3, [r4, #12]
    1ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ae2:	81a3      	strh	r3, [r4, #12]
    1ae4:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ae6:	f7fe fc19 	bl	31c <__retarget_lock_close_recursive>
    1aea:	4628      	mov	r0, r5
    1aec:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
    1af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001af4 <__swsetup_r>:
    1af4:	b538      	push	{r3, r4, r5, lr}
    1af6:	4b31      	ldr	r3, [pc, #196]	; (1bbc <__swsetup_r+0xc8>)
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	4605      	mov	r5, r0
    1afc:	460c      	mov	r4, r1
    1afe:	b113      	cbz	r3, 1b06 <__swsetup_r+0x12>
    1b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1b02:	2a00      	cmp	r2, #0
    1b04:	d03a      	beq.n	1b7c <__swsetup_r+0x88>
    1b06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    1b0a:	b293      	uxth	r3, r2
    1b0c:	0718      	lsls	r0, r3, #28
    1b0e:	d50c      	bpl.n	1b2a <__swsetup_r+0x36>
    1b10:	6920      	ldr	r0, [r4, #16]
    1b12:	b1a8      	cbz	r0, 1b40 <__swsetup_r+0x4c>
    1b14:	f013 0201 	ands.w	r2, r3, #1
    1b18:	d020      	beq.n	1b5c <__swsetup_r+0x68>
    1b1a:	6963      	ldr	r3, [r4, #20]
    1b1c:	2200      	movs	r2, #0
    1b1e:	425b      	negs	r3, r3
    1b20:	61a3      	str	r3, [r4, #24]
    1b22:	60a2      	str	r2, [r4, #8]
    1b24:	b300      	cbz	r0, 1b68 <__swsetup_r+0x74>
    1b26:	2000      	movs	r0, #0
    1b28:	bd38      	pop	{r3, r4, r5, pc}
    1b2a:	06d9      	lsls	r1, r3, #27
    1b2c:	d53e      	bpl.n	1bac <__swsetup_r+0xb8>
    1b2e:	0758      	lsls	r0, r3, #29
    1b30:	d428      	bmi.n	1b84 <__swsetup_r+0x90>
    1b32:	6920      	ldr	r0, [r4, #16]
    1b34:	f042 0308 	orr.w	r3, r2, #8
    1b38:	81a3      	strh	r3, [r4, #12]
    1b3a:	b29b      	uxth	r3, r3
    1b3c:	2800      	cmp	r0, #0
    1b3e:	d1e9      	bne.n	1b14 <__swsetup_r+0x20>
    1b40:	f403 7220 	and.w	r2, r3, #640	; 0x280
    1b44:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1b48:	d0e4      	beq.n	1b14 <__swsetup_r+0x20>
    1b4a:	4628      	mov	r0, r5
    1b4c:	4621      	mov	r1, r4
    1b4e:	f000 fd1f 	bl	2590 <__smakebuf_r>
    1b52:	89a3      	ldrh	r3, [r4, #12]
    1b54:	6920      	ldr	r0, [r4, #16]
    1b56:	f013 0201 	ands.w	r2, r3, #1
    1b5a:	d1de      	bne.n	1b1a <__swsetup_r+0x26>
    1b5c:	0799      	lsls	r1, r3, #30
    1b5e:	bf58      	it	pl
    1b60:	6962      	ldrpl	r2, [r4, #20]
    1b62:	60a2      	str	r2, [r4, #8]
    1b64:	2800      	cmp	r0, #0
    1b66:	d1de      	bne.n	1b26 <__swsetup_r+0x32>
    1b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1b6c:	061a      	lsls	r2, r3, #24
    1b6e:	d5db      	bpl.n	1b28 <__swsetup_r+0x34>
    1b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1b74:	81a3      	strh	r3, [r4, #12]
    1b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b7a:	bd38      	pop	{r3, r4, r5, pc}
    1b7c:	4618      	mov	r0, r3
    1b7e:	f000 f925 	bl	1dcc <__sinit>
    1b82:	e7c0      	b.n	1b06 <__swsetup_r+0x12>
    1b84:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1b86:	b151      	cbz	r1, 1b9e <__swsetup_r+0xaa>
    1b88:	f104 0340 	add.w	r3, r4, #64	; 0x40
    1b8c:	4299      	cmp	r1, r3
    1b8e:	d004      	beq.n	1b9a <__swsetup_r+0xa6>
    1b90:	4628      	mov	r0, r5
    1b92:	f000 fa25 	bl	1fe0 <_free_r>
    1b96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    1b9a:	2300      	movs	r3, #0
    1b9c:	6323      	str	r3, [r4, #48]	; 0x30
    1b9e:	2300      	movs	r3, #0
    1ba0:	6920      	ldr	r0, [r4, #16]
    1ba2:	6063      	str	r3, [r4, #4]
    1ba4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
    1ba8:	6020      	str	r0, [r4, #0]
    1baa:	e7c3      	b.n	1b34 <__swsetup_r+0x40>
    1bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1bb0:	2309      	movs	r3, #9
    1bb2:	602b      	str	r3, [r5, #0]
    1bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1bb8:	81a2      	strh	r2, [r4, #12]
    1bba:	bd38      	pop	{r3, r4, r5, pc}
    1bbc:	20000000 	.word	0x20000000

00001bc0 <__sflush_r>:
    1bc0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    1bc4:	b29a      	uxth	r2, r3
    1bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bca:	460c      	mov	r4, r1
    1bcc:	0711      	lsls	r1, r2, #28
    1bce:	4680      	mov	r8, r0
    1bd0:	d444      	bmi.n	1c5c <__sflush_r+0x9c>
    1bd2:	6862      	ldr	r2, [r4, #4]
    1bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1bd8:	2a00      	cmp	r2, #0
    1bda:	81a3      	strh	r3, [r4, #12]
    1bdc:	dd59      	ble.n	1c92 <__sflush_r+0xd2>
    1bde:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    1be0:	2d00      	cmp	r5, #0
    1be2:	d053      	beq.n	1c8c <__sflush_r+0xcc>
    1be4:	2200      	movs	r2, #0
    1be6:	b29b      	uxth	r3, r3
    1be8:	f8d8 6000 	ldr.w	r6, [r8]
    1bec:	69e1      	ldr	r1, [r4, #28]
    1bee:	f8c8 2000 	str.w	r2, [r8]
    1bf2:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
    1bf6:	f040 8083 	bne.w	1d00 <__sflush_r+0x140>
    1bfa:	2301      	movs	r3, #1
    1bfc:	4640      	mov	r0, r8
    1bfe:	47a8      	blx	r5
    1c00:	1c42      	adds	r2, r0, #1
    1c02:	d04a      	beq.n	1c9a <__sflush_r+0xda>
    1c04:	89a3      	ldrh	r3, [r4, #12]
    1c06:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    1c08:	69e1      	ldr	r1, [r4, #28]
    1c0a:	075b      	lsls	r3, r3, #29
    1c0c:	d505      	bpl.n	1c1a <__sflush_r+0x5a>
    1c0e:	6862      	ldr	r2, [r4, #4]
    1c10:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1c12:	1a80      	subs	r0, r0, r2
    1c14:	b10b      	cbz	r3, 1c1a <__sflush_r+0x5a>
    1c16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1c18:	1ac0      	subs	r0, r0, r3
    1c1a:	4602      	mov	r2, r0
    1c1c:	2300      	movs	r3, #0
    1c1e:	4640      	mov	r0, r8
    1c20:	47a8      	blx	r5
    1c22:	1c47      	adds	r7, r0, #1
    1c24:	d045      	beq.n	1cb2 <__sflush_r+0xf2>
    1c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c2a:	6922      	ldr	r2, [r4, #16]
    1c2c:	6022      	str	r2, [r4, #0]
    1c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1c32:	2200      	movs	r2, #0
    1c34:	81a3      	strh	r3, [r4, #12]
    1c36:	04db      	lsls	r3, r3, #19
    1c38:	6062      	str	r2, [r4, #4]
    1c3a:	d500      	bpl.n	1c3e <__sflush_r+0x7e>
    1c3c:	6520      	str	r0, [r4, #80]	; 0x50
    1c3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1c40:	f8c8 6000 	str.w	r6, [r8]
    1c44:	b311      	cbz	r1, 1c8c <__sflush_r+0xcc>
    1c46:	f104 0340 	add.w	r3, r4, #64	; 0x40
    1c4a:	4299      	cmp	r1, r3
    1c4c:	d002      	beq.n	1c54 <__sflush_r+0x94>
    1c4e:	4640      	mov	r0, r8
    1c50:	f000 f9c6 	bl	1fe0 <_free_r>
    1c54:	2000      	movs	r0, #0
    1c56:	6320      	str	r0, [r4, #48]	; 0x30
    1c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c5c:	6926      	ldr	r6, [r4, #16]
    1c5e:	b1ae      	cbz	r6, 1c8c <__sflush_r+0xcc>
    1c60:	6825      	ldr	r5, [r4, #0]
    1c62:	6026      	str	r6, [r4, #0]
    1c64:	0792      	lsls	r2, r2, #30
    1c66:	bf0c      	ite	eq
    1c68:	6963      	ldreq	r3, [r4, #20]
    1c6a:	2300      	movne	r3, #0
    1c6c:	1bad      	subs	r5, r5, r6
    1c6e:	60a3      	str	r3, [r4, #8]
    1c70:	e00a      	b.n	1c88 <__sflush_r+0xc8>
    1c72:	462b      	mov	r3, r5
    1c74:	4632      	mov	r2, r6
    1c76:	6a67      	ldr	r7, [r4, #36]	; 0x24
    1c78:	69e1      	ldr	r1, [r4, #28]
    1c7a:	4640      	mov	r0, r8
    1c7c:	47b8      	blx	r7
    1c7e:	2800      	cmp	r0, #0
    1c80:	eba5 0500 	sub.w	r5, r5, r0
    1c84:	4406      	add	r6, r0
    1c86:	dd2b      	ble.n	1ce0 <__sflush_r+0x120>
    1c88:	2d00      	cmp	r5, #0
    1c8a:	dcf2      	bgt.n	1c72 <__sflush_r+0xb2>
    1c8c:	2000      	movs	r0, #0
    1c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1c94:	2a00      	cmp	r2, #0
    1c96:	dca2      	bgt.n	1bde <__sflush_r+0x1e>
    1c98:	e7f8      	b.n	1c8c <__sflush_r+0xcc>
    1c9a:	f8d8 3000 	ldr.w	r3, [r8]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d0b0      	beq.n	1c04 <__sflush_r+0x44>
    1ca2:	2b1d      	cmp	r3, #29
    1ca4:	d001      	beq.n	1caa <__sflush_r+0xea>
    1ca6:	2b16      	cmp	r3, #22
    1ca8:	d12c      	bne.n	1d04 <__sflush_r+0x144>
    1caa:	f8c8 6000 	str.w	r6, [r8]
    1cae:	2000      	movs	r0, #0
    1cb0:	e7ed      	b.n	1c8e <__sflush_r+0xce>
    1cb2:	f8d8 1000 	ldr.w	r1, [r8]
    1cb6:	291d      	cmp	r1, #29
    1cb8:	d81a      	bhi.n	1cf0 <__sflush_r+0x130>
    1cba:	4b15      	ldr	r3, [pc, #84]	; (1d10 <__sflush_r+0x150>)
    1cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    1cc0:	40cb      	lsrs	r3, r1
    1cc2:	43db      	mvns	r3, r3
    1cc4:	f013 0301 	ands.w	r3, r3, #1
    1cc8:	d114      	bne.n	1cf4 <__sflush_r+0x134>
    1cca:	6925      	ldr	r5, [r4, #16]
    1ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    1cd0:	e9c4 5300 	strd	r5, r3, [r4]
    1cd4:	04d5      	lsls	r5, r2, #19
    1cd6:	81a2      	strh	r2, [r4, #12]
    1cd8:	d5b1      	bpl.n	1c3e <__sflush_r+0x7e>
    1cda:	2900      	cmp	r1, #0
    1cdc:	d1af      	bne.n	1c3e <__sflush_r+0x7e>
    1cde:	e7ad      	b.n	1c3c <__sflush_r+0x7c>
    1ce0:	89a3      	ldrh	r3, [r4, #12]
    1ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ce6:	81a3      	strh	r3, [r4, #12]
    1ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    1cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1cf8:	81a2      	strh	r2, [r4, #12]
    1cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1cfe:	e7c6      	b.n	1c8e <__sflush_r+0xce>
    1d00:	6d20      	ldr	r0, [r4, #80]	; 0x50
    1d02:	e782      	b.n	1c0a <__sflush_r+0x4a>
    1d04:	89a3      	ldrh	r3, [r4, #12]
    1d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d0a:	81a3      	strh	r3, [r4, #12]
    1d0c:	e7bf      	b.n	1c8e <__sflush_r+0xce>
    1d0e:	bf00      	nop
    1d10:	20400001 	.word	0x20400001

00001d14 <_fflush_r>:
    1d14:	b538      	push	{r3, r4, r5, lr}
    1d16:	460d      	mov	r5, r1
    1d18:	4604      	mov	r4, r0
    1d1a:	b108      	cbz	r0, 1d20 <_fflush_r+0xc>
    1d1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1d1e:	b1a3      	cbz	r3, 1d4a <_fflush_r+0x36>
    1d20:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
    1d24:	b1b8      	cbz	r0, 1d56 <_fflush_r+0x42>
    1d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    1d28:	07db      	lsls	r3, r3, #31
    1d2a:	d401      	bmi.n	1d30 <_fflush_r+0x1c>
    1d2c:	0581      	lsls	r1, r0, #22
    1d2e:	d51a      	bpl.n	1d66 <_fflush_r+0x52>
    1d30:	4620      	mov	r0, r4
    1d32:	4629      	mov	r1, r5
    1d34:	f7ff ff44 	bl	1bc0 <__sflush_r>
    1d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    1d3a:	07da      	lsls	r2, r3, #31
    1d3c:	4604      	mov	r4, r0
    1d3e:	d402      	bmi.n	1d46 <_fflush_r+0x32>
    1d40:	89ab      	ldrh	r3, [r5, #12]
    1d42:	059b      	lsls	r3, r3, #22
    1d44:	d50a      	bpl.n	1d5c <_fflush_r+0x48>
    1d46:	4620      	mov	r0, r4
    1d48:	bd38      	pop	{r3, r4, r5, pc}
    1d4a:	f000 f83f 	bl	1dcc <__sinit>
    1d4e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
    1d52:	2800      	cmp	r0, #0
    1d54:	d1e7      	bne.n	1d26 <_fflush_r+0x12>
    1d56:	4604      	mov	r4, r0
    1d58:	4620      	mov	r0, r4
    1d5a:	bd38      	pop	{r3, r4, r5, pc}
    1d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    1d5e:	f7fe fae1 	bl	324 <__retarget_lock_release_recursive>
    1d62:	4620      	mov	r0, r4
    1d64:	bd38      	pop	{r3, r4, r5, pc}
    1d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
    1d68:	f7fe fada 	bl	320 <__retarget_lock_acquire_recursive>
    1d6c:	e7e0      	b.n	1d30 <_fflush_r+0x1c>
    1d6e:	bf00      	nop

00001d70 <std>:
    1d70:	b510      	push	{r4, lr}
    1d72:	2300      	movs	r3, #0
    1d74:	4604      	mov	r4, r0
    1d76:	8181      	strh	r1, [r0, #12]
    1d78:	81c2      	strh	r2, [r0, #14]
    1d7a:	e9c0 3300 	strd	r3, r3, [r0]
    1d7e:	6083      	str	r3, [r0, #8]
    1d80:	6643      	str	r3, [r0, #100]	; 0x64
    1d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
    1d86:	6183      	str	r3, [r0, #24]
    1d88:	4619      	mov	r1, r3
    1d8a:	2208      	movs	r2, #8
    1d8c:	305c      	adds	r0, #92	; 0x5c
    1d8e:	f7fe fa79 	bl	284 <memset>
    1d92:	4807      	ldr	r0, [pc, #28]	; (1db0 <std+0x40>)
    1d94:	4907      	ldr	r1, [pc, #28]	; (1db4 <std+0x44>)
    1d96:	4a08      	ldr	r2, [pc, #32]	; (1db8 <std+0x48>)
    1d98:	4b08      	ldr	r3, [pc, #32]	; (1dbc <std+0x4c>)
    1d9a:	62e3      	str	r3, [r4, #44]	; 0x2c
    1d9c:	e9c4 4007 	strd	r4, r0, [r4, #28]
    1da0:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
    1da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
    1da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1dac:	f7fe bab4 	b.w	318 <__retarget_lock_init_recursive>
    1db0:	000031d5 	.word	0x000031d5
    1db4:	000031f9 	.word	0x000031f9
    1db8:	00003235 	.word	0x00003235
    1dbc:	00003255 	.word	0x00003255

00001dc0 <_cleanup_r>:
    1dc0:	4901      	ldr	r1, [pc, #4]	; (1dc8 <_cleanup_r+0x8>)
    1dc2:	f000 bb7f 	b.w	24c4 <_fwalk_reent>
    1dc6:	bf00      	nop
    1dc8:	000034c9 	.word	0x000034c9

00001dcc <__sinit>:
    1dcc:	b510      	push	{r4, lr}
    1dce:	4604      	mov	r4, r0
    1dd0:	4812      	ldr	r0, [pc, #72]	; (1e1c <__sinit+0x50>)
    1dd2:	f7fe faa5 	bl	320 <__retarget_lock_acquire_recursive>
    1dd6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1dd8:	b9d2      	cbnz	r2, 1e10 <__sinit+0x44>
    1dda:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
    1dde:	4810      	ldr	r0, [pc, #64]	; (1e20 <__sinit+0x54>)
    1de0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
    1de4:	2103      	movs	r1, #3
    1de6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
    1dea:	63e0      	str	r0, [r4, #60]	; 0x3c
    1dec:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
    1df0:	6860      	ldr	r0, [r4, #4]
    1df2:	2104      	movs	r1, #4
    1df4:	f7ff ffbc 	bl	1d70 <std>
    1df8:	2201      	movs	r2, #1
    1dfa:	2109      	movs	r1, #9
    1dfc:	68a0      	ldr	r0, [r4, #8]
    1dfe:	f7ff ffb7 	bl	1d70 <std>
    1e02:	2202      	movs	r2, #2
    1e04:	2112      	movs	r1, #18
    1e06:	68e0      	ldr	r0, [r4, #12]
    1e08:	f7ff ffb2 	bl	1d70 <std>
    1e0c:	2301      	movs	r3, #1
    1e0e:	63a3      	str	r3, [r4, #56]	; 0x38
    1e10:	4802      	ldr	r0, [pc, #8]	; (1e1c <__sinit+0x50>)
    1e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e16:	f7fe ba85 	b.w	324 <__retarget_lock_release_recursive>
    1e1a:	bf00      	nop
    1e1c:	20001404 	.word	0x20001404
    1e20:	00001dc1 	.word	0x00001dc1

00001e24 <__sfp_lock_acquire>:
    1e24:	4801      	ldr	r0, [pc, #4]	; (1e2c <__sfp_lock_acquire+0x8>)
    1e26:	f7fe ba7b 	b.w	320 <__retarget_lock_acquire_recursive>
    1e2a:	bf00      	nop
    1e2c:	20001418 	.word	0x20001418

00001e30 <__sfp_lock_release>:
    1e30:	4801      	ldr	r0, [pc, #4]	; (1e38 <__sfp_lock_release+0x8>)
    1e32:	f7fe ba77 	b.w	324 <__retarget_lock_release_recursive>
    1e36:	bf00      	nop
    1e38:	20001418 	.word	0x20001418

00001e3c <__fputwc>:
    1e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e40:	b082      	sub	sp, #8
    1e42:	4681      	mov	r9, r0
    1e44:	4688      	mov	r8, r1
    1e46:	4614      	mov	r4, r2
    1e48:	f000 fb66 	bl	2518 <__locale_mb_cur_max>
    1e4c:	2801      	cmp	r0, #1
    1e4e:	d103      	bne.n	1e58 <__fputwc+0x1c>
    1e50:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    1e54:	2bfe      	cmp	r3, #254	; 0xfe
    1e56:	d933      	bls.n	1ec0 <__fputwc+0x84>
    1e58:	4642      	mov	r2, r8
    1e5a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    1e5e:	a901      	add	r1, sp, #4
    1e60:	4648      	mov	r0, r9
    1e62:	f001 fad3 	bl	340c <_wcrtomb_r>
    1e66:	1c42      	adds	r2, r0, #1
    1e68:	4606      	mov	r6, r0
    1e6a:	d02f      	beq.n	1ecc <__fputwc+0x90>
    1e6c:	b320      	cbz	r0, 1eb8 <__fputwc+0x7c>
    1e6e:	f89d c004 	ldrb.w	ip, [sp, #4]
    1e72:	2500      	movs	r5, #0
    1e74:	f10d 0a04 	add.w	sl, sp, #4
    1e78:	e009      	b.n	1e8e <__fputwc+0x52>
    1e7a:	6823      	ldr	r3, [r4, #0]
    1e7c:	1c5a      	adds	r2, r3, #1
    1e7e:	6022      	str	r2, [r4, #0]
    1e80:	f883 c000 	strb.w	ip, [r3]
    1e84:	3501      	adds	r5, #1
    1e86:	42b5      	cmp	r5, r6
    1e88:	d216      	bcs.n	1eb8 <__fputwc+0x7c>
    1e8a:	f815 c00a 	ldrb.w	ip, [r5, sl]
    1e8e:	68a3      	ldr	r3, [r4, #8]
    1e90:	3b01      	subs	r3, #1
    1e92:	2b00      	cmp	r3, #0
    1e94:	60a3      	str	r3, [r4, #8]
    1e96:	daf0      	bge.n	1e7a <__fputwc+0x3e>
    1e98:	69a7      	ldr	r7, [r4, #24]
    1e9a:	42bb      	cmp	r3, r7
    1e9c:	4661      	mov	r1, ip
    1e9e:	4622      	mov	r2, r4
    1ea0:	4648      	mov	r0, r9
    1ea2:	db02      	blt.n	1eaa <__fputwc+0x6e>
    1ea4:	f1bc 0f0a 	cmp.w	ip, #10
    1ea8:	d1e7      	bne.n	1e7a <__fputwc+0x3e>
    1eaa:	f001 fa57 	bl	335c <__swbuf_r>
    1eae:	1c43      	adds	r3, r0, #1
    1eb0:	d1e8      	bne.n	1e84 <__fputwc+0x48>
    1eb2:	b002      	add	sp, #8
    1eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1eb8:	4640      	mov	r0, r8
    1eba:	b002      	add	sp, #8
    1ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ec0:	fa5f fc88 	uxtb.w	ip, r8
    1ec4:	4606      	mov	r6, r0
    1ec6:	f88d c004 	strb.w	ip, [sp, #4]
    1eca:	e7d2      	b.n	1e72 <__fputwc+0x36>
    1ecc:	89a3      	ldrh	r3, [r4, #12]
    1ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ed2:	81a3      	strh	r3, [r4, #12]
    1ed4:	b002      	add	sp, #8
    1ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1eda:	bf00      	nop

00001edc <_fputwc_r>:
    1edc:	b530      	push	{r4, r5, lr}
    1ede:	4605      	mov	r5, r0
    1ee0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    1ee2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    1ee6:	07c0      	lsls	r0, r0, #31
    1ee8:	4614      	mov	r4, r2
    1eea:	b083      	sub	sp, #12
    1eec:	b29a      	uxth	r2, r3
    1eee:	d401      	bmi.n	1ef4 <_fputwc_r+0x18>
    1ef0:	0590      	lsls	r0, r2, #22
    1ef2:	d51c      	bpl.n	1f2e <_fputwc_r+0x52>
    1ef4:	0490      	lsls	r0, r2, #18
    1ef6:	d406      	bmi.n	1f06 <_fputwc_r+0x2a>
    1ef8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    1efa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1efe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    1f02:	81a3      	strh	r3, [r4, #12]
    1f04:	6662      	str	r2, [r4, #100]	; 0x64
    1f06:	4628      	mov	r0, r5
    1f08:	4622      	mov	r2, r4
    1f0a:	f7ff ff97 	bl	1e3c <__fputwc>
    1f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    1f10:	07da      	lsls	r2, r3, #31
    1f12:	4605      	mov	r5, r0
    1f14:	d402      	bmi.n	1f1c <_fputwc_r+0x40>
    1f16:	89a3      	ldrh	r3, [r4, #12]
    1f18:	059b      	lsls	r3, r3, #22
    1f1a:	d502      	bpl.n	1f22 <_fputwc_r+0x46>
    1f1c:	4628      	mov	r0, r5
    1f1e:	b003      	add	sp, #12
    1f20:	bd30      	pop	{r4, r5, pc}
    1f22:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1f24:	f7fe f9fe 	bl	324 <__retarget_lock_release_recursive>
    1f28:	4628      	mov	r0, r5
    1f2a:	b003      	add	sp, #12
    1f2c:	bd30      	pop	{r4, r5, pc}
    1f2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1f30:	9101      	str	r1, [sp, #4]
    1f32:	f7fe f9f5 	bl	320 <__retarget_lock_acquire_recursive>
    1f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1f3a:	9901      	ldr	r1, [sp, #4]
    1f3c:	b29a      	uxth	r2, r3
    1f3e:	e7d9      	b.n	1ef4 <_fputwc_r+0x18>

00001f40 <_malloc_trim_r>:
    1f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f42:	4f24      	ldr	r7, [pc, #144]	; (1fd4 <_malloc_trim_r+0x94>)
    1f44:	460c      	mov	r4, r1
    1f46:	4606      	mov	r6, r0
    1f48:	f000 ff78 	bl	2e3c <__malloc_lock>
    1f4c:	68bb      	ldr	r3, [r7, #8]
    1f4e:	685d      	ldr	r5, [r3, #4]
    1f50:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    1f54:	310f      	adds	r1, #15
    1f56:	f025 0503 	bic.w	r5, r5, #3
    1f5a:	4429      	add	r1, r5
    1f5c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    1f60:	f021 010f 	bic.w	r1, r1, #15
    1f64:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    1f68:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    1f6c:	db07      	blt.n	1f7e <_malloc_trim_r+0x3e>
    1f6e:	2100      	movs	r1, #0
    1f70:	4630      	mov	r0, r6
    1f72:	f001 f91d 	bl	31b0 <_sbrk_r>
    1f76:	68bb      	ldr	r3, [r7, #8]
    1f78:	442b      	add	r3, r5
    1f7a:	4298      	cmp	r0, r3
    1f7c:	d004      	beq.n	1f88 <_malloc_trim_r+0x48>
    1f7e:	4630      	mov	r0, r6
    1f80:	f000 ff62 	bl	2e48 <__malloc_unlock>
    1f84:	2000      	movs	r0, #0
    1f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f88:	4261      	negs	r1, r4
    1f8a:	4630      	mov	r0, r6
    1f8c:	f001 f910 	bl	31b0 <_sbrk_r>
    1f90:	3001      	adds	r0, #1
    1f92:	d00d      	beq.n	1fb0 <_malloc_trim_r+0x70>
    1f94:	4b10      	ldr	r3, [pc, #64]	; (1fd8 <_malloc_trim_r+0x98>)
    1f96:	68ba      	ldr	r2, [r7, #8]
    1f98:	6819      	ldr	r1, [r3, #0]
    1f9a:	1b2d      	subs	r5, r5, r4
    1f9c:	f045 0501 	orr.w	r5, r5, #1
    1fa0:	4630      	mov	r0, r6
    1fa2:	1b09      	subs	r1, r1, r4
    1fa4:	6055      	str	r5, [r2, #4]
    1fa6:	6019      	str	r1, [r3, #0]
    1fa8:	f000 ff4e 	bl	2e48 <__malloc_unlock>
    1fac:	2001      	movs	r0, #1
    1fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fb0:	2100      	movs	r1, #0
    1fb2:	4630      	mov	r0, r6
    1fb4:	f001 f8fc 	bl	31b0 <_sbrk_r>
    1fb8:	68ba      	ldr	r2, [r7, #8]
    1fba:	1a83      	subs	r3, r0, r2
    1fbc:	2b0f      	cmp	r3, #15
    1fbe:	ddde      	ble.n	1f7e <_malloc_trim_r+0x3e>
    1fc0:	4c06      	ldr	r4, [pc, #24]	; (1fdc <_malloc_trim_r+0x9c>)
    1fc2:	4905      	ldr	r1, [pc, #20]	; (1fd8 <_malloc_trim_r+0x98>)
    1fc4:	6824      	ldr	r4, [r4, #0]
    1fc6:	f043 0301 	orr.w	r3, r3, #1
    1fca:	1b00      	subs	r0, r0, r4
    1fcc:	6053      	str	r3, [r2, #4]
    1fce:	6008      	str	r0, [r1, #0]
    1fd0:	e7d5      	b.n	1f7e <_malloc_trim_r+0x3e>
    1fd2:	bf00      	nop
    1fd4:	2000059c 	.word	0x2000059c
    1fd8:	200012d0 	.word	0x200012d0
    1fdc:	200009a4 	.word	0x200009a4

00001fe0 <_free_r>:
    1fe0:	2900      	cmp	r1, #0
    1fe2:	d053      	beq.n	208c <_free_r+0xac>
    1fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fe6:	460c      	mov	r4, r1
    1fe8:	4606      	mov	r6, r0
    1fea:	f000 ff27 	bl	2e3c <__malloc_lock>
    1fee:	f854 cc04 	ldr.w	ip, [r4, #-4]
    1ff2:	4f71      	ldr	r7, [pc, #452]	; (21b8 <_free_r+0x1d8>)
    1ff4:	f02c 0101 	bic.w	r1, ip, #1
    1ff8:	f1a4 0508 	sub.w	r5, r4, #8
    1ffc:	186b      	adds	r3, r5, r1
    1ffe:	68b8      	ldr	r0, [r7, #8]
    2000:	685a      	ldr	r2, [r3, #4]
    2002:	4298      	cmp	r0, r3
    2004:	f022 0203 	bic.w	r2, r2, #3
    2008:	d053      	beq.n	20b2 <_free_r+0xd2>
    200a:	f01c 0f01 	tst.w	ip, #1
    200e:	605a      	str	r2, [r3, #4]
    2010:	eb03 0002 	add.w	r0, r3, r2
    2014:	d13b      	bne.n	208e <_free_r+0xae>
    2016:	f854 cc08 	ldr.w	ip, [r4, #-8]
    201a:	6840      	ldr	r0, [r0, #4]
    201c:	eba5 050c 	sub.w	r5, r5, ip
    2020:	f107 0e08 	add.w	lr, r7, #8
    2024:	68ac      	ldr	r4, [r5, #8]
    2026:	4574      	cmp	r4, lr
    2028:	4461      	add	r1, ip
    202a:	f000 0001 	and.w	r0, r0, #1
    202e:	d075      	beq.n	211c <_free_r+0x13c>
    2030:	f8d5 c00c 	ldr.w	ip, [r5, #12]
    2034:	f8c4 c00c 	str.w	ip, [r4, #12]
    2038:	f8cc 4008 	str.w	r4, [ip, #8]
    203c:	b360      	cbz	r0, 2098 <_free_r+0xb8>
    203e:	f041 0301 	orr.w	r3, r1, #1
    2042:	606b      	str	r3, [r5, #4]
    2044:	5069      	str	r1, [r5, r1]
    2046:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    204a:	d350      	bcc.n	20ee <_free_r+0x10e>
    204c:	0a4b      	lsrs	r3, r1, #9
    204e:	2b04      	cmp	r3, #4
    2050:	d870      	bhi.n	2134 <_free_r+0x154>
    2052:	098b      	lsrs	r3, r1, #6
    2054:	f103 0439 	add.w	r4, r3, #57	; 0x39
    2058:	00e4      	lsls	r4, r4, #3
    205a:	f103 0238 	add.w	r2, r3, #56	; 0x38
    205e:	1938      	adds	r0, r7, r4
    2060:	593b      	ldr	r3, [r7, r4]
    2062:	3808      	subs	r0, #8
    2064:	4298      	cmp	r0, r3
    2066:	d078      	beq.n	215a <_free_r+0x17a>
    2068:	685a      	ldr	r2, [r3, #4]
    206a:	f022 0203 	bic.w	r2, r2, #3
    206e:	428a      	cmp	r2, r1
    2070:	d971      	bls.n	2156 <_free_r+0x176>
    2072:	689b      	ldr	r3, [r3, #8]
    2074:	4298      	cmp	r0, r3
    2076:	d1f7      	bne.n	2068 <_free_r+0x88>
    2078:	68c3      	ldr	r3, [r0, #12]
    207a:	e9c5 0302 	strd	r0, r3, [r5, #8]
    207e:	609d      	str	r5, [r3, #8]
    2080:	60c5      	str	r5, [r0, #12]
    2082:	4630      	mov	r0, r6
    2084:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2088:	f000 bede 	b.w	2e48 <__malloc_unlock>
    208c:	4770      	bx	lr
    208e:	6840      	ldr	r0, [r0, #4]
    2090:	f000 0001 	and.w	r0, r0, #1
    2094:	2800      	cmp	r0, #0
    2096:	d1d2      	bne.n	203e <_free_r+0x5e>
    2098:	6898      	ldr	r0, [r3, #8]
    209a:	4c48      	ldr	r4, [pc, #288]	; (21bc <_free_r+0x1dc>)
    209c:	4411      	add	r1, r2
    209e:	42a0      	cmp	r0, r4
    20a0:	f041 0201 	orr.w	r2, r1, #1
    20a4:	d062      	beq.n	216c <_free_r+0x18c>
    20a6:	68db      	ldr	r3, [r3, #12]
    20a8:	60c3      	str	r3, [r0, #12]
    20aa:	6098      	str	r0, [r3, #8]
    20ac:	606a      	str	r2, [r5, #4]
    20ae:	5069      	str	r1, [r5, r1]
    20b0:	e7c9      	b.n	2046 <_free_r+0x66>
    20b2:	f01c 0f01 	tst.w	ip, #1
    20b6:	440a      	add	r2, r1
    20b8:	d107      	bne.n	20ca <_free_r+0xea>
    20ba:	f854 3c08 	ldr.w	r3, [r4, #-8]
    20be:	1aed      	subs	r5, r5, r3
    20c0:	441a      	add	r2, r3
    20c2:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
    20c6:	60cb      	str	r3, [r1, #12]
    20c8:	6099      	str	r1, [r3, #8]
    20ca:	4b3d      	ldr	r3, [pc, #244]	; (21c0 <_free_r+0x1e0>)
    20cc:	681b      	ldr	r3, [r3, #0]
    20ce:	f042 0101 	orr.w	r1, r2, #1
    20d2:	4293      	cmp	r3, r2
    20d4:	6069      	str	r1, [r5, #4]
    20d6:	60bd      	str	r5, [r7, #8]
    20d8:	d804      	bhi.n	20e4 <_free_r+0x104>
    20da:	4b3a      	ldr	r3, [pc, #232]	; (21c4 <_free_r+0x1e4>)
    20dc:	4630      	mov	r0, r6
    20de:	6819      	ldr	r1, [r3, #0]
    20e0:	f7ff ff2e 	bl	1f40 <_malloc_trim_r>
    20e4:	4630      	mov	r0, r6
    20e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    20ea:	f000 bead 	b.w	2e48 <__malloc_unlock>
    20ee:	08c9      	lsrs	r1, r1, #3
    20f0:	6878      	ldr	r0, [r7, #4]
    20f2:	1c4a      	adds	r2, r1, #1
    20f4:	2301      	movs	r3, #1
    20f6:	1089      	asrs	r1, r1, #2
    20f8:	408b      	lsls	r3, r1
    20fa:	4303      	orrs	r3, r0
    20fc:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
    2100:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
    2104:	607b      	str	r3, [r7, #4]
    2106:	3908      	subs	r1, #8
    2108:	e9c5 0102 	strd	r0, r1, [r5, #8]
    210c:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
    2110:	60c5      	str	r5, [r0, #12]
    2112:	4630      	mov	r0, r6
    2114:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2118:	f000 be96 	b.w	2e48 <__malloc_unlock>
    211c:	2800      	cmp	r0, #0
    211e:	d145      	bne.n	21ac <_free_r+0x1cc>
    2120:	440a      	add	r2, r1
    2122:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    2126:	f042 0001 	orr.w	r0, r2, #1
    212a:	60cb      	str	r3, [r1, #12]
    212c:	6099      	str	r1, [r3, #8]
    212e:	6068      	str	r0, [r5, #4]
    2130:	50aa      	str	r2, [r5, r2]
    2132:	e7d7      	b.n	20e4 <_free_r+0x104>
    2134:	2b14      	cmp	r3, #20
    2136:	d908      	bls.n	214a <_free_r+0x16a>
    2138:	2b54      	cmp	r3, #84	; 0x54
    213a:	d81e      	bhi.n	217a <_free_r+0x19a>
    213c:	0b0b      	lsrs	r3, r1, #12
    213e:	f103 046f 	add.w	r4, r3, #111	; 0x6f
    2142:	00e4      	lsls	r4, r4, #3
    2144:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    2148:	e789      	b.n	205e <_free_r+0x7e>
    214a:	f103 045c 	add.w	r4, r3, #92	; 0x5c
    214e:	00e4      	lsls	r4, r4, #3
    2150:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    2154:	e783      	b.n	205e <_free_r+0x7e>
    2156:	4618      	mov	r0, r3
    2158:	e78e      	b.n	2078 <_free_r+0x98>
    215a:	1093      	asrs	r3, r2, #2
    215c:	6879      	ldr	r1, [r7, #4]
    215e:	2201      	movs	r2, #1
    2160:	fa02 f303 	lsl.w	r3, r2, r3
    2164:	430b      	orrs	r3, r1
    2166:	607b      	str	r3, [r7, #4]
    2168:	4603      	mov	r3, r0
    216a:	e786      	b.n	207a <_free_r+0x9a>
    216c:	e9c7 5504 	strd	r5, r5, [r7, #16]
    2170:	e9c5 0002 	strd	r0, r0, [r5, #8]
    2174:	606a      	str	r2, [r5, #4]
    2176:	5069      	str	r1, [r5, r1]
    2178:	e7b4      	b.n	20e4 <_free_r+0x104>
    217a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    217e:	d806      	bhi.n	218e <_free_r+0x1ae>
    2180:	0bcb      	lsrs	r3, r1, #15
    2182:	f103 0478 	add.w	r4, r3, #120	; 0x78
    2186:	00e4      	lsls	r4, r4, #3
    2188:	f103 0277 	add.w	r2, r3, #119	; 0x77
    218c:	e767      	b.n	205e <_free_r+0x7e>
    218e:	f240 5254 	movw	r2, #1364	; 0x554
    2192:	4293      	cmp	r3, r2
    2194:	d806      	bhi.n	21a4 <_free_r+0x1c4>
    2196:	0c8b      	lsrs	r3, r1, #18
    2198:	f103 047d 	add.w	r4, r3, #125	; 0x7d
    219c:	00e4      	lsls	r4, r4, #3
    219e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    21a2:	e75c      	b.n	205e <_free_r+0x7e>
    21a4:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
    21a8:	227e      	movs	r2, #126	; 0x7e
    21aa:	e758      	b.n	205e <_free_r+0x7e>
    21ac:	f041 0201 	orr.w	r2, r1, #1
    21b0:	606a      	str	r2, [r5, #4]
    21b2:	6019      	str	r1, [r3, #0]
    21b4:	e796      	b.n	20e4 <_free_r+0x104>
    21b6:	bf00      	nop
    21b8:	2000059c 	.word	0x2000059c
    21bc:	200005a4 	.word	0x200005a4
    21c0:	200009a8 	.word	0x200009a8
    21c4:	20001300 	.word	0x20001300

000021c8 <__sfvwrite_r>:
    21c8:	6893      	ldr	r3, [r2, #8]
    21ca:	2b00      	cmp	r3, #0
    21cc:	f000 80e4 	beq.w	2398 <__sfvwrite_r+0x1d0>
    21d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21d4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    21d8:	b29b      	uxth	r3, r3
    21da:	460c      	mov	r4, r1
    21dc:	0719      	lsls	r1, r3, #28
    21de:	b083      	sub	sp, #12
    21e0:	4682      	mov	sl, r0
    21e2:	4690      	mov	r8, r2
    21e4:	d535      	bpl.n	2252 <__sfvwrite_r+0x8a>
    21e6:	6922      	ldr	r2, [r4, #16]
    21e8:	b39a      	cbz	r2, 2252 <__sfvwrite_r+0x8a>
    21ea:	f013 0202 	ands.w	r2, r3, #2
    21ee:	f8d8 6000 	ldr.w	r6, [r8]
    21f2:	d03d      	beq.n	2270 <__sfvwrite_r+0xa8>
    21f4:	2700      	movs	r7, #0
    21f6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
    21fa:	f8d4 c01c 	ldr.w	ip, [r4, #28]
    21fe:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 24c0 <__sfvwrite_r+0x2f8>
    2202:	463d      	mov	r5, r7
    2204:	454d      	cmp	r5, r9
    2206:	462b      	mov	r3, r5
    2208:	463a      	mov	r2, r7
    220a:	bf28      	it	cs
    220c:	464b      	movcs	r3, r9
    220e:	4661      	mov	r1, ip
    2210:	4650      	mov	r0, sl
    2212:	b1d5      	cbz	r5, 224a <__sfvwrite_r+0x82>
    2214:	47d8      	blx	fp
    2216:	2800      	cmp	r0, #0
    2218:	f340 80c6 	ble.w	23a8 <__sfvwrite_r+0x1e0>
    221c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2220:	1a1b      	subs	r3, r3, r0
    2222:	4407      	add	r7, r0
    2224:	1a2d      	subs	r5, r5, r0
    2226:	f8c8 3008 	str.w	r3, [r8, #8]
    222a:	2b00      	cmp	r3, #0
    222c:	f000 80b0 	beq.w	2390 <__sfvwrite_r+0x1c8>
    2230:	f8d4 c01c 	ldr.w	ip, [r4, #28]
    2234:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
    2238:	454d      	cmp	r5, r9
    223a:	462b      	mov	r3, r5
    223c:	463a      	mov	r2, r7
    223e:	bf28      	it	cs
    2240:	464b      	movcs	r3, r9
    2242:	4661      	mov	r1, ip
    2244:	4650      	mov	r0, sl
    2246:	2d00      	cmp	r5, #0
    2248:	d1e4      	bne.n	2214 <__sfvwrite_r+0x4c>
    224a:	e9d6 7500 	ldrd	r7, r5, [r6]
    224e:	3608      	adds	r6, #8
    2250:	e7d8      	b.n	2204 <__sfvwrite_r+0x3c>
    2252:	4621      	mov	r1, r4
    2254:	4650      	mov	r0, sl
    2256:	f7ff fc4d 	bl	1af4 <__swsetup_r>
    225a:	2800      	cmp	r0, #0
    225c:	f040 812a 	bne.w	24b4 <__sfvwrite_r+0x2ec>
    2260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2264:	f8d8 6000 	ldr.w	r6, [r8]
    2268:	b29b      	uxth	r3, r3
    226a:	f013 0202 	ands.w	r2, r3, #2
    226e:	d1c1      	bne.n	21f4 <__sfvwrite_r+0x2c>
    2270:	f013 0901 	ands.w	r9, r3, #1
    2274:	d15d      	bne.n	2332 <__sfvwrite_r+0x16a>
    2276:	68a7      	ldr	r7, [r4, #8]
    2278:	6820      	ldr	r0, [r4, #0]
    227a:	464d      	mov	r5, r9
    227c:	2d00      	cmp	r5, #0
    227e:	d054      	beq.n	232a <__sfvwrite_r+0x162>
    2280:	059a      	lsls	r2, r3, #22
    2282:	f140 809b 	bpl.w	23bc <__sfvwrite_r+0x1f4>
    2286:	42af      	cmp	r7, r5
    2288:	46bb      	mov	fp, r7
    228a:	f200 80d8 	bhi.w	243e <__sfvwrite_r+0x276>
    228e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    2292:	d02f      	beq.n	22f4 <__sfvwrite_r+0x12c>
    2294:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
    2298:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    229c:	eba0 0b01 	sub.w	fp, r0, r1
    22a0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    22a4:	1c68      	adds	r0, r5, #1
    22a6:	107f      	asrs	r7, r7, #1
    22a8:	4458      	add	r0, fp
    22aa:	42b8      	cmp	r0, r7
    22ac:	463a      	mov	r2, r7
    22ae:	bf84      	itt	hi
    22b0:	4607      	movhi	r7, r0
    22b2:	463a      	movhi	r2, r7
    22b4:	055b      	lsls	r3, r3, #21
    22b6:	f140 80d3 	bpl.w	2460 <__sfvwrite_r+0x298>
    22ba:	4611      	mov	r1, r2
    22bc:	4650      	mov	r0, sl
    22be:	f000 f9b1 	bl	2624 <_malloc_r>
    22c2:	2800      	cmp	r0, #0
    22c4:	f000 80f0 	beq.w	24a8 <__sfvwrite_r+0x2e0>
    22c8:	465a      	mov	r2, fp
    22ca:	6921      	ldr	r1, [r4, #16]
    22cc:	9001      	str	r0, [sp, #4]
    22ce:	f000 fcb7 	bl	2c40 <memcpy>
    22d2:	89a2      	ldrh	r2, [r4, #12]
    22d4:	9b01      	ldr	r3, [sp, #4]
    22d6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    22da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    22de:	81a2      	strh	r2, [r4, #12]
    22e0:	eba7 020b 	sub.w	r2, r7, fp
    22e4:	eb03 000b 	add.w	r0, r3, fp
    22e8:	6167      	str	r7, [r4, #20]
    22ea:	6123      	str	r3, [r4, #16]
    22ec:	6020      	str	r0, [r4, #0]
    22ee:	60a2      	str	r2, [r4, #8]
    22f0:	462f      	mov	r7, r5
    22f2:	46ab      	mov	fp, r5
    22f4:	465a      	mov	r2, fp
    22f6:	4649      	mov	r1, r9
    22f8:	f000 fd3c 	bl	2d74 <memmove>
    22fc:	68a2      	ldr	r2, [r4, #8]
    22fe:	6823      	ldr	r3, [r4, #0]
    2300:	1bd2      	subs	r2, r2, r7
    2302:	445b      	add	r3, fp
    2304:	462f      	mov	r7, r5
    2306:	60a2      	str	r2, [r4, #8]
    2308:	6023      	str	r3, [r4, #0]
    230a:	2500      	movs	r5, #0
    230c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2310:	1bdb      	subs	r3, r3, r7
    2312:	44b9      	add	r9, r7
    2314:	f8c8 3008 	str.w	r3, [r8, #8]
    2318:	2b00      	cmp	r3, #0
    231a:	d039      	beq.n	2390 <__sfvwrite_r+0x1c8>
    231c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2320:	68a7      	ldr	r7, [r4, #8]
    2322:	6820      	ldr	r0, [r4, #0]
    2324:	b29b      	uxth	r3, r3
    2326:	2d00      	cmp	r5, #0
    2328:	d1aa      	bne.n	2280 <__sfvwrite_r+0xb8>
    232a:	e9d6 9500 	ldrd	r9, r5, [r6]
    232e:	3608      	adds	r6, #8
    2330:	e7a4      	b.n	227c <__sfvwrite_r+0xb4>
    2332:	4633      	mov	r3, r6
    2334:	4691      	mov	r9, r2
    2336:	4610      	mov	r0, r2
    2338:	4617      	mov	r7, r2
    233a:	464e      	mov	r6, r9
    233c:	469b      	mov	fp, r3
    233e:	2f00      	cmp	r7, #0
    2340:	d06b      	beq.n	241a <__sfvwrite_r+0x252>
    2342:	2800      	cmp	r0, #0
    2344:	d071      	beq.n	242a <__sfvwrite_r+0x262>
    2346:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    234a:	6820      	ldr	r0, [r4, #0]
    234c:	45b9      	cmp	r9, r7
    234e:	464b      	mov	r3, r9
    2350:	bf28      	it	cs
    2352:	463b      	movcs	r3, r7
    2354:	4288      	cmp	r0, r1
    2356:	d903      	bls.n	2360 <__sfvwrite_r+0x198>
    2358:	68a5      	ldr	r5, [r4, #8]
    235a:	4415      	add	r5, r2
    235c:	42ab      	cmp	r3, r5
    235e:	dc71      	bgt.n	2444 <__sfvwrite_r+0x27c>
    2360:	429a      	cmp	r2, r3
    2362:	f300 8093 	bgt.w	248c <__sfvwrite_r+0x2c4>
    2366:	4613      	mov	r3, r2
    2368:	6a65      	ldr	r5, [r4, #36]	; 0x24
    236a:	69e1      	ldr	r1, [r4, #28]
    236c:	4632      	mov	r2, r6
    236e:	4650      	mov	r0, sl
    2370:	47a8      	blx	r5
    2372:	1e05      	subs	r5, r0, #0
    2374:	dd18      	ble.n	23a8 <__sfvwrite_r+0x1e0>
    2376:	ebb9 0905 	subs.w	r9, r9, r5
    237a:	d00f      	beq.n	239c <__sfvwrite_r+0x1d4>
    237c:	2001      	movs	r0, #1
    237e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2382:	1b5b      	subs	r3, r3, r5
    2384:	442e      	add	r6, r5
    2386:	1b7f      	subs	r7, r7, r5
    2388:	f8c8 3008 	str.w	r3, [r8, #8]
    238c:	2b00      	cmp	r3, #0
    238e:	d1d6      	bne.n	233e <__sfvwrite_r+0x176>
    2390:	2000      	movs	r0, #0
    2392:	b003      	add	sp, #12
    2394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2398:	2000      	movs	r0, #0
    239a:	4770      	bx	lr
    239c:	4621      	mov	r1, r4
    239e:	4650      	mov	r0, sl
    23a0:	f7ff fcb8 	bl	1d14 <_fflush_r>
    23a4:	2800      	cmp	r0, #0
    23a6:	d0ea      	beq.n	237e <__sfvwrite_r+0x1b6>
    23a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    23ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    23b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    23b4:	81a3      	strh	r3, [r4, #12]
    23b6:	b003      	add	sp, #12
    23b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23bc:	6923      	ldr	r3, [r4, #16]
    23be:	4283      	cmp	r3, r0
    23c0:	d315      	bcc.n	23ee <__sfvwrite_r+0x226>
    23c2:	6961      	ldr	r1, [r4, #20]
    23c4:	42a9      	cmp	r1, r5
    23c6:	d812      	bhi.n	23ee <__sfvwrite_r+0x226>
    23c8:	4b3c      	ldr	r3, [pc, #240]	; (24bc <__sfvwrite_r+0x2f4>)
    23ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
    23cc:	429d      	cmp	r5, r3
    23ce:	bf94      	ite	ls
    23d0:	462b      	movls	r3, r5
    23d2:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
    23d6:	464a      	mov	r2, r9
    23d8:	fb93 f3f1 	sdiv	r3, r3, r1
    23dc:	4650      	mov	r0, sl
    23de:	fb01 f303 	mul.w	r3, r1, r3
    23e2:	69e1      	ldr	r1, [r4, #28]
    23e4:	47b8      	blx	r7
    23e6:	1e07      	subs	r7, r0, #0
    23e8:	ddde      	ble.n	23a8 <__sfvwrite_r+0x1e0>
    23ea:	1bed      	subs	r5, r5, r7
    23ec:	e78e      	b.n	230c <__sfvwrite_r+0x144>
    23ee:	42af      	cmp	r7, r5
    23f0:	bf28      	it	cs
    23f2:	462f      	movcs	r7, r5
    23f4:	463a      	mov	r2, r7
    23f6:	4649      	mov	r1, r9
    23f8:	f000 fcbc 	bl	2d74 <memmove>
    23fc:	68a3      	ldr	r3, [r4, #8]
    23fe:	6822      	ldr	r2, [r4, #0]
    2400:	1bdb      	subs	r3, r3, r7
    2402:	443a      	add	r2, r7
    2404:	60a3      	str	r3, [r4, #8]
    2406:	6022      	str	r2, [r4, #0]
    2408:	2b00      	cmp	r3, #0
    240a:	d1ee      	bne.n	23ea <__sfvwrite_r+0x222>
    240c:	4621      	mov	r1, r4
    240e:	4650      	mov	r0, sl
    2410:	f7ff fc80 	bl	1d14 <_fflush_r>
    2414:	2800      	cmp	r0, #0
    2416:	d0e8      	beq.n	23ea <__sfvwrite_r+0x222>
    2418:	e7c6      	b.n	23a8 <__sfvwrite_r+0x1e0>
    241a:	f10b 0308 	add.w	r3, fp, #8
    241e:	e953 6702 	ldrd	r6, r7, [r3, #-8]
    2422:	469b      	mov	fp, r3
    2424:	3308      	adds	r3, #8
    2426:	2f00      	cmp	r7, #0
    2428:	d0f9      	beq.n	241e <__sfvwrite_r+0x256>
    242a:	463a      	mov	r2, r7
    242c:	210a      	movs	r1, #10
    242e:	4630      	mov	r0, r6
    2430:	f000 fbb6 	bl	2ba0 <memchr>
    2434:	b338      	cbz	r0, 2486 <__sfvwrite_r+0x2be>
    2436:	3001      	adds	r0, #1
    2438:	eba0 0906 	sub.w	r9, r0, r6
    243c:	e783      	b.n	2346 <__sfvwrite_r+0x17e>
    243e:	462f      	mov	r7, r5
    2440:	46ab      	mov	fp, r5
    2442:	e757      	b.n	22f4 <__sfvwrite_r+0x12c>
    2444:	4631      	mov	r1, r6
    2446:	462a      	mov	r2, r5
    2448:	f000 fc94 	bl	2d74 <memmove>
    244c:	6823      	ldr	r3, [r4, #0]
    244e:	442b      	add	r3, r5
    2450:	6023      	str	r3, [r4, #0]
    2452:	4621      	mov	r1, r4
    2454:	4650      	mov	r0, sl
    2456:	f7ff fc5d 	bl	1d14 <_fflush_r>
    245a:	2800      	cmp	r0, #0
    245c:	d08b      	beq.n	2376 <__sfvwrite_r+0x1ae>
    245e:	e7a3      	b.n	23a8 <__sfvwrite_r+0x1e0>
    2460:	4650      	mov	r0, sl
    2462:	f000 fcf7 	bl	2e54 <_realloc_r>
    2466:	4603      	mov	r3, r0
    2468:	2800      	cmp	r0, #0
    246a:	f47f af39 	bne.w	22e0 <__sfvwrite_r+0x118>
    246e:	6921      	ldr	r1, [r4, #16]
    2470:	4650      	mov	r0, sl
    2472:	f7ff fdb5 	bl	1fe0 <_free_r>
    2476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    247a:	220c      	movs	r2, #12
    247c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2480:	f8ca 2000 	str.w	r2, [sl]
    2484:	e792      	b.n	23ac <__sfvwrite_r+0x1e4>
    2486:	f107 0901 	add.w	r9, r7, #1
    248a:	e75c      	b.n	2346 <__sfvwrite_r+0x17e>
    248c:	461a      	mov	r2, r3
    248e:	4631      	mov	r1, r6
    2490:	9301      	str	r3, [sp, #4]
    2492:	f000 fc6f 	bl	2d74 <memmove>
    2496:	9b01      	ldr	r3, [sp, #4]
    2498:	68a1      	ldr	r1, [r4, #8]
    249a:	6822      	ldr	r2, [r4, #0]
    249c:	1ac9      	subs	r1, r1, r3
    249e:	441a      	add	r2, r3
    24a0:	60a1      	str	r1, [r4, #8]
    24a2:	6022      	str	r2, [r4, #0]
    24a4:	461d      	mov	r5, r3
    24a6:	e766      	b.n	2376 <__sfvwrite_r+0x1ae>
    24a8:	230c      	movs	r3, #12
    24aa:	f8ca 3000 	str.w	r3, [sl]
    24ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    24b2:	e77b      	b.n	23ac <__sfvwrite_r+0x1e4>
    24b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    24b8:	e76b      	b.n	2392 <__sfvwrite_r+0x1ca>
    24ba:	bf00      	nop
    24bc:	7ffffffe 	.word	0x7ffffffe
    24c0:	7ffffc00 	.word	0x7ffffc00

000024c4 <_fwalk_reent>:
    24c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24c8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
    24cc:	d01f      	beq.n	250e <_fwalk_reent+0x4a>
    24ce:	4688      	mov	r8, r1
    24d0:	4606      	mov	r6, r0
    24d2:	f04f 0900 	mov.w	r9, #0
    24d6:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
    24da:	3d01      	subs	r5, #1
    24dc:	d411      	bmi.n	2502 <_fwalk_reent+0x3e>
    24de:	89a3      	ldrh	r3, [r4, #12]
    24e0:	2b01      	cmp	r3, #1
    24e2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    24e6:	4621      	mov	r1, r4
    24e8:	4630      	mov	r0, r6
    24ea:	d906      	bls.n	24fa <_fwalk_reent+0x36>
    24ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    24f0:	3301      	adds	r3, #1
    24f2:	d002      	beq.n	24fa <_fwalk_reent+0x36>
    24f4:	47c0      	blx	r8
    24f6:	ea49 0900 	orr.w	r9, r9, r0
    24fa:	1c6b      	adds	r3, r5, #1
    24fc:	f104 0468 	add.w	r4, r4, #104	; 0x68
    2500:	d1ed      	bne.n	24de <_fwalk_reent+0x1a>
    2502:	683f      	ldr	r7, [r7, #0]
    2504:	2f00      	cmp	r7, #0
    2506:	d1e6      	bne.n	24d6 <_fwalk_reent+0x12>
    2508:	4648      	mov	r0, r9
    250a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    250e:	46b9      	mov	r9, r7
    2510:	4648      	mov	r0, r9
    2512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2516:	bf00      	nop

00002518 <__locale_mb_cur_max>:
    2518:	4b04      	ldr	r3, [pc, #16]	; (252c <__locale_mb_cur_max+0x14>)
    251a:	4a05      	ldr	r2, [pc, #20]	; (2530 <__locale_mb_cur_max+0x18>)
    251c:	681b      	ldr	r3, [r3, #0]
    251e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2520:	2b00      	cmp	r3, #0
    2522:	bf08      	it	eq
    2524:	4613      	moveq	r3, r2
    2526:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    252a:	4770      	bx	lr
    252c:	20000000 	.word	0x20000000
    2530:	20000430 	.word	0x20000430

00002534 <__swhatbuf_r>:
    2534:	b570      	push	{r4, r5, r6, lr}
    2536:	460c      	mov	r4, r1
    2538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    253c:	2900      	cmp	r1, #0
    253e:	b096      	sub	sp, #88	; 0x58
    2540:	4615      	mov	r5, r2
    2542:	461e      	mov	r6, r3
    2544:	da0f      	bge.n	2566 <__swhatbuf_r+0x32>
    2546:	89a2      	ldrh	r2, [r4, #12]
    2548:	2300      	movs	r3, #0
    254a:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    254e:	6033      	str	r3, [r6, #0]
    2550:	d104      	bne.n	255c <__swhatbuf_r+0x28>
    2552:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2556:	602b      	str	r3, [r5, #0]
    2558:	b016      	add	sp, #88	; 0x58
    255a:	bd70      	pop	{r4, r5, r6, pc}
    255c:	2240      	movs	r2, #64	; 0x40
    255e:	4618      	mov	r0, r3
    2560:	602a      	str	r2, [r5, #0]
    2562:	b016      	add	sp, #88	; 0x58
    2564:	bd70      	pop	{r4, r5, r6, pc}
    2566:	466a      	mov	r2, sp
    2568:	f001 f816 	bl	3598 <_fstat_r>
    256c:	2800      	cmp	r0, #0
    256e:	dbea      	blt.n	2546 <__swhatbuf_r+0x12>
    2570:	9b01      	ldr	r3, [sp, #4]
    2572:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    2576:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    257a:	fab3 f383 	clz	r3, r3
    257e:	095b      	lsrs	r3, r3, #5
    2580:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2584:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2588:	6033      	str	r3, [r6, #0]
    258a:	602a      	str	r2, [r5, #0]
    258c:	b016      	add	sp, #88	; 0x58
    258e:	bd70      	pop	{r4, r5, r6, pc}

00002590 <__smakebuf_r>:
    2590:	898a      	ldrh	r2, [r1, #12]
    2592:	0792      	lsls	r2, r2, #30
    2594:	460b      	mov	r3, r1
    2596:	d506      	bpl.n	25a6 <__smakebuf_r+0x16>
    2598:	f101 0243 	add.w	r2, r1, #67	; 0x43
    259c:	2101      	movs	r1, #1
    259e:	601a      	str	r2, [r3, #0]
    25a0:	e9c3 2104 	strd	r2, r1, [r3, #16]
    25a4:	4770      	bx	lr
    25a6:	b570      	push	{r4, r5, r6, lr}
    25a8:	b082      	sub	sp, #8
    25aa:	ab01      	add	r3, sp, #4
    25ac:	466a      	mov	r2, sp
    25ae:	460c      	mov	r4, r1
    25b0:	4605      	mov	r5, r0
    25b2:	f7ff ffbf 	bl	2534 <__swhatbuf_r>
    25b6:	9900      	ldr	r1, [sp, #0]
    25b8:	4606      	mov	r6, r0
    25ba:	4628      	mov	r0, r5
    25bc:	f000 f832 	bl	2624 <_malloc_r>
    25c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    25c4:	b1d8      	cbz	r0, 25fe <__smakebuf_r+0x6e>
    25c6:	4916      	ldr	r1, [pc, #88]	; (2620 <__smakebuf_r+0x90>)
    25c8:	63e9      	str	r1, [r5, #60]	; 0x3c
    25ca:	9a01      	ldr	r2, [sp, #4]
    25cc:	9900      	ldr	r1, [sp, #0]
    25ce:	6020      	str	r0, [r4, #0]
    25d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    25d4:	81a3      	strh	r3, [r4, #12]
    25d6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    25da:	b91a      	cbnz	r2, 25e4 <__smakebuf_r+0x54>
    25dc:	4333      	orrs	r3, r6
    25de:	81a3      	strh	r3, [r4, #12]
    25e0:	b002      	add	sp, #8
    25e2:	bd70      	pop	{r4, r5, r6, pc}
    25e4:	4628      	mov	r0, r5
    25e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    25ea:	f000 ffe9 	bl	35c0 <_isatty_r>
    25ee:	b1a0      	cbz	r0, 261a <__smakebuf_r+0x8a>
    25f0:	89a3      	ldrh	r3, [r4, #12]
    25f2:	f023 0303 	bic.w	r3, r3, #3
    25f6:	f043 0301 	orr.w	r3, r3, #1
    25fa:	b21b      	sxth	r3, r3
    25fc:	e7ee      	b.n	25dc <__smakebuf_r+0x4c>
    25fe:	059a      	lsls	r2, r3, #22
    2600:	d4ee      	bmi.n	25e0 <__smakebuf_r+0x50>
    2602:	f023 0303 	bic.w	r3, r3, #3
    2606:	f104 0243 	add.w	r2, r4, #67	; 0x43
    260a:	f043 0302 	orr.w	r3, r3, #2
    260e:	2101      	movs	r1, #1
    2610:	81a3      	strh	r3, [r4, #12]
    2612:	6022      	str	r2, [r4, #0]
    2614:	e9c4 2104 	strd	r2, r1, [r4, #16]
    2618:	e7e2      	b.n	25e0 <__smakebuf_r+0x50>
    261a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    261e:	e7dd      	b.n	25dc <__smakebuf_r+0x4c>
    2620:	00001dc1 	.word	0x00001dc1

00002624 <_malloc_r>:
    2624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2628:	f101 050b 	add.w	r5, r1, #11
    262c:	2d16      	cmp	r5, #22
    262e:	b083      	sub	sp, #12
    2630:	4606      	mov	r6, r0
    2632:	d823      	bhi.n	267c <_malloc_r+0x58>
    2634:	2910      	cmp	r1, #16
    2636:	f200 80b9 	bhi.w	27ac <_malloc_r+0x188>
    263a:	f000 fbff 	bl	2e3c <__malloc_lock>
    263e:	2510      	movs	r5, #16
    2640:	2318      	movs	r3, #24
    2642:	2002      	movs	r0, #2
    2644:	4fc5      	ldr	r7, [pc, #788]	; (295c <_malloc_r+0x338>)
    2646:	443b      	add	r3, r7
    2648:	f1a3 0208 	sub.w	r2, r3, #8
    264c:	685c      	ldr	r4, [r3, #4]
    264e:	4294      	cmp	r4, r2
    2650:	f000 8166 	beq.w	2920 <_malloc_r+0x2fc>
    2654:	6863      	ldr	r3, [r4, #4]
    2656:	f023 0303 	bic.w	r3, r3, #3
    265a:	4423      	add	r3, r4
    265c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    2660:	685a      	ldr	r2, [r3, #4]
    2662:	60e9      	str	r1, [r5, #12]
    2664:	f042 0201 	orr.w	r2, r2, #1
    2668:	608d      	str	r5, [r1, #8]
    266a:	4630      	mov	r0, r6
    266c:	605a      	str	r2, [r3, #4]
    266e:	f000 fbeb 	bl	2e48 <__malloc_unlock>
    2672:	3408      	adds	r4, #8
    2674:	4620      	mov	r0, r4
    2676:	b003      	add	sp, #12
    2678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    267c:	f035 0507 	bics.w	r5, r5, #7
    2680:	f100 8094 	bmi.w	27ac <_malloc_r+0x188>
    2684:	42a9      	cmp	r1, r5
    2686:	f200 8091 	bhi.w	27ac <_malloc_r+0x188>
    268a:	f000 fbd7 	bl	2e3c <__malloc_lock>
    268e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    2692:	f0c0 8183 	bcc.w	299c <_malloc_r+0x378>
    2696:	0a6b      	lsrs	r3, r5, #9
    2698:	f000 808f 	beq.w	27ba <_malloc_r+0x196>
    269c:	2b04      	cmp	r3, #4
    269e:	f200 8146 	bhi.w	292e <_malloc_r+0x30a>
    26a2:	09ab      	lsrs	r3, r5, #6
    26a4:	f103 0039 	add.w	r0, r3, #57	; 0x39
    26a8:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    26ac:	00c3      	lsls	r3, r0, #3
    26ae:	4fab      	ldr	r7, [pc, #684]	; (295c <_malloc_r+0x338>)
    26b0:	443b      	add	r3, r7
    26b2:	f1a3 0108 	sub.w	r1, r3, #8
    26b6:	685c      	ldr	r4, [r3, #4]
    26b8:	42a1      	cmp	r1, r4
    26ba:	d106      	bne.n	26ca <_malloc_r+0xa6>
    26bc:	e00c      	b.n	26d8 <_malloc_r+0xb4>
    26be:	2a00      	cmp	r2, #0
    26c0:	f280 811d 	bge.w	28fe <_malloc_r+0x2da>
    26c4:	68e4      	ldr	r4, [r4, #12]
    26c6:	42a1      	cmp	r1, r4
    26c8:	d006      	beq.n	26d8 <_malloc_r+0xb4>
    26ca:	6863      	ldr	r3, [r4, #4]
    26cc:	f023 0303 	bic.w	r3, r3, #3
    26d0:	1b5a      	subs	r2, r3, r5
    26d2:	2a0f      	cmp	r2, #15
    26d4:	ddf3      	ble.n	26be <_malloc_r+0x9a>
    26d6:	4660      	mov	r0, ip
    26d8:	693c      	ldr	r4, [r7, #16]
    26da:	f8df c294 	ldr.w	ip, [pc, #660]	; 2970 <_malloc_r+0x34c>
    26de:	4564      	cmp	r4, ip
    26e0:	d071      	beq.n	27c6 <_malloc_r+0x1a2>
    26e2:	6863      	ldr	r3, [r4, #4]
    26e4:	f023 0303 	bic.w	r3, r3, #3
    26e8:	1b5a      	subs	r2, r3, r5
    26ea:	2a0f      	cmp	r2, #15
    26ec:	f300 8144 	bgt.w	2978 <_malloc_r+0x354>
    26f0:	2a00      	cmp	r2, #0
    26f2:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    26f6:	f280 8126 	bge.w	2946 <_malloc_r+0x322>
    26fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    26fe:	f080 8169 	bcs.w	29d4 <_malloc_r+0x3b0>
    2702:	08db      	lsrs	r3, r3, #3
    2704:	1c59      	adds	r1, r3, #1
    2706:	687a      	ldr	r2, [r7, #4]
    2708:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
    270c:	f8c4 8008 	str.w	r8, [r4, #8]
    2710:	f04f 0e01 	mov.w	lr, #1
    2714:	109b      	asrs	r3, r3, #2
    2716:	fa0e f303 	lsl.w	r3, lr, r3
    271a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
    271e:	4313      	orrs	r3, r2
    2720:	f1ae 0208 	sub.w	r2, lr, #8
    2724:	60e2      	str	r2, [r4, #12]
    2726:	607b      	str	r3, [r7, #4]
    2728:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
    272c:	f8c8 400c 	str.w	r4, [r8, #12]
    2730:	1082      	asrs	r2, r0, #2
    2732:	2401      	movs	r4, #1
    2734:	4094      	lsls	r4, r2
    2736:	429c      	cmp	r4, r3
    2738:	d84b      	bhi.n	27d2 <_malloc_r+0x1ae>
    273a:	421c      	tst	r4, r3
    273c:	d106      	bne.n	274c <_malloc_r+0x128>
    273e:	f020 0003 	bic.w	r0, r0, #3
    2742:	0064      	lsls	r4, r4, #1
    2744:	421c      	tst	r4, r3
    2746:	f100 0004 	add.w	r0, r0, #4
    274a:	d0fa      	beq.n	2742 <_malloc_r+0x11e>
    274c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    2750:	46ce      	mov	lr, r9
    2752:	4680      	mov	r8, r0
    2754:	f8de 300c 	ldr.w	r3, [lr, #12]
    2758:	459e      	cmp	lr, r3
    275a:	d107      	bne.n	276c <_malloc_r+0x148>
    275c:	e122      	b.n	29a4 <_malloc_r+0x380>
    275e:	2a00      	cmp	r2, #0
    2760:	f280 8129 	bge.w	29b6 <_malloc_r+0x392>
    2764:	68db      	ldr	r3, [r3, #12]
    2766:	459e      	cmp	lr, r3
    2768:	f000 811c 	beq.w	29a4 <_malloc_r+0x380>
    276c:	6859      	ldr	r1, [r3, #4]
    276e:	f021 0103 	bic.w	r1, r1, #3
    2772:	1b4a      	subs	r2, r1, r5
    2774:	2a0f      	cmp	r2, #15
    2776:	ddf2      	ble.n	275e <_malloc_r+0x13a>
    2778:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
    277c:	195c      	adds	r4, r3, r5
    277e:	f045 0501 	orr.w	r5, r5, #1
    2782:	605d      	str	r5, [r3, #4]
    2784:	f042 0501 	orr.w	r5, r2, #1
    2788:	f8c8 e00c 	str.w	lr, [r8, #12]
    278c:	4630      	mov	r0, r6
    278e:	f8ce 8008 	str.w	r8, [lr, #8]
    2792:	e9c7 4404 	strd	r4, r4, [r7, #16]
    2796:	e9c4 cc02 	strd	ip, ip, [r4, #8]
    279a:	6065      	str	r5, [r4, #4]
    279c:	505a      	str	r2, [r3, r1]
    279e:	9301      	str	r3, [sp, #4]
    27a0:	f000 fb52 	bl	2e48 <__malloc_unlock>
    27a4:	9b01      	ldr	r3, [sp, #4]
    27a6:	f103 0408 	add.w	r4, r3, #8
    27aa:	e763      	b.n	2674 <_malloc_r+0x50>
    27ac:	2400      	movs	r4, #0
    27ae:	230c      	movs	r3, #12
    27b0:	4620      	mov	r0, r4
    27b2:	6033      	str	r3, [r6, #0]
    27b4:	b003      	add	sp, #12
    27b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27ba:	f44f 7300 	mov.w	r3, #512	; 0x200
    27be:	2040      	movs	r0, #64	; 0x40
    27c0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    27c4:	e773      	b.n	26ae <_malloc_r+0x8a>
    27c6:	687b      	ldr	r3, [r7, #4]
    27c8:	1082      	asrs	r2, r0, #2
    27ca:	2401      	movs	r4, #1
    27cc:	4094      	lsls	r4, r2
    27ce:	429c      	cmp	r4, r3
    27d0:	d9b3      	bls.n	273a <_malloc_r+0x116>
    27d2:	68bc      	ldr	r4, [r7, #8]
    27d4:	6863      	ldr	r3, [r4, #4]
    27d6:	f023 0903 	bic.w	r9, r3, #3
    27da:	45a9      	cmp	r9, r5
    27dc:	d303      	bcc.n	27e6 <_malloc_r+0x1c2>
    27de:	eba9 0305 	sub.w	r3, r9, r5
    27e2:	2b0f      	cmp	r3, #15
    27e4:	dc7b      	bgt.n	28de <_malloc_r+0x2ba>
    27e6:	4b5e      	ldr	r3, [pc, #376]	; (2960 <_malloc_r+0x33c>)
    27e8:	f8df a188 	ldr.w	sl, [pc, #392]	; 2974 <_malloc_r+0x350>
    27ec:	681a      	ldr	r2, [r3, #0]
    27ee:	f8da 3000 	ldr.w	r3, [sl]
    27f2:	3301      	adds	r3, #1
    27f4:	eb05 0802 	add.w	r8, r5, r2
    27f8:	f000 8148 	beq.w	2a8c <_malloc_r+0x468>
    27fc:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
    2800:	f108 080f 	add.w	r8, r8, #15
    2804:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
    2808:	f028 080f 	bic.w	r8, r8, #15
    280c:	4641      	mov	r1, r8
    280e:	4630      	mov	r0, r6
    2810:	f000 fcce 	bl	31b0 <_sbrk_r>
    2814:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2818:	4683      	mov	fp, r0
    281a:	f000 8104 	beq.w	2a26 <_malloc_r+0x402>
    281e:	eb04 0009 	add.w	r0, r4, r9
    2822:	4558      	cmp	r0, fp
    2824:	f200 80fd 	bhi.w	2a22 <_malloc_r+0x3fe>
    2828:	4a4e      	ldr	r2, [pc, #312]	; (2964 <_malloc_r+0x340>)
    282a:	6813      	ldr	r3, [r2, #0]
    282c:	4443      	add	r3, r8
    282e:	6013      	str	r3, [r2, #0]
    2830:	f000 814d 	beq.w	2ace <_malloc_r+0x4aa>
    2834:	f8da 1000 	ldr.w	r1, [sl]
    2838:	3101      	adds	r1, #1
    283a:	bf1b      	ittet	ne
    283c:	ebab 0000 	subne.w	r0, fp, r0
    2840:	181b      	addne	r3, r3, r0
    2842:	f8ca b000 	streq.w	fp, [sl]
    2846:	6013      	strne	r3, [r2, #0]
    2848:	f01b 0307 	ands.w	r3, fp, #7
    284c:	f000 8134 	beq.w	2ab8 <_malloc_r+0x494>
    2850:	f1c3 0108 	rsb	r1, r3, #8
    2854:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    2858:	448b      	add	fp, r1
    285a:	3308      	adds	r3, #8
    285c:	44d8      	add	r8, fp
    285e:	f3c8 080b 	ubfx	r8, r8, #0, #12
    2862:	eba3 0808 	sub.w	r8, r3, r8
    2866:	4641      	mov	r1, r8
    2868:	4630      	mov	r0, r6
    286a:	9201      	str	r2, [sp, #4]
    286c:	f000 fca0 	bl	31b0 <_sbrk_r>
    2870:	1c43      	adds	r3, r0, #1
    2872:	9a01      	ldr	r2, [sp, #4]
    2874:	f000 8146 	beq.w	2b04 <_malloc_r+0x4e0>
    2878:	eba0 010b 	sub.w	r1, r0, fp
    287c:	4441      	add	r1, r8
    287e:	f041 0101 	orr.w	r1, r1, #1
    2882:	6813      	ldr	r3, [r2, #0]
    2884:	f8c7 b008 	str.w	fp, [r7, #8]
    2888:	4443      	add	r3, r8
    288a:	42bc      	cmp	r4, r7
    288c:	f8cb 1004 	str.w	r1, [fp, #4]
    2890:	6013      	str	r3, [r2, #0]
    2892:	d015      	beq.n	28c0 <_malloc_r+0x29c>
    2894:	f1b9 0f0f 	cmp.w	r9, #15
    2898:	f240 8130 	bls.w	2afc <_malloc_r+0x4d8>
    289c:	6860      	ldr	r0, [r4, #4]
    289e:	f1a9 010c 	sub.w	r1, r9, #12
    28a2:	f021 0107 	bic.w	r1, r1, #7
    28a6:	f000 0001 	and.w	r0, r0, #1
    28aa:	eb04 0c01 	add.w	ip, r4, r1
    28ae:	4308      	orrs	r0, r1
    28b0:	f04f 0e05 	mov.w	lr, #5
    28b4:	290f      	cmp	r1, #15
    28b6:	6060      	str	r0, [r4, #4]
    28b8:	e9cc ee01 	strd	lr, lr, [ip, #4]
    28bc:	f200 813a 	bhi.w	2b34 <_malloc_r+0x510>
    28c0:	4a29      	ldr	r2, [pc, #164]	; (2968 <_malloc_r+0x344>)
    28c2:	482a      	ldr	r0, [pc, #168]	; (296c <_malloc_r+0x348>)
    28c4:	6811      	ldr	r1, [r2, #0]
    28c6:	68bc      	ldr	r4, [r7, #8]
    28c8:	428b      	cmp	r3, r1
    28ca:	6801      	ldr	r1, [r0, #0]
    28cc:	bf88      	it	hi
    28ce:	6013      	strhi	r3, [r2, #0]
    28d0:	6862      	ldr	r2, [r4, #4]
    28d2:	428b      	cmp	r3, r1
    28d4:	f022 0203 	bic.w	r2, r2, #3
    28d8:	bf88      	it	hi
    28da:	6003      	strhi	r3, [r0, #0]
    28dc:	e0a7      	b.n	2a2e <_malloc_r+0x40a>
    28de:	1962      	adds	r2, r4, r5
    28e0:	f043 0301 	orr.w	r3, r3, #1
    28e4:	f045 0501 	orr.w	r5, r5, #1
    28e8:	6065      	str	r5, [r4, #4]
    28ea:	4630      	mov	r0, r6
    28ec:	60ba      	str	r2, [r7, #8]
    28ee:	6053      	str	r3, [r2, #4]
    28f0:	f000 faaa 	bl	2e48 <__malloc_unlock>
    28f4:	3408      	adds	r4, #8
    28f6:	4620      	mov	r0, r4
    28f8:	b003      	add	sp, #12
    28fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28fe:	4423      	add	r3, r4
    2900:	68e1      	ldr	r1, [r4, #12]
    2902:	685a      	ldr	r2, [r3, #4]
    2904:	68a5      	ldr	r5, [r4, #8]
    2906:	f042 0201 	orr.w	r2, r2, #1
    290a:	60e9      	str	r1, [r5, #12]
    290c:	4630      	mov	r0, r6
    290e:	608d      	str	r5, [r1, #8]
    2910:	605a      	str	r2, [r3, #4]
    2912:	f000 fa99 	bl	2e48 <__malloc_unlock>
    2916:	3408      	adds	r4, #8
    2918:	4620      	mov	r0, r4
    291a:	b003      	add	sp, #12
    291c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2920:	68dc      	ldr	r4, [r3, #12]
    2922:	42a3      	cmp	r3, r4
    2924:	bf08      	it	eq
    2926:	3002      	addeq	r0, #2
    2928:	f43f aed6 	beq.w	26d8 <_malloc_r+0xb4>
    292c:	e692      	b.n	2654 <_malloc_r+0x30>
    292e:	2b14      	cmp	r3, #20
    2930:	d971      	bls.n	2a16 <_malloc_r+0x3f2>
    2932:	2b54      	cmp	r3, #84	; 0x54
    2934:	f200 80ad 	bhi.w	2a92 <_malloc_r+0x46e>
    2938:	0b2b      	lsrs	r3, r5, #12
    293a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    293e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    2942:	00c3      	lsls	r3, r0, #3
    2944:	e6b3      	b.n	26ae <_malloc_r+0x8a>
    2946:	4423      	add	r3, r4
    2948:	4630      	mov	r0, r6
    294a:	685a      	ldr	r2, [r3, #4]
    294c:	f042 0201 	orr.w	r2, r2, #1
    2950:	605a      	str	r2, [r3, #4]
    2952:	3408      	adds	r4, #8
    2954:	f000 fa78 	bl	2e48 <__malloc_unlock>
    2958:	e68c      	b.n	2674 <_malloc_r+0x50>
    295a:	bf00      	nop
    295c:	2000059c 	.word	0x2000059c
    2960:	20001300 	.word	0x20001300
    2964:	200012d0 	.word	0x200012d0
    2968:	200012f8 	.word	0x200012f8
    296c:	200012fc 	.word	0x200012fc
    2970:	200005a4 	.word	0x200005a4
    2974:	200009a4 	.word	0x200009a4
    2978:	1961      	adds	r1, r4, r5
    297a:	f045 0e01 	orr.w	lr, r5, #1
    297e:	f042 0501 	orr.w	r5, r2, #1
    2982:	f8c4 e004 	str.w	lr, [r4, #4]
    2986:	4630      	mov	r0, r6
    2988:	e9c7 1104 	strd	r1, r1, [r7, #16]
    298c:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    2990:	604d      	str	r5, [r1, #4]
    2992:	50e2      	str	r2, [r4, r3]
    2994:	f000 fa58 	bl	2e48 <__malloc_unlock>
    2998:	3408      	adds	r4, #8
    299a:	e66b      	b.n	2674 <_malloc_r+0x50>
    299c:	08e8      	lsrs	r0, r5, #3
    299e:	f105 0308 	add.w	r3, r5, #8
    29a2:	e64f      	b.n	2644 <_malloc_r+0x20>
    29a4:	f108 0801 	add.w	r8, r8, #1
    29a8:	f018 0f03 	tst.w	r8, #3
    29ac:	f10e 0e08 	add.w	lr, lr, #8
    29b0:	f47f aed0 	bne.w	2754 <_malloc_r+0x130>
    29b4:	e052      	b.n	2a5c <_malloc_r+0x438>
    29b6:	4419      	add	r1, r3
    29b8:	461c      	mov	r4, r3
    29ba:	684a      	ldr	r2, [r1, #4]
    29bc:	68db      	ldr	r3, [r3, #12]
    29be:	f854 5f08 	ldr.w	r5, [r4, #8]!
    29c2:	f042 0201 	orr.w	r2, r2, #1
    29c6:	604a      	str	r2, [r1, #4]
    29c8:	4630      	mov	r0, r6
    29ca:	60eb      	str	r3, [r5, #12]
    29cc:	609d      	str	r5, [r3, #8]
    29ce:	f000 fa3b 	bl	2e48 <__malloc_unlock>
    29d2:	e64f      	b.n	2674 <_malloc_r+0x50>
    29d4:	0a5a      	lsrs	r2, r3, #9
    29d6:	2a04      	cmp	r2, #4
    29d8:	d935      	bls.n	2a46 <_malloc_r+0x422>
    29da:	2a14      	cmp	r2, #20
    29dc:	d86f      	bhi.n	2abe <_malloc_r+0x49a>
    29de:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    29e2:	00c9      	lsls	r1, r1, #3
    29e4:	325b      	adds	r2, #91	; 0x5b
    29e6:	eb07 0e01 	add.w	lr, r7, r1
    29ea:	5879      	ldr	r1, [r7, r1]
    29ec:	f1ae 0e08 	sub.w	lr, lr, #8
    29f0:	458e      	cmp	lr, r1
    29f2:	d058      	beq.n	2aa6 <_malloc_r+0x482>
    29f4:	684a      	ldr	r2, [r1, #4]
    29f6:	f022 0203 	bic.w	r2, r2, #3
    29fa:	429a      	cmp	r2, r3
    29fc:	d902      	bls.n	2a04 <_malloc_r+0x3e0>
    29fe:	6889      	ldr	r1, [r1, #8]
    2a00:	458e      	cmp	lr, r1
    2a02:	d1f7      	bne.n	29f4 <_malloc_r+0x3d0>
    2a04:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	e9c4 1e02 	strd	r1, lr, [r4, #8]
    2a0e:	f8ce 4008 	str.w	r4, [lr, #8]
    2a12:	60cc      	str	r4, [r1, #12]
    2a14:	e68c      	b.n	2730 <_malloc_r+0x10c>
    2a16:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    2a1a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    2a1e:	00c3      	lsls	r3, r0, #3
    2a20:	e645      	b.n	26ae <_malloc_r+0x8a>
    2a22:	42bc      	cmp	r4, r7
    2a24:	d072      	beq.n	2b0c <_malloc_r+0x4e8>
    2a26:	68bc      	ldr	r4, [r7, #8]
    2a28:	6862      	ldr	r2, [r4, #4]
    2a2a:	f022 0203 	bic.w	r2, r2, #3
    2a2e:	4295      	cmp	r5, r2
    2a30:	eba2 0305 	sub.w	r3, r2, r5
    2a34:	d802      	bhi.n	2a3c <_malloc_r+0x418>
    2a36:	2b0f      	cmp	r3, #15
    2a38:	f73f af51 	bgt.w	28de <_malloc_r+0x2ba>
    2a3c:	4630      	mov	r0, r6
    2a3e:	f000 fa03 	bl	2e48 <__malloc_unlock>
    2a42:	2400      	movs	r4, #0
    2a44:	e616      	b.n	2674 <_malloc_r+0x50>
    2a46:	099a      	lsrs	r2, r3, #6
    2a48:	f102 0139 	add.w	r1, r2, #57	; 0x39
    2a4c:	00c9      	lsls	r1, r1, #3
    2a4e:	3238      	adds	r2, #56	; 0x38
    2a50:	e7c9      	b.n	29e6 <_malloc_r+0x3c2>
    2a52:	f8d9 9000 	ldr.w	r9, [r9]
    2a56:	4599      	cmp	r9, r3
    2a58:	f040 8083 	bne.w	2b62 <_malloc_r+0x53e>
    2a5c:	f010 0f03 	tst.w	r0, #3
    2a60:	f1a9 0308 	sub.w	r3, r9, #8
    2a64:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    2a68:	d1f3      	bne.n	2a52 <_malloc_r+0x42e>
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	ea23 0304 	bic.w	r3, r3, r4
    2a70:	607b      	str	r3, [r7, #4]
    2a72:	0064      	lsls	r4, r4, #1
    2a74:	429c      	cmp	r4, r3
    2a76:	f63f aeac 	bhi.w	27d2 <_malloc_r+0x1ae>
    2a7a:	b91c      	cbnz	r4, 2a84 <_malloc_r+0x460>
    2a7c:	e6a9      	b.n	27d2 <_malloc_r+0x1ae>
    2a7e:	0064      	lsls	r4, r4, #1
    2a80:	f108 0804 	add.w	r8, r8, #4
    2a84:	421c      	tst	r4, r3
    2a86:	d0fa      	beq.n	2a7e <_malloc_r+0x45a>
    2a88:	4640      	mov	r0, r8
    2a8a:	e65f      	b.n	274c <_malloc_r+0x128>
    2a8c:	f108 0810 	add.w	r8, r8, #16
    2a90:	e6bc      	b.n	280c <_malloc_r+0x1e8>
    2a92:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2a96:	d826      	bhi.n	2ae6 <_malloc_r+0x4c2>
    2a98:	0beb      	lsrs	r3, r5, #15
    2a9a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    2a9e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    2aa2:	00c3      	lsls	r3, r0, #3
    2aa4:	e603      	b.n	26ae <_malloc_r+0x8a>
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	1092      	asrs	r2, r2, #2
    2aaa:	f04f 0801 	mov.w	r8, #1
    2aae:	fa08 f202 	lsl.w	r2, r8, r2
    2ab2:	4313      	orrs	r3, r2
    2ab4:	607b      	str	r3, [r7, #4]
    2ab6:	e7a8      	b.n	2a0a <_malloc_r+0x3e6>
    2ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2abc:	e6ce      	b.n	285c <_malloc_r+0x238>
    2abe:	2a54      	cmp	r2, #84	; 0x54
    2ac0:	d829      	bhi.n	2b16 <_malloc_r+0x4f2>
    2ac2:	0b1a      	lsrs	r2, r3, #12
    2ac4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    2ac8:	00c9      	lsls	r1, r1, #3
    2aca:	326e      	adds	r2, #110	; 0x6e
    2acc:	e78b      	b.n	29e6 <_malloc_r+0x3c2>
    2ace:	f3c0 010b 	ubfx	r1, r0, #0, #12
    2ad2:	2900      	cmp	r1, #0
    2ad4:	f47f aeae 	bne.w	2834 <_malloc_r+0x210>
    2ad8:	eb09 0208 	add.w	r2, r9, r8
    2adc:	68b9      	ldr	r1, [r7, #8]
    2ade:	f042 0201 	orr.w	r2, r2, #1
    2ae2:	604a      	str	r2, [r1, #4]
    2ae4:	e6ec      	b.n	28c0 <_malloc_r+0x29c>
    2ae6:	f240 5254 	movw	r2, #1364	; 0x554
    2aea:	4293      	cmp	r3, r2
    2aec:	d81c      	bhi.n	2b28 <_malloc_r+0x504>
    2aee:	0cab      	lsrs	r3, r5, #18
    2af0:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    2af4:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    2af8:	00c3      	lsls	r3, r0, #3
    2afa:	e5d8      	b.n	26ae <_malloc_r+0x8a>
    2afc:	2301      	movs	r3, #1
    2afe:	f8cb 3004 	str.w	r3, [fp, #4]
    2b02:	e79b      	b.n	2a3c <_malloc_r+0x418>
    2b04:	2101      	movs	r1, #1
    2b06:	f04f 0800 	mov.w	r8, #0
    2b0a:	e6ba      	b.n	2882 <_malloc_r+0x25e>
    2b0c:	4a16      	ldr	r2, [pc, #88]	; (2b68 <_malloc_r+0x544>)
    2b0e:	6813      	ldr	r3, [r2, #0]
    2b10:	4443      	add	r3, r8
    2b12:	6013      	str	r3, [r2, #0]
    2b14:	e68e      	b.n	2834 <_malloc_r+0x210>
    2b16:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    2b1a:	d814      	bhi.n	2b46 <_malloc_r+0x522>
    2b1c:	0bda      	lsrs	r2, r3, #15
    2b1e:	f102 0178 	add.w	r1, r2, #120	; 0x78
    2b22:	00c9      	lsls	r1, r1, #3
    2b24:	3277      	adds	r2, #119	; 0x77
    2b26:	e75e      	b.n	29e6 <_malloc_r+0x3c2>
    2b28:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    2b2c:	207f      	movs	r0, #127	; 0x7f
    2b2e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    2b32:	e5bc      	b.n	26ae <_malloc_r+0x8a>
    2b34:	f104 0108 	add.w	r1, r4, #8
    2b38:	4630      	mov	r0, r6
    2b3a:	9201      	str	r2, [sp, #4]
    2b3c:	f7ff fa50 	bl	1fe0 <_free_r>
    2b40:	9a01      	ldr	r2, [sp, #4]
    2b42:	6813      	ldr	r3, [r2, #0]
    2b44:	e6bc      	b.n	28c0 <_malloc_r+0x29c>
    2b46:	f240 5154 	movw	r1, #1364	; 0x554
    2b4a:	428a      	cmp	r2, r1
    2b4c:	d805      	bhi.n	2b5a <_malloc_r+0x536>
    2b4e:	0c9a      	lsrs	r2, r3, #18
    2b50:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    2b54:	00c9      	lsls	r1, r1, #3
    2b56:	327c      	adds	r2, #124	; 0x7c
    2b58:	e745      	b.n	29e6 <_malloc_r+0x3c2>
    2b5a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    2b5e:	227e      	movs	r2, #126	; 0x7e
    2b60:	e741      	b.n	29e6 <_malloc_r+0x3c2>
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	e785      	b.n	2a72 <_malloc_r+0x44e>
    2b66:	bf00      	nop
    2b68:	200012d0 	.word	0x200012d0

00002b6c <__ascii_mbtowc>:
    2b6c:	b082      	sub	sp, #8
    2b6e:	b149      	cbz	r1, 2b84 <__ascii_mbtowc+0x18>
    2b70:	b15a      	cbz	r2, 2b8a <__ascii_mbtowc+0x1e>
    2b72:	b16b      	cbz	r3, 2b90 <__ascii_mbtowc+0x24>
    2b74:	7813      	ldrb	r3, [r2, #0]
    2b76:	600b      	str	r3, [r1, #0]
    2b78:	7812      	ldrb	r2, [r2, #0]
    2b7a:	1c10      	adds	r0, r2, #0
    2b7c:	bf18      	it	ne
    2b7e:	2001      	movne	r0, #1
    2b80:	b002      	add	sp, #8
    2b82:	4770      	bx	lr
    2b84:	a901      	add	r1, sp, #4
    2b86:	2a00      	cmp	r2, #0
    2b88:	d1f3      	bne.n	2b72 <__ascii_mbtowc+0x6>
    2b8a:	4610      	mov	r0, r2
    2b8c:	b002      	add	sp, #8
    2b8e:	4770      	bx	lr
    2b90:	f06f 0001 	mvn.w	r0, #1
    2b94:	e7f4      	b.n	2b80 <__ascii_mbtowc+0x14>
    2b96:	bf00      	nop
	...

00002ba0 <memchr>:
    2ba0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    2ba4:	2a10      	cmp	r2, #16
    2ba6:	db2b      	blt.n	2c00 <memchr+0x60>
    2ba8:	f010 0f07 	tst.w	r0, #7
    2bac:	d008      	beq.n	2bc0 <memchr+0x20>
    2bae:	f810 3b01 	ldrb.w	r3, [r0], #1
    2bb2:	3a01      	subs	r2, #1
    2bb4:	428b      	cmp	r3, r1
    2bb6:	d02d      	beq.n	2c14 <memchr+0x74>
    2bb8:	f010 0f07 	tst.w	r0, #7
    2bbc:	b342      	cbz	r2, 2c10 <memchr+0x70>
    2bbe:	d1f6      	bne.n	2bae <memchr+0xe>
    2bc0:	b4f0      	push	{r4, r5, r6, r7}
    2bc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    2bc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    2bca:	f022 0407 	bic.w	r4, r2, #7
    2bce:	f07f 0700 	mvns.w	r7, #0
    2bd2:	2300      	movs	r3, #0
    2bd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    2bd8:	3c08      	subs	r4, #8
    2bda:	ea85 0501 	eor.w	r5, r5, r1
    2bde:	ea86 0601 	eor.w	r6, r6, r1
    2be2:	fa85 f547 	uadd8	r5, r5, r7
    2be6:	faa3 f587 	sel	r5, r3, r7
    2bea:	fa86 f647 	uadd8	r6, r6, r7
    2bee:	faa5 f687 	sel	r6, r5, r7
    2bf2:	b98e      	cbnz	r6, 2c18 <memchr+0x78>
    2bf4:	d1ee      	bne.n	2bd4 <memchr+0x34>
    2bf6:	bcf0      	pop	{r4, r5, r6, r7}
    2bf8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    2bfc:	f002 0207 	and.w	r2, r2, #7
    2c00:	b132      	cbz	r2, 2c10 <memchr+0x70>
    2c02:	f810 3b01 	ldrb.w	r3, [r0], #1
    2c06:	3a01      	subs	r2, #1
    2c08:	ea83 0301 	eor.w	r3, r3, r1
    2c0c:	b113      	cbz	r3, 2c14 <memchr+0x74>
    2c0e:	d1f8      	bne.n	2c02 <memchr+0x62>
    2c10:	2000      	movs	r0, #0
    2c12:	4770      	bx	lr
    2c14:	3801      	subs	r0, #1
    2c16:	4770      	bx	lr
    2c18:	2d00      	cmp	r5, #0
    2c1a:	bf06      	itte	eq
    2c1c:	4635      	moveq	r5, r6
    2c1e:	3803      	subeq	r0, #3
    2c20:	3807      	subne	r0, #7
    2c22:	f015 0f01 	tst.w	r5, #1
    2c26:	d107      	bne.n	2c38 <memchr+0x98>
    2c28:	3001      	adds	r0, #1
    2c2a:	f415 7f80 	tst.w	r5, #256	; 0x100
    2c2e:	bf02      	ittt	eq
    2c30:	3001      	addeq	r0, #1
    2c32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    2c36:	3001      	addeq	r0, #1
    2c38:	bcf0      	pop	{r4, r5, r6, r7}
    2c3a:	3801      	subs	r0, #1
    2c3c:	4770      	bx	lr
    2c3e:	bf00      	nop

00002c40 <memcpy>:
    2c40:	4684      	mov	ip, r0
    2c42:	ea41 0300 	orr.w	r3, r1, r0
    2c46:	f013 0303 	ands.w	r3, r3, #3
    2c4a:	d16d      	bne.n	2d28 <memcpy+0xe8>
    2c4c:	3a40      	subs	r2, #64	; 0x40
    2c4e:	d341      	bcc.n	2cd4 <memcpy+0x94>
    2c50:	f851 3b04 	ldr.w	r3, [r1], #4
    2c54:	f840 3b04 	str.w	r3, [r0], #4
    2c58:	f851 3b04 	ldr.w	r3, [r1], #4
    2c5c:	f840 3b04 	str.w	r3, [r0], #4
    2c60:	f851 3b04 	ldr.w	r3, [r1], #4
    2c64:	f840 3b04 	str.w	r3, [r0], #4
    2c68:	f851 3b04 	ldr.w	r3, [r1], #4
    2c6c:	f840 3b04 	str.w	r3, [r0], #4
    2c70:	f851 3b04 	ldr.w	r3, [r1], #4
    2c74:	f840 3b04 	str.w	r3, [r0], #4
    2c78:	f851 3b04 	ldr.w	r3, [r1], #4
    2c7c:	f840 3b04 	str.w	r3, [r0], #4
    2c80:	f851 3b04 	ldr.w	r3, [r1], #4
    2c84:	f840 3b04 	str.w	r3, [r0], #4
    2c88:	f851 3b04 	ldr.w	r3, [r1], #4
    2c8c:	f840 3b04 	str.w	r3, [r0], #4
    2c90:	f851 3b04 	ldr.w	r3, [r1], #4
    2c94:	f840 3b04 	str.w	r3, [r0], #4
    2c98:	f851 3b04 	ldr.w	r3, [r1], #4
    2c9c:	f840 3b04 	str.w	r3, [r0], #4
    2ca0:	f851 3b04 	ldr.w	r3, [r1], #4
    2ca4:	f840 3b04 	str.w	r3, [r0], #4
    2ca8:	f851 3b04 	ldr.w	r3, [r1], #4
    2cac:	f840 3b04 	str.w	r3, [r0], #4
    2cb0:	f851 3b04 	ldr.w	r3, [r1], #4
    2cb4:	f840 3b04 	str.w	r3, [r0], #4
    2cb8:	f851 3b04 	ldr.w	r3, [r1], #4
    2cbc:	f840 3b04 	str.w	r3, [r0], #4
    2cc0:	f851 3b04 	ldr.w	r3, [r1], #4
    2cc4:	f840 3b04 	str.w	r3, [r0], #4
    2cc8:	f851 3b04 	ldr.w	r3, [r1], #4
    2ccc:	f840 3b04 	str.w	r3, [r0], #4
    2cd0:	3a40      	subs	r2, #64	; 0x40
    2cd2:	d2bd      	bcs.n	2c50 <memcpy+0x10>
    2cd4:	3230      	adds	r2, #48	; 0x30
    2cd6:	d311      	bcc.n	2cfc <memcpy+0xbc>
    2cd8:	f851 3b04 	ldr.w	r3, [r1], #4
    2cdc:	f840 3b04 	str.w	r3, [r0], #4
    2ce0:	f851 3b04 	ldr.w	r3, [r1], #4
    2ce4:	f840 3b04 	str.w	r3, [r0], #4
    2ce8:	f851 3b04 	ldr.w	r3, [r1], #4
    2cec:	f840 3b04 	str.w	r3, [r0], #4
    2cf0:	f851 3b04 	ldr.w	r3, [r1], #4
    2cf4:	f840 3b04 	str.w	r3, [r0], #4
    2cf8:	3a10      	subs	r2, #16
    2cfa:	d2ed      	bcs.n	2cd8 <memcpy+0x98>
    2cfc:	320c      	adds	r2, #12
    2cfe:	d305      	bcc.n	2d0c <memcpy+0xcc>
    2d00:	f851 3b04 	ldr.w	r3, [r1], #4
    2d04:	f840 3b04 	str.w	r3, [r0], #4
    2d08:	3a04      	subs	r2, #4
    2d0a:	d2f9      	bcs.n	2d00 <memcpy+0xc0>
    2d0c:	3204      	adds	r2, #4
    2d0e:	d008      	beq.n	2d22 <memcpy+0xe2>
    2d10:	07d2      	lsls	r2, r2, #31
    2d12:	bf1c      	itt	ne
    2d14:	f811 3b01 	ldrbne.w	r3, [r1], #1
    2d18:	f800 3b01 	strbne.w	r3, [r0], #1
    2d1c:	d301      	bcc.n	2d22 <memcpy+0xe2>
    2d1e:	880b      	ldrh	r3, [r1, #0]
    2d20:	8003      	strh	r3, [r0, #0]
    2d22:	4660      	mov	r0, ip
    2d24:	4770      	bx	lr
    2d26:	bf00      	nop
    2d28:	2a08      	cmp	r2, #8
    2d2a:	d313      	bcc.n	2d54 <memcpy+0x114>
    2d2c:	078b      	lsls	r3, r1, #30
    2d2e:	d08d      	beq.n	2c4c <memcpy+0xc>
    2d30:	f010 0303 	ands.w	r3, r0, #3
    2d34:	d08a      	beq.n	2c4c <memcpy+0xc>
    2d36:	f1c3 0304 	rsb	r3, r3, #4
    2d3a:	1ad2      	subs	r2, r2, r3
    2d3c:	07db      	lsls	r3, r3, #31
    2d3e:	bf1c      	itt	ne
    2d40:	f811 3b01 	ldrbne.w	r3, [r1], #1
    2d44:	f800 3b01 	strbne.w	r3, [r0], #1
    2d48:	d380      	bcc.n	2c4c <memcpy+0xc>
    2d4a:	f831 3b02 	ldrh.w	r3, [r1], #2
    2d4e:	f820 3b02 	strh.w	r3, [r0], #2
    2d52:	e77b      	b.n	2c4c <memcpy+0xc>
    2d54:	3a04      	subs	r2, #4
    2d56:	d3d9      	bcc.n	2d0c <memcpy+0xcc>
    2d58:	3a01      	subs	r2, #1
    2d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
    2d5e:	f800 3b01 	strb.w	r3, [r0], #1
    2d62:	d2f9      	bcs.n	2d58 <memcpy+0x118>
    2d64:	780b      	ldrb	r3, [r1, #0]
    2d66:	7003      	strb	r3, [r0, #0]
    2d68:	784b      	ldrb	r3, [r1, #1]
    2d6a:	7043      	strb	r3, [r0, #1]
    2d6c:	788b      	ldrb	r3, [r1, #2]
    2d6e:	7083      	strb	r3, [r0, #2]
    2d70:	4660      	mov	r0, ip
    2d72:	4770      	bx	lr

00002d74 <memmove>:
    2d74:	4288      	cmp	r0, r1
    2d76:	b4f0      	push	{r4, r5, r6, r7}
    2d78:	d90d      	bls.n	2d96 <memmove+0x22>
    2d7a:	188b      	adds	r3, r1, r2
    2d7c:	4283      	cmp	r3, r0
    2d7e:	d90a      	bls.n	2d96 <memmove+0x22>
    2d80:	1884      	adds	r4, r0, r2
    2d82:	b132      	cbz	r2, 2d92 <memmove+0x1e>
    2d84:	4622      	mov	r2, r4
    2d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    2d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
    2d8e:	4299      	cmp	r1, r3
    2d90:	d1f9      	bne.n	2d86 <memmove+0x12>
    2d92:	bcf0      	pop	{r4, r5, r6, r7}
    2d94:	4770      	bx	lr
    2d96:	2a0f      	cmp	r2, #15
    2d98:	d949      	bls.n	2e2e <memmove+0xba>
    2d9a:	ea40 0301 	orr.w	r3, r0, r1
    2d9e:	079b      	lsls	r3, r3, #30
    2da0:	d147      	bne.n	2e32 <memmove+0xbe>
    2da2:	f1a2 0310 	sub.w	r3, r2, #16
    2da6:	091b      	lsrs	r3, r3, #4
    2da8:	f101 0720 	add.w	r7, r1, #32
    2dac:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    2db0:	f101 0410 	add.w	r4, r1, #16
    2db4:	f100 0510 	add.w	r5, r0, #16
    2db8:	f854 6c10 	ldr.w	r6, [r4, #-16]
    2dbc:	f845 6c10 	str.w	r6, [r5, #-16]
    2dc0:	f854 6c0c 	ldr.w	r6, [r4, #-12]
    2dc4:	f845 6c0c 	str.w	r6, [r5, #-12]
    2dc8:	f854 6c08 	ldr.w	r6, [r4, #-8]
    2dcc:	f845 6c08 	str.w	r6, [r5, #-8]
    2dd0:	f854 6c04 	ldr.w	r6, [r4, #-4]
    2dd4:	f845 6c04 	str.w	r6, [r5, #-4]
    2dd8:	3410      	adds	r4, #16
    2dda:	42bc      	cmp	r4, r7
    2ddc:	f105 0510 	add.w	r5, r5, #16
    2de0:	d1ea      	bne.n	2db8 <memmove+0x44>
    2de2:	3301      	adds	r3, #1
    2de4:	f002 050f 	and.w	r5, r2, #15
    2de8:	011b      	lsls	r3, r3, #4
    2dea:	2d03      	cmp	r5, #3
    2dec:	4419      	add	r1, r3
    2dee:	4403      	add	r3, r0
    2df0:	d921      	bls.n	2e36 <memmove+0xc2>
    2df2:	1f1f      	subs	r7, r3, #4
    2df4:	460e      	mov	r6, r1
    2df6:	462c      	mov	r4, r5
    2df8:	3c04      	subs	r4, #4
    2dfa:	f856 cb04 	ldr.w	ip, [r6], #4
    2dfe:	f847 cf04 	str.w	ip, [r7, #4]!
    2e02:	2c03      	cmp	r4, #3
    2e04:	d8f8      	bhi.n	2df8 <memmove+0x84>
    2e06:	1f2c      	subs	r4, r5, #4
    2e08:	f024 0403 	bic.w	r4, r4, #3
    2e0c:	3404      	adds	r4, #4
    2e0e:	4423      	add	r3, r4
    2e10:	4421      	add	r1, r4
    2e12:	f002 0203 	and.w	r2, r2, #3
    2e16:	2a00      	cmp	r2, #0
    2e18:	d0bb      	beq.n	2d92 <memmove+0x1e>
    2e1a:	3b01      	subs	r3, #1
    2e1c:	440a      	add	r2, r1
    2e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
    2e22:	f803 4f01 	strb.w	r4, [r3, #1]!
    2e26:	4291      	cmp	r1, r2
    2e28:	d1f9      	bne.n	2e1e <memmove+0xaa>
    2e2a:	bcf0      	pop	{r4, r5, r6, r7}
    2e2c:	4770      	bx	lr
    2e2e:	4603      	mov	r3, r0
    2e30:	e7f1      	b.n	2e16 <memmove+0xa2>
    2e32:	4603      	mov	r3, r0
    2e34:	e7f1      	b.n	2e1a <memmove+0xa6>
    2e36:	462a      	mov	r2, r5
    2e38:	e7ed      	b.n	2e16 <memmove+0xa2>
    2e3a:	bf00      	nop

00002e3c <__malloc_lock>:
    2e3c:	4801      	ldr	r0, [pc, #4]	; (2e44 <__malloc_lock+0x8>)
    2e3e:	f7fd ba6f 	b.w	320 <__retarget_lock_acquire_recursive>
    2e42:	bf00      	nop
    2e44:	20001408 	.word	0x20001408

00002e48 <__malloc_unlock>:
    2e48:	4801      	ldr	r0, [pc, #4]	; (2e50 <__malloc_unlock+0x8>)
    2e4a:	f7fd ba6b 	b.w	324 <__retarget_lock_release_recursive>
    2e4e:	bf00      	nop
    2e50:	20001408 	.word	0x20001408

00002e54 <_realloc_r>:
    2e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e58:	4692      	mov	sl, r2
    2e5a:	b083      	sub	sp, #12
    2e5c:	2900      	cmp	r1, #0
    2e5e:	f000 80a1 	beq.w	2fa4 <_realloc_r+0x150>
    2e62:	460d      	mov	r5, r1
    2e64:	4680      	mov	r8, r0
    2e66:	f10a 040b 	add.w	r4, sl, #11
    2e6a:	f7ff ffe7 	bl	2e3c <__malloc_lock>
    2e6e:	f855 2c04 	ldr.w	r2, [r5, #-4]
    2e72:	2c16      	cmp	r4, #22
    2e74:	f022 0603 	bic.w	r6, r2, #3
    2e78:	f1a5 0708 	sub.w	r7, r5, #8
    2e7c:	d83e      	bhi.n	2efc <_realloc_r+0xa8>
    2e7e:	2410      	movs	r4, #16
    2e80:	4621      	mov	r1, r4
    2e82:	45a2      	cmp	sl, r4
    2e84:	d83f      	bhi.n	2f06 <_realloc_r+0xb2>
    2e86:	428e      	cmp	r6, r1
    2e88:	eb07 0906 	add.w	r9, r7, r6
    2e8c:	da74      	bge.n	2f78 <_realloc_r+0x124>
    2e8e:	4bc7      	ldr	r3, [pc, #796]	; (31ac <_realloc_r+0x358>)
    2e90:	6898      	ldr	r0, [r3, #8]
    2e92:	4548      	cmp	r0, r9
    2e94:	f000 80aa 	beq.w	2fec <_realloc_r+0x198>
    2e98:	f8d9 0004 	ldr.w	r0, [r9, #4]
    2e9c:	f020 0301 	bic.w	r3, r0, #1
    2ea0:	444b      	add	r3, r9
    2ea2:	685b      	ldr	r3, [r3, #4]
    2ea4:	07db      	lsls	r3, r3, #31
    2ea6:	f140 8083 	bpl.w	2fb0 <_realloc_r+0x15c>
    2eaa:	07d2      	lsls	r2, r2, #31
    2eac:	d534      	bpl.n	2f18 <_realloc_r+0xc4>
    2eae:	4651      	mov	r1, sl
    2eb0:	4640      	mov	r0, r8
    2eb2:	f7ff fbb7 	bl	2624 <_malloc_r>
    2eb6:	4682      	mov	sl, r0
    2eb8:	b1e0      	cbz	r0, 2ef4 <_realloc_r+0xa0>
    2eba:	f855 3c04 	ldr.w	r3, [r5, #-4]
    2ebe:	f023 0301 	bic.w	r3, r3, #1
    2ec2:	443b      	add	r3, r7
    2ec4:	f1a0 0208 	sub.w	r2, r0, #8
    2ec8:	4293      	cmp	r3, r2
    2eca:	f000 80f9 	beq.w	30c0 <_realloc_r+0x26c>
    2ece:	1f32      	subs	r2, r6, #4
    2ed0:	2a24      	cmp	r2, #36	; 0x24
    2ed2:	f200 8107 	bhi.w	30e4 <_realloc_r+0x290>
    2ed6:	2a13      	cmp	r2, #19
    2ed8:	6829      	ldr	r1, [r5, #0]
    2eda:	f200 80e6 	bhi.w	30aa <_realloc_r+0x256>
    2ede:	4603      	mov	r3, r0
    2ee0:	462a      	mov	r2, r5
    2ee2:	6019      	str	r1, [r3, #0]
    2ee4:	6851      	ldr	r1, [r2, #4]
    2ee6:	6059      	str	r1, [r3, #4]
    2ee8:	6892      	ldr	r2, [r2, #8]
    2eea:	609a      	str	r2, [r3, #8]
    2eec:	4629      	mov	r1, r5
    2eee:	4640      	mov	r0, r8
    2ef0:	f7ff f876 	bl	1fe0 <_free_r>
    2ef4:	4640      	mov	r0, r8
    2ef6:	f7ff ffa7 	bl	2e48 <__malloc_unlock>
    2efa:	e04f      	b.n	2f9c <_realloc_r+0x148>
    2efc:	f024 0407 	bic.w	r4, r4, #7
    2f00:	2c00      	cmp	r4, #0
    2f02:	4621      	mov	r1, r4
    2f04:	dabd      	bge.n	2e82 <_realloc_r+0x2e>
    2f06:	f04f 0a00 	mov.w	sl, #0
    2f0a:	230c      	movs	r3, #12
    2f0c:	4650      	mov	r0, sl
    2f0e:	f8c8 3000 	str.w	r3, [r8]
    2f12:	b003      	add	sp, #12
    2f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f18:	f855 3c08 	ldr.w	r3, [r5, #-8]
    2f1c:	eba7 0b03 	sub.w	fp, r7, r3
    2f20:	f8db 2004 	ldr.w	r2, [fp, #4]
    2f24:	f022 0203 	bic.w	r2, r2, #3
    2f28:	18b3      	adds	r3, r6, r2
    2f2a:	428b      	cmp	r3, r1
    2f2c:	dbbf      	blt.n	2eae <_realloc_r+0x5a>
    2f2e:	46da      	mov	sl, fp
    2f30:	f8db 100c 	ldr.w	r1, [fp, #12]
    2f34:	f85a 0f08 	ldr.w	r0, [sl, #8]!
    2f38:	1f32      	subs	r2, r6, #4
    2f3a:	2a24      	cmp	r2, #36	; 0x24
    2f3c:	60c1      	str	r1, [r0, #12]
    2f3e:	eb0b 0903 	add.w	r9, fp, r3
    2f42:	6088      	str	r0, [r1, #8]
    2f44:	f200 80c6 	bhi.w	30d4 <_realloc_r+0x280>
    2f48:	2a13      	cmp	r2, #19
    2f4a:	6829      	ldr	r1, [r5, #0]
    2f4c:	f240 80c0 	bls.w	30d0 <_realloc_r+0x27c>
    2f50:	f8cb 1008 	str.w	r1, [fp, #8]
    2f54:	6869      	ldr	r1, [r5, #4]
    2f56:	f8cb 100c 	str.w	r1, [fp, #12]
    2f5a:	2a1b      	cmp	r2, #27
    2f5c:	68a9      	ldr	r1, [r5, #8]
    2f5e:	f200 80d8 	bhi.w	3112 <_realloc_r+0x2be>
    2f62:	f10b 0210 	add.w	r2, fp, #16
    2f66:	3508      	adds	r5, #8
    2f68:	6011      	str	r1, [r2, #0]
    2f6a:	6869      	ldr	r1, [r5, #4]
    2f6c:	6051      	str	r1, [r2, #4]
    2f6e:	68a9      	ldr	r1, [r5, #8]
    2f70:	6091      	str	r1, [r2, #8]
    2f72:	461e      	mov	r6, r3
    2f74:	465f      	mov	r7, fp
    2f76:	4655      	mov	r5, sl
    2f78:	687b      	ldr	r3, [r7, #4]
    2f7a:	1b32      	subs	r2, r6, r4
    2f7c:	2a0f      	cmp	r2, #15
    2f7e:	f003 0301 	and.w	r3, r3, #1
    2f82:	d822      	bhi.n	2fca <_realloc_r+0x176>
    2f84:	4333      	orrs	r3, r6
    2f86:	607b      	str	r3, [r7, #4]
    2f88:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2f8c:	f043 0301 	orr.w	r3, r3, #1
    2f90:	f8c9 3004 	str.w	r3, [r9, #4]
    2f94:	4640      	mov	r0, r8
    2f96:	f7ff ff57 	bl	2e48 <__malloc_unlock>
    2f9a:	46aa      	mov	sl, r5
    2f9c:	4650      	mov	r0, sl
    2f9e:	b003      	add	sp, #12
    2fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fa4:	4611      	mov	r1, r2
    2fa6:	b003      	add	sp, #12
    2fa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fac:	f7ff bb3a 	b.w	2624 <_malloc_r>
    2fb0:	f020 0003 	bic.w	r0, r0, #3
    2fb4:	1833      	adds	r3, r6, r0
    2fb6:	428b      	cmp	r3, r1
    2fb8:	db61      	blt.n	307e <_realloc_r+0x22a>
    2fba:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
    2fbe:	461e      	mov	r6, r3
    2fc0:	60ca      	str	r2, [r1, #12]
    2fc2:	eb07 0903 	add.w	r9, r7, r3
    2fc6:	6091      	str	r1, [r2, #8]
    2fc8:	e7d6      	b.n	2f78 <_realloc_r+0x124>
    2fca:	1939      	adds	r1, r7, r4
    2fcc:	4323      	orrs	r3, r4
    2fce:	f042 0201 	orr.w	r2, r2, #1
    2fd2:	607b      	str	r3, [r7, #4]
    2fd4:	604a      	str	r2, [r1, #4]
    2fd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2fda:	f043 0301 	orr.w	r3, r3, #1
    2fde:	3108      	adds	r1, #8
    2fe0:	f8c9 3004 	str.w	r3, [r9, #4]
    2fe4:	4640      	mov	r0, r8
    2fe6:	f7fe fffb 	bl	1fe0 <_free_r>
    2fea:	e7d3      	b.n	2f94 <_realloc_r+0x140>
    2fec:	6840      	ldr	r0, [r0, #4]
    2fee:	f020 0903 	bic.w	r9, r0, #3
    2ff2:	44b1      	add	r9, r6
    2ff4:	f104 0010 	add.w	r0, r4, #16
    2ff8:	4581      	cmp	r9, r0
    2ffa:	da77      	bge.n	30ec <_realloc_r+0x298>
    2ffc:	07d2      	lsls	r2, r2, #31
    2ffe:	f53f af56 	bmi.w	2eae <_realloc_r+0x5a>
    3002:	f855 2c08 	ldr.w	r2, [r5, #-8]
    3006:	eba7 0b02 	sub.w	fp, r7, r2
    300a:	f8db 2004 	ldr.w	r2, [fp, #4]
    300e:	f022 0203 	bic.w	r2, r2, #3
    3012:	4491      	add	r9, r2
    3014:	4548      	cmp	r0, r9
    3016:	dc87      	bgt.n	2f28 <_realloc_r+0xd4>
    3018:	46da      	mov	sl, fp
    301a:	f8db 100c 	ldr.w	r1, [fp, #12]
    301e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
    3022:	1f32      	subs	r2, r6, #4
    3024:	2a24      	cmp	r2, #36	; 0x24
    3026:	60c1      	str	r1, [r0, #12]
    3028:	6088      	str	r0, [r1, #8]
    302a:	f200 80a1 	bhi.w	3170 <_realloc_r+0x31c>
    302e:	2a13      	cmp	r2, #19
    3030:	6829      	ldr	r1, [r5, #0]
    3032:	f240 809b 	bls.w	316c <_realloc_r+0x318>
    3036:	f8cb 1008 	str.w	r1, [fp, #8]
    303a:	6869      	ldr	r1, [r5, #4]
    303c:	f8cb 100c 	str.w	r1, [fp, #12]
    3040:	2a1b      	cmp	r2, #27
    3042:	68a9      	ldr	r1, [r5, #8]
    3044:	f200 809b 	bhi.w	317e <_realloc_r+0x32a>
    3048:	f10b 0210 	add.w	r2, fp, #16
    304c:	3508      	adds	r5, #8
    304e:	6011      	str	r1, [r2, #0]
    3050:	6869      	ldr	r1, [r5, #4]
    3052:	6051      	str	r1, [r2, #4]
    3054:	68a9      	ldr	r1, [r5, #8]
    3056:	6091      	str	r1, [r2, #8]
    3058:	eb0b 0104 	add.w	r1, fp, r4
    305c:	eba9 0204 	sub.w	r2, r9, r4
    3060:	f042 0201 	orr.w	r2, r2, #1
    3064:	6099      	str	r1, [r3, #8]
    3066:	604a      	str	r2, [r1, #4]
    3068:	f8db 3004 	ldr.w	r3, [fp, #4]
    306c:	f003 0301 	and.w	r3, r3, #1
    3070:	431c      	orrs	r4, r3
    3072:	4640      	mov	r0, r8
    3074:	f8cb 4004 	str.w	r4, [fp, #4]
    3078:	f7ff fee6 	bl	2e48 <__malloc_unlock>
    307c:	e78e      	b.n	2f9c <_realloc_r+0x148>
    307e:	07d3      	lsls	r3, r2, #31
    3080:	f53f af15 	bmi.w	2eae <_realloc_r+0x5a>
    3084:	f855 3c08 	ldr.w	r3, [r5, #-8]
    3088:	eba7 0b03 	sub.w	fp, r7, r3
    308c:	f8db 2004 	ldr.w	r2, [fp, #4]
    3090:	f022 0203 	bic.w	r2, r2, #3
    3094:	4410      	add	r0, r2
    3096:	1983      	adds	r3, r0, r6
    3098:	428b      	cmp	r3, r1
    309a:	f6ff af45 	blt.w	2f28 <_realloc_r+0xd4>
    309e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
    30a2:	46da      	mov	sl, fp
    30a4:	60ca      	str	r2, [r1, #12]
    30a6:	6091      	str	r1, [r2, #8]
    30a8:	e742      	b.n	2f30 <_realloc_r+0xdc>
    30aa:	6001      	str	r1, [r0, #0]
    30ac:	686b      	ldr	r3, [r5, #4]
    30ae:	6043      	str	r3, [r0, #4]
    30b0:	2a1b      	cmp	r2, #27
    30b2:	d83a      	bhi.n	312a <_realloc_r+0x2d6>
    30b4:	f105 0208 	add.w	r2, r5, #8
    30b8:	f100 0308 	add.w	r3, r0, #8
    30bc:	68a9      	ldr	r1, [r5, #8]
    30be:	e710      	b.n	2ee2 <_realloc_r+0x8e>
    30c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
    30c4:	f023 0303 	bic.w	r3, r3, #3
    30c8:	441e      	add	r6, r3
    30ca:	eb07 0906 	add.w	r9, r7, r6
    30ce:	e753      	b.n	2f78 <_realloc_r+0x124>
    30d0:	4652      	mov	r2, sl
    30d2:	e749      	b.n	2f68 <_realloc_r+0x114>
    30d4:	4629      	mov	r1, r5
    30d6:	4650      	mov	r0, sl
    30d8:	461e      	mov	r6, r3
    30da:	465f      	mov	r7, fp
    30dc:	f7ff fe4a 	bl	2d74 <memmove>
    30e0:	4655      	mov	r5, sl
    30e2:	e749      	b.n	2f78 <_realloc_r+0x124>
    30e4:	4629      	mov	r1, r5
    30e6:	f7ff fe45 	bl	2d74 <memmove>
    30ea:	e6ff      	b.n	2eec <_realloc_r+0x98>
    30ec:	4427      	add	r7, r4
    30ee:	eba9 0904 	sub.w	r9, r9, r4
    30f2:	f049 0201 	orr.w	r2, r9, #1
    30f6:	609f      	str	r7, [r3, #8]
    30f8:	607a      	str	r2, [r7, #4]
    30fa:	f855 3c04 	ldr.w	r3, [r5, #-4]
    30fe:	f003 0301 	and.w	r3, r3, #1
    3102:	431c      	orrs	r4, r3
    3104:	4640      	mov	r0, r8
    3106:	f845 4c04 	str.w	r4, [r5, #-4]
    310a:	f7ff fe9d 	bl	2e48 <__malloc_unlock>
    310e:	46aa      	mov	sl, r5
    3110:	e744      	b.n	2f9c <_realloc_r+0x148>
    3112:	f8cb 1010 	str.w	r1, [fp, #16]
    3116:	68e9      	ldr	r1, [r5, #12]
    3118:	f8cb 1014 	str.w	r1, [fp, #20]
    311c:	2a24      	cmp	r2, #36	; 0x24
    311e:	d010      	beq.n	3142 <_realloc_r+0x2ee>
    3120:	6929      	ldr	r1, [r5, #16]
    3122:	f10b 0218 	add.w	r2, fp, #24
    3126:	3510      	adds	r5, #16
    3128:	e71e      	b.n	2f68 <_realloc_r+0x114>
    312a:	68ab      	ldr	r3, [r5, #8]
    312c:	6083      	str	r3, [r0, #8]
    312e:	68eb      	ldr	r3, [r5, #12]
    3130:	60c3      	str	r3, [r0, #12]
    3132:	2a24      	cmp	r2, #36	; 0x24
    3134:	d010      	beq.n	3158 <_realloc_r+0x304>
    3136:	f105 0210 	add.w	r2, r5, #16
    313a:	f100 0310 	add.w	r3, r0, #16
    313e:	6929      	ldr	r1, [r5, #16]
    3140:	e6cf      	b.n	2ee2 <_realloc_r+0x8e>
    3142:	692a      	ldr	r2, [r5, #16]
    3144:	f8cb 2018 	str.w	r2, [fp, #24]
    3148:	696a      	ldr	r2, [r5, #20]
    314a:	f8cb 201c 	str.w	r2, [fp, #28]
    314e:	69a9      	ldr	r1, [r5, #24]
    3150:	f10b 0220 	add.w	r2, fp, #32
    3154:	3518      	adds	r5, #24
    3156:	e707      	b.n	2f68 <_realloc_r+0x114>
    3158:	692b      	ldr	r3, [r5, #16]
    315a:	6103      	str	r3, [r0, #16]
    315c:	696b      	ldr	r3, [r5, #20]
    315e:	6143      	str	r3, [r0, #20]
    3160:	69a9      	ldr	r1, [r5, #24]
    3162:	f105 0218 	add.w	r2, r5, #24
    3166:	f100 0318 	add.w	r3, r0, #24
    316a:	e6ba      	b.n	2ee2 <_realloc_r+0x8e>
    316c:	4652      	mov	r2, sl
    316e:	e76e      	b.n	304e <_realloc_r+0x1fa>
    3170:	4629      	mov	r1, r5
    3172:	4650      	mov	r0, sl
    3174:	9301      	str	r3, [sp, #4]
    3176:	f7ff fdfd 	bl	2d74 <memmove>
    317a:	9b01      	ldr	r3, [sp, #4]
    317c:	e76c      	b.n	3058 <_realloc_r+0x204>
    317e:	f8cb 1010 	str.w	r1, [fp, #16]
    3182:	68e9      	ldr	r1, [r5, #12]
    3184:	f8cb 1014 	str.w	r1, [fp, #20]
    3188:	2a24      	cmp	r2, #36	; 0x24
    318a:	d004      	beq.n	3196 <_realloc_r+0x342>
    318c:	6929      	ldr	r1, [r5, #16]
    318e:	f10b 0218 	add.w	r2, fp, #24
    3192:	3510      	adds	r5, #16
    3194:	e75b      	b.n	304e <_realloc_r+0x1fa>
    3196:	692a      	ldr	r2, [r5, #16]
    3198:	f8cb 2018 	str.w	r2, [fp, #24]
    319c:	696a      	ldr	r2, [r5, #20]
    319e:	f8cb 201c 	str.w	r2, [fp, #28]
    31a2:	69a9      	ldr	r1, [r5, #24]
    31a4:	f10b 0220 	add.w	r2, fp, #32
    31a8:	3518      	adds	r5, #24
    31aa:	e750      	b.n	304e <_realloc_r+0x1fa>
    31ac:	2000059c 	.word	0x2000059c

000031b0 <_sbrk_r>:
    31b0:	b538      	push	{r3, r4, r5, lr}
    31b2:	4c07      	ldr	r4, [pc, #28]	; (31d0 <_sbrk_r+0x20>)
    31b4:	2300      	movs	r3, #0
    31b6:	4605      	mov	r5, r0
    31b8:	4608      	mov	r0, r1
    31ba:	6023      	str	r3, [r4, #0]
    31bc:	f7fd fb12 	bl	7e4 <_sbrk>
    31c0:	1c43      	adds	r3, r0, #1
    31c2:	d000      	beq.n	31c6 <_sbrk_r+0x16>
    31c4:	bd38      	pop	{r3, r4, r5, pc}
    31c6:	6823      	ldr	r3, [r4, #0]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d0fb      	beq.n	31c4 <_sbrk_r+0x14>
    31cc:	602b      	str	r3, [r5, #0]
    31ce:	bd38      	pop	{r3, r4, r5, pc}
    31d0:	20001664 	.word	0x20001664

000031d4 <__sread>:
    31d4:	b510      	push	{r4, lr}
    31d6:	460c      	mov	r4, r1
    31d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    31dc:	f000 fa18 	bl	3610 <_read_r>
    31e0:	2800      	cmp	r0, #0
    31e2:	db03      	blt.n	31ec <__sread+0x18>
    31e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    31e6:	4403      	add	r3, r0
    31e8:	6523      	str	r3, [r4, #80]	; 0x50
    31ea:	bd10      	pop	{r4, pc}
    31ec:	89a3      	ldrh	r3, [r4, #12]
    31ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    31f2:	81a3      	strh	r3, [r4, #12]
    31f4:	bd10      	pop	{r4, pc}
    31f6:	bf00      	nop

000031f8 <__swrite>:
    31f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31fc:	4616      	mov	r6, r2
    31fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    3202:	461f      	mov	r7, r3
    3204:	05d3      	lsls	r3, r2, #23
    3206:	460c      	mov	r4, r1
    3208:	4605      	mov	r5, r0
    320a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    320e:	d507      	bpl.n	3220 <__swrite+0x28>
    3210:	2200      	movs	r2, #0
    3212:	2302      	movs	r3, #2
    3214:	f000 f9e6 	bl	35e4 <_lseek_r>
    3218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    321c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3220:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3224:	81a2      	strh	r2, [r4, #12]
    3226:	463b      	mov	r3, r7
    3228:	4632      	mov	r2, r6
    322a:	4628      	mov	r0, r5
    322c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3230:	f000 b922 	b.w	3478 <_write_r>

00003234 <__sseek>:
    3234:	b510      	push	{r4, lr}
    3236:	460c      	mov	r4, r1
    3238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    323c:	f000 f9d2 	bl	35e4 <_lseek_r>
    3240:	89a3      	ldrh	r3, [r4, #12]
    3242:	1c42      	adds	r2, r0, #1
    3244:	bf0e      	itee	eq
    3246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    324a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    324e:	6520      	strne	r0, [r4, #80]	; 0x50
    3250:	81a3      	strh	r3, [r4, #12]
    3252:	bd10      	pop	{r4, pc}

00003254 <__sclose>:
    3254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3258:	f000 b924 	b.w	34a4 <_close_r>
	...

00003280 <strlen>:
    3280:	f890 f000 	pld	[r0]
    3284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    3288:	f020 0107 	bic.w	r1, r0, #7
    328c:	f06f 0c00 	mvn.w	ip, #0
    3290:	f010 0407 	ands.w	r4, r0, #7
    3294:	f891 f020 	pld	[r1, #32]
    3298:	f040 8049 	bne.w	332e <strlen+0xae>
    329c:	f04f 0400 	mov.w	r4, #0
    32a0:	f06f 0007 	mvn.w	r0, #7
    32a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    32a8:	f891 f040 	pld	[r1, #64]	; 0x40
    32ac:	f100 0008 	add.w	r0, r0, #8
    32b0:	fa82 f24c 	uadd8	r2, r2, ip
    32b4:	faa4 f28c 	sel	r2, r4, ip
    32b8:	fa83 f34c 	uadd8	r3, r3, ip
    32bc:	faa2 f38c 	sel	r3, r2, ip
    32c0:	bb4b      	cbnz	r3, 3316 <strlen+0x96>
    32c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    32c6:	fa82 f24c 	uadd8	r2, r2, ip
    32ca:	f100 0008 	add.w	r0, r0, #8
    32ce:	faa4 f28c 	sel	r2, r4, ip
    32d2:	fa83 f34c 	uadd8	r3, r3, ip
    32d6:	faa2 f38c 	sel	r3, r2, ip
    32da:	b9e3      	cbnz	r3, 3316 <strlen+0x96>
    32dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    32e0:	fa82 f24c 	uadd8	r2, r2, ip
    32e4:	f100 0008 	add.w	r0, r0, #8
    32e8:	faa4 f28c 	sel	r2, r4, ip
    32ec:	fa83 f34c 	uadd8	r3, r3, ip
    32f0:	faa2 f38c 	sel	r3, r2, ip
    32f4:	b97b      	cbnz	r3, 3316 <strlen+0x96>
    32f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    32fa:	f101 0120 	add.w	r1, r1, #32
    32fe:	fa82 f24c 	uadd8	r2, r2, ip
    3302:	f100 0008 	add.w	r0, r0, #8
    3306:	faa4 f28c 	sel	r2, r4, ip
    330a:	fa83 f34c 	uadd8	r3, r3, ip
    330e:	faa2 f38c 	sel	r3, r2, ip
    3312:	2b00      	cmp	r3, #0
    3314:	d0c6      	beq.n	32a4 <strlen+0x24>
    3316:	2a00      	cmp	r2, #0
    3318:	bf04      	itt	eq
    331a:	3004      	addeq	r0, #4
    331c:	461a      	moveq	r2, r3
    331e:	ba12      	rev	r2, r2
    3320:	fab2 f282 	clz	r2, r2
    3324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    3328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    332c:	4770      	bx	lr
    332e:	e9d1 2300 	ldrd	r2, r3, [r1]
    3332:	f004 0503 	and.w	r5, r4, #3
    3336:	f1c4 0000 	rsb	r0, r4, #0
    333a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    333e:	f014 0f04 	tst.w	r4, #4
    3342:	f891 f040 	pld	[r1, #64]	; 0x40
    3346:	fa0c f505 	lsl.w	r5, ip, r5
    334a:	ea62 0205 	orn	r2, r2, r5
    334e:	bf1c      	itt	ne
    3350:	ea63 0305 	ornne	r3, r3, r5
    3354:	4662      	movne	r2, ip
    3356:	f04f 0400 	mov.w	r4, #0
    335a:	e7a9      	b.n	32b0 <strlen+0x30>

0000335c <__swbuf_r>:
    335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    335e:	460d      	mov	r5, r1
    3360:	4614      	mov	r4, r2
    3362:	4606      	mov	r6, r0
    3364:	b110      	cbz	r0, 336c <__swbuf_r+0x10>
    3366:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3368:	2b00      	cmp	r3, #0
    336a:	d043      	beq.n	33f4 <__swbuf_r+0x98>
    336c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    3370:	69a3      	ldr	r3, [r4, #24]
    3372:	60a3      	str	r3, [r4, #8]
    3374:	b291      	uxth	r1, r2
    3376:	0708      	lsls	r0, r1, #28
    3378:	d51b      	bpl.n	33b2 <__swbuf_r+0x56>
    337a:	6923      	ldr	r3, [r4, #16]
    337c:	b1cb      	cbz	r3, 33b2 <__swbuf_r+0x56>
    337e:	b2ed      	uxtb	r5, r5
    3380:	0489      	lsls	r1, r1, #18
    3382:	462f      	mov	r7, r5
    3384:	d522      	bpl.n	33cc <__swbuf_r+0x70>
    3386:	6822      	ldr	r2, [r4, #0]
    3388:	6961      	ldr	r1, [r4, #20]
    338a:	1ad3      	subs	r3, r2, r3
    338c:	4299      	cmp	r1, r3
    338e:	dd29      	ble.n	33e4 <__swbuf_r+0x88>
    3390:	3301      	adds	r3, #1
    3392:	68a1      	ldr	r1, [r4, #8]
    3394:	1c50      	adds	r0, r2, #1
    3396:	3901      	subs	r1, #1
    3398:	60a1      	str	r1, [r4, #8]
    339a:	6020      	str	r0, [r4, #0]
    339c:	7015      	strb	r5, [r2, #0]
    339e:	6962      	ldr	r2, [r4, #20]
    33a0:	429a      	cmp	r2, r3
    33a2:	d02a      	beq.n	33fa <__swbuf_r+0x9e>
    33a4:	89a3      	ldrh	r3, [r4, #12]
    33a6:	07db      	lsls	r3, r3, #31
    33a8:	d501      	bpl.n	33ae <__swbuf_r+0x52>
    33aa:	2d0a      	cmp	r5, #10
    33ac:	d025      	beq.n	33fa <__swbuf_r+0x9e>
    33ae:	4638      	mov	r0, r7
    33b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33b2:	4621      	mov	r1, r4
    33b4:	4630      	mov	r0, r6
    33b6:	f7fe fb9d 	bl	1af4 <__swsetup_r>
    33ba:	bb20      	cbnz	r0, 3406 <__swbuf_r+0xaa>
    33bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    33c0:	6923      	ldr	r3, [r4, #16]
    33c2:	b291      	uxth	r1, r2
    33c4:	b2ed      	uxtb	r5, r5
    33c6:	0489      	lsls	r1, r1, #18
    33c8:	462f      	mov	r7, r5
    33ca:	d4dc      	bmi.n	3386 <__swbuf_r+0x2a>
    33cc:	6e61      	ldr	r1, [r4, #100]	; 0x64
    33ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    33d2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
    33d6:	81a2      	strh	r2, [r4, #12]
    33d8:	6822      	ldr	r2, [r4, #0]
    33da:	6661      	str	r1, [r4, #100]	; 0x64
    33dc:	6961      	ldr	r1, [r4, #20]
    33de:	1ad3      	subs	r3, r2, r3
    33e0:	4299      	cmp	r1, r3
    33e2:	dcd5      	bgt.n	3390 <__swbuf_r+0x34>
    33e4:	4621      	mov	r1, r4
    33e6:	4630      	mov	r0, r6
    33e8:	f7fe fc94 	bl	1d14 <_fflush_r>
    33ec:	b958      	cbnz	r0, 3406 <__swbuf_r+0xaa>
    33ee:	6822      	ldr	r2, [r4, #0]
    33f0:	2301      	movs	r3, #1
    33f2:	e7ce      	b.n	3392 <__swbuf_r+0x36>
    33f4:	f7fe fcea 	bl	1dcc <__sinit>
    33f8:	e7b8      	b.n	336c <__swbuf_r+0x10>
    33fa:	4621      	mov	r1, r4
    33fc:	4630      	mov	r0, r6
    33fe:	f7fe fc89 	bl	1d14 <_fflush_r>
    3402:	2800      	cmp	r0, #0
    3404:	d0d3      	beq.n	33ae <__swbuf_r+0x52>
    3406:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    340a:	e7d0      	b.n	33ae <__swbuf_r+0x52>

0000340c <_wcrtomb_r>:
    340c:	b5f0      	push	{r4, r5, r6, r7, lr}
    340e:	4c11      	ldr	r4, [pc, #68]	; (3454 <_wcrtomb_r+0x48>)
    3410:	6824      	ldr	r4, [r4, #0]
    3412:	b085      	sub	sp, #20
    3414:	4606      	mov	r6, r0
    3416:	6b64      	ldr	r4, [r4, #52]	; 0x34
    3418:	461f      	mov	r7, r3
    341a:	b151      	cbz	r1, 3432 <_wcrtomb_r+0x26>
    341c:	4d0e      	ldr	r5, [pc, #56]	; (3458 <_wcrtomb_r+0x4c>)
    341e:	2c00      	cmp	r4, #0
    3420:	bf08      	it	eq
    3422:	462c      	moveq	r4, r5
    3424:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
    3428:	47a0      	blx	r4
    342a:	1c43      	adds	r3, r0, #1
    342c:	d00c      	beq.n	3448 <_wcrtomb_r+0x3c>
    342e:	b005      	add	sp, #20
    3430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3432:	4a09      	ldr	r2, [pc, #36]	; (3458 <_wcrtomb_r+0x4c>)
    3434:	2c00      	cmp	r4, #0
    3436:	bf08      	it	eq
    3438:	4614      	moveq	r4, r2
    343a:	460a      	mov	r2, r1
    343c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
    3440:	a901      	add	r1, sp, #4
    3442:	47a0      	blx	r4
    3444:	1c43      	adds	r3, r0, #1
    3446:	d1f2      	bne.n	342e <_wcrtomb_r+0x22>
    3448:	2200      	movs	r2, #0
    344a:	238a      	movs	r3, #138	; 0x8a
    344c:	603a      	str	r2, [r7, #0]
    344e:	6033      	str	r3, [r6, #0]
    3450:	b005      	add	sp, #20
    3452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3454:	20000000 	.word	0x20000000
    3458:	20000430 	.word	0x20000430

0000345c <__ascii_wctomb>:
    345c:	b121      	cbz	r1, 3468 <__ascii_wctomb+0xc>
    345e:	2aff      	cmp	r2, #255	; 0xff
    3460:	d804      	bhi.n	346c <__ascii_wctomb+0x10>
    3462:	700a      	strb	r2, [r1, #0]
    3464:	2001      	movs	r0, #1
    3466:	4770      	bx	lr
    3468:	4608      	mov	r0, r1
    346a:	4770      	bx	lr
    346c:	238a      	movs	r3, #138	; 0x8a
    346e:	6003      	str	r3, [r0, #0]
    3470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3474:	4770      	bx	lr
    3476:	bf00      	nop

00003478 <_write_r>:
    3478:	b570      	push	{r4, r5, r6, lr}
    347a:	460d      	mov	r5, r1
    347c:	4c08      	ldr	r4, [pc, #32]	; (34a0 <_write_r+0x28>)
    347e:	4611      	mov	r1, r2
    3480:	4606      	mov	r6, r0
    3482:	461a      	mov	r2, r3
    3484:	4628      	mov	r0, r5
    3486:	2300      	movs	r3, #0
    3488:	6023      	str	r3, [r4, #0]
    348a:	f7fd f989 	bl	7a0 <_write>
    348e:	1c43      	adds	r3, r0, #1
    3490:	d000      	beq.n	3494 <_write_r+0x1c>
    3492:	bd70      	pop	{r4, r5, r6, pc}
    3494:	6823      	ldr	r3, [r4, #0]
    3496:	2b00      	cmp	r3, #0
    3498:	d0fb      	beq.n	3492 <_write_r+0x1a>
    349a:	6033      	str	r3, [r6, #0]
    349c:	bd70      	pop	{r4, r5, r6, pc}
    349e:	bf00      	nop
    34a0:	20001664 	.word	0x20001664

000034a4 <_close_r>:
    34a4:	b538      	push	{r3, r4, r5, lr}
    34a6:	4c07      	ldr	r4, [pc, #28]	; (34c4 <_close_r+0x20>)
    34a8:	2300      	movs	r3, #0
    34aa:	4605      	mov	r5, r0
    34ac:	4608      	mov	r0, r1
    34ae:	6023      	str	r3, [r4, #0]
    34b0:	f000 f93e 	bl	3730 <_close>
    34b4:	1c43      	adds	r3, r0, #1
    34b6:	d000      	beq.n	34ba <_close_r+0x16>
    34b8:	bd38      	pop	{r3, r4, r5, pc}
    34ba:	6823      	ldr	r3, [r4, #0]
    34bc:	2b00      	cmp	r3, #0
    34be:	d0fb      	beq.n	34b8 <_close_r+0x14>
    34c0:	602b      	str	r3, [r5, #0]
    34c2:	bd38      	pop	{r3, r4, r5, pc}
    34c4:	20001664 	.word	0x20001664

000034c8 <_fclose_r>:
    34c8:	b570      	push	{r4, r5, r6, lr}
    34ca:	2900      	cmp	r1, #0
    34cc:	d048      	beq.n	3560 <_fclose_r+0x98>
    34ce:	4605      	mov	r5, r0
    34d0:	460c      	mov	r4, r1
    34d2:	b110      	cbz	r0, 34da <_fclose_r+0x12>
    34d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    34d6:	2b00      	cmp	r3, #0
    34d8:	d048      	beq.n	356c <_fclose_r+0xa4>
    34da:	6e62      	ldr	r2, [r4, #100]	; 0x64
    34dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    34e0:	07d0      	lsls	r0, r2, #31
    34e2:	d440      	bmi.n	3566 <_fclose_r+0x9e>
    34e4:	0599      	lsls	r1, r3, #22
    34e6:	d530      	bpl.n	354a <_fclose_r+0x82>
    34e8:	4621      	mov	r1, r4
    34ea:	4628      	mov	r0, r5
    34ec:	f7fe fb68 	bl	1bc0 <__sflush_r>
    34f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    34f2:	4606      	mov	r6, r0
    34f4:	b133      	cbz	r3, 3504 <_fclose_r+0x3c>
    34f6:	69e1      	ldr	r1, [r4, #28]
    34f8:	4628      	mov	r0, r5
    34fa:	4798      	blx	r3
    34fc:	2800      	cmp	r0, #0
    34fe:	bfb8      	it	lt
    3500:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    3504:	89a3      	ldrh	r3, [r4, #12]
    3506:	061a      	lsls	r2, r3, #24
    3508:	d43c      	bmi.n	3584 <_fclose_r+0xbc>
    350a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    350c:	b141      	cbz	r1, 3520 <_fclose_r+0x58>
    350e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    3512:	4299      	cmp	r1, r3
    3514:	d002      	beq.n	351c <_fclose_r+0x54>
    3516:	4628      	mov	r0, r5
    3518:	f7fe fd62 	bl	1fe0 <_free_r>
    351c:	2300      	movs	r3, #0
    351e:	6323      	str	r3, [r4, #48]	; 0x30
    3520:	6c61      	ldr	r1, [r4, #68]	; 0x44
    3522:	b121      	cbz	r1, 352e <_fclose_r+0x66>
    3524:	4628      	mov	r0, r5
    3526:	f7fe fd5b 	bl	1fe0 <_free_r>
    352a:	2300      	movs	r3, #0
    352c:	6463      	str	r3, [r4, #68]	; 0x44
    352e:	f7fe fc79 	bl	1e24 <__sfp_lock_acquire>
    3532:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3534:	2200      	movs	r2, #0
    3536:	07db      	lsls	r3, r3, #31
    3538:	81a2      	strh	r2, [r4, #12]
    353a:	d51f      	bpl.n	357c <_fclose_r+0xb4>
    353c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    353e:	f7fc feed 	bl	31c <__retarget_lock_close_recursive>
    3542:	f7fe fc75 	bl	1e30 <__sfp_lock_release>
    3546:	4630      	mov	r0, r6
    3548:	bd70      	pop	{r4, r5, r6, pc}
    354a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    354c:	f7fc fee8 	bl	320 <__retarget_lock_acquire_recursive>
    3550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3554:	2b00      	cmp	r3, #0
    3556:	d1c7      	bne.n	34e8 <_fclose_r+0x20>
    3558:	6e66      	ldr	r6, [r4, #100]	; 0x64
    355a:	f016 0601 	ands.w	r6, r6, #1
    355e:	d016      	beq.n	358e <_fclose_r+0xc6>
    3560:	2600      	movs	r6, #0
    3562:	4630      	mov	r0, r6
    3564:	bd70      	pop	{r4, r5, r6, pc}
    3566:	2b00      	cmp	r3, #0
    3568:	d0fa      	beq.n	3560 <_fclose_r+0x98>
    356a:	e7bd      	b.n	34e8 <_fclose_r+0x20>
    356c:	f7fe fc2e 	bl	1dcc <__sinit>
    3570:	6e62      	ldr	r2, [r4, #100]	; 0x64
    3572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3576:	07d0      	lsls	r0, r2, #31
    3578:	d4f5      	bmi.n	3566 <_fclose_r+0x9e>
    357a:	e7b3      	b.n	34e4 <_fclose_r+0x1c>
    357c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    357e:	f7fc fed1 	bl	324 <__retarget_lock_release_recursive>
    3582:	e7db      	b.n	353c <_fclose_r+0x74>
    3584:	6921      	ldr	r1, [r4, #16]
    3586:	4628      	mov	r0, r5
    3588:	f7fe fd2a 	bl	1fe0 <_free_r>
    358c:	e7bd      	b.n	350a <_fclose_r+0x42>
    358e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3590:	f7fc fec8 	bl	324 <__retarget_lock_release_recursive>
    3594:	4630      	mov	r0, r6
    3596:	bd70      	pop	{r4, r5, r6, pc}

00003598 <_fstat_r>:
    3598:	b538      	push	{r3, r4, r5, lr}
    359a:	460b      	mov	r3, r1
    359c:	4c07      	ldr	r4, [pc, #28]	; (35bc <_fstat_r+0x24>)
    359e:	4605      	mov	r5, r0
    35a0:	4611      	mov	r1, r2
    35a2:	4618      	mov	r0, r3
    35a4:	2300      	movs	r3, #0
    35a6:	6023      	str	r3, [r4, #0]
    35a8:	f7fd f927 	bl	7fa <_fstat>
    35ac:	1c43      	adds	r3, r0, #1
    35ae:	d000      	beq.n	35b2 <_fstat_r+0x1a>
    35b0:	bd38      	pop	{r3, r4, r5, pc}
    35b2:	6823      	ldr	r3, [r4, #0]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d0fb      	beq.n	35b0 <_fstat_r+0x18>
    35b8:	602b      	str	r3, [r5, #0]
    35ba:	bd38      	pop	{r3, r4, r5, pc}
    35bc:	20001664 	.word	0x20001664

000035c0 <_isatty_r>:
    35c0:	b538      	push	{r3, r4, r5, lr}
    35c2:	4c07      	ldr	r4, [pc, #28]	; (35e0 <_isatty_r+0x20>)
    35c4:	2300      	movs	r3, #0
    35c6:	4605      	mov	r5, r0
    35c8:	4608      	mov	r0, r1
    35ca:	6023      	str	r3, [r4, #0]
    35cc:	f000 f8e6 	bl	379c <_isatty>
    35d0:	1c43      	adds	r3, r0, #1
    35d2:	d000      	beq.n	35d6 <_isatty_r+0x16>
    35d4:	bd38      	pop	{r3, r4, r5, pc}
    35d6:	6823      	ldr	r3, [r4, #0]
    35d8:	2b00      	cmp	r3, #0
    35da:	d0fb      	beq.n	35d4 <_isatty_r+0x14>
    35dc:	602b      	str	r3, [r5, #0]
    35de:	bd38      	pop	{r3, r4, r5, pc}
    35e0:	20001664 	.word	0x20001664

000035e4 <_lseek_r>:
    35e4:	b570      	push	{r4, r5, r6, lr}
    35e6:	460d      	mov	r5, r1
    35e8:	4c08      	ldr	r4, [pc, #32]	; (360c <_lseek_r+0x28>)
    35ea:	4611      	mov	r1, r2
    35ec:	4606      	mov	r6, r0
    35ee:	461a      	mov	r2, r3
    35f0:	4628      	mov	r0, r5
    35f2:	2300      	movs	r3, #0
    35f4:	6023      	str	r3, [r4, #0]
    35f6:	f000 f899 	bl	372c <_lseek>
    35fa:	1c43      	adds	r3, r0, #1
    35fc:	d000      	beq.n	3600 <_lseek_r+0x1c>
    35fe:	bd70      	pop	{r4, r5, r6, pc}
    3600:	6823      	ldr	r3, [r4, #0]
    3602:	2b00      	cmp	r3, #0
    3604:	d0fb      	beq.n	35fe <_lseek_r+0x1a>
    3606:	6033      	str	r3, [r6, #0]
    3608:	bd70      	pop	{r4, r5, r6, pc}
    360a:	bf00      	nop
    360c:	20001664 	.word	0x20001664

00003610 <_read_r>:
    3610:	b570      	push	{r4, r5, r6, lr}
    3612:	460d      	mov	r5, r1
    3614:	4c08      	ldr	r4, [pc, #32]	; (3638 <_read_r+0x28>)
    3616:	4611      	mov	r1, r2
    3618:	4606      	mov	r6, r0
    361a:	461a      	mov	r2, r3
    361c:	4628      	mov	r0, r5
    361e:	2300      	movs	r3, #0
    3620:	6023      	str	r3, [r4, #0]
    3622:	f7fd f8f6 	bl	812 <_read>
    3626:	1c43      	adds	r3, r0, #1
    3628:	d000      	beq.n	362c <_read_r+0x1c>
    362a:	bd70      	pop	{r4, r5, r6, pc}
    362c:	6823      	ldr	r3, [r4, #0]
    362e:	2b00      	cmp	r3, #0
    3630:	d0fb      	beq.n	362a <_read_r+0x1a>
    3632:	6033      	str	r3, [r6, #0]
    3634:	bd70      	pop	{r4, r5, r6, pc}
    3636:	bf00      	nop
    3638:	20001664 	.word	0x20001664

0000363c <findslot>:
    363c:	4b0b      	ldr	r3, [pc, #44]	; (366c <findslot+0x30>)
    363e:	681b      	ldr	r3, [r3, #0]
    3640:	b510      	push	{r4, lr}
    3642:	4604      	mov	r4, r0
    3644:	b10b      	cbz	r3, 364a <findslot+0xe>
    3646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3648:	b14a      	cbz	r2, 365e <findslot+0x22>
    364a:	2c13      	cmp	r4, #19
    364c:	d80b      	bhi.n	3666 <findslot+0x2a>
    364e:	4808      	ldr	r0, [pc, #32]	; (3670 <findslot+0x34>)
    3650:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
    3654:	3301      	adds	r3, #1
    3656:	d006      	beq.n	3666 <findslot+0x2a>
    3658:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    365c:	bd10      	pop	{r4, pc}
    365e:	4618      	mov	r0, r3
    3660:	f7fe fbb4 	bl	1dcc <__sinit>
    3664:	e7f1      	b.n	364a <findslot+0xe>
    3666:	2000      	movs	r0, #0
    3668:	bd10      	pop	{r4, pc}
    366a:	bf00      	nop
    366c:	20000000 	.word	0x20000000
    3670:	20001304 	.word	0x20001304

00003674 <checkerror.part.0>:
    3674:	b570      	push	{r4, r5, r6, lr}
    3676:	f003 f809 	bl	668c <__errno>
    367a:	2413      	movs	r4, #19
    367c:	4605      	mov	r5, r0
    367e:	2600      	movs	r6, #0
    3680:	4620      	mov	r0, r4
    3682:	4631      	mov	r1, r6
    3684:	beab      	bkpt	0x00ab
    3686:	4604      	mov	r4, r0
    3688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    368c:	602c      	str	r4, [r5, #0]
    368e:	bd70      	pop	{r4, r5, r6, pc}

00003690 <_swilseek>:
    3690:	b5f0      	push	{r4, r5, r6, r7, lr}
    3692:	b083      	sub	sp, #12
    3694:	460d      	mov	r5, r1
    3696:	4614      	mov	r4, r2
    3698:	f7ff ffd0 	bl	363c <findslot>
    369c:	2800      	cmp	r0, #0
    369e:	d03d      	beq.n	371c <_swilseek+0x8c>
    36a0:	2c02      	cmp	r4, #2
    36a2:	d834      	bhi.n	370e <_swilseek+0x7e>
    36a4:	2c01      	cmp	r4, #1
    36a6:	4606      	mov	r6, r0
    36a8:	d01f      	beq.n	36ea <_swilseek+0x5a>
    36aa:	2c02      	cmp	r4, #2
    36ac:	6803      	ldr	r3, [r0, #0]
    36ae:	d00f      	beq.n	36d0 <_swilseek+0x40>
    36b0:	466f      	mov	r7, sp
    36b2:	e9cd 3500 	strd	r3, r5, [sp]
    36b6:	240a      	movs	r4, #10
    36b8:	4620      	mov	r0, r4
    36ba:	4639      	mov	r1, r7
    36bc:	beab      	bkpt	0x00ab
    36be:	4604      	mov	r4, r0
    36c0:	1c63      	adds	r3, r4, #1
    36c2:	d018      	beq.n	36f6 <_swilseek+0x66>
    36c4:	2c00      	cmp	r4, #0
    36c6:	db1f      	blt.n	3708 <_swilseek+0x78>
    36c8:	6075      	str	r5, [r6, #4]
    36ca:	4628      	mov	r0, r5
    36cc:	b003      	add	sp, #12
    36ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36d0:	af02      	add	r7, sp, #8
    36d2:	240c      	movs	r4, #12
    36d4:	f847 3d08 	str.w	r3, [r7, #-8]!
    36d8:	4620      	mov	r0, r4
    36da:	4639      	mov	r1, r7
    36dc:	beab      	bkpt	0x00ab
    36de:	4604      	mov	r4, r0
    36e0:	1c61      	adds	r1, r4, #1
    36e2:	d00c      	beq.n	36fe <_swilseek+0x6e>
    36e4:	4425      	add	r5, r4
    36e6:	6833      	ldr	r3, [r6, #0]
    36e8:	e7e3      	b.n	36b2 <_swilseek+0x22>
    36ea:	6840      	ldr	r0, [r0, #4]
    36ec:	182d      	adds	r5, r5, r0
    36ee:	d40e      	bmi.n	370e <_swilseek+0x7e>
    36f0:	6833      	ldr	r3, [r6, #0]
    36f2:	466f      	mov	r7, sp
    36f4:	e7dd      	b.n	36b2 <_swilseek+0x22>
    36f6:	f7ff ffbd 	bl	3674 <checkerror.part.0>
    36fa:	4604      	mov	r4, r0
    36fc:	e7e2      	b.n	36c4 <_swilseek+0x34>
    36fe:	f7ff ffb9 	bl	3674 <checkerror.part.0>
    3702:	1c42      	adds	r2, r0, #1
    3704:	4604      	mov	r4, r0
    3706:	d1ed      	bne.n	36e4 <_swilseek+0x54>
    3708:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    370c:	e7dd      	b.n	36ca <_swilseek+0x3a>
    370e:	f002 ffbd 	bl	668c <__errno>
    3712:	2316      	movs	r3, #22
    3714:	6003      	str	r3, [r0, #0]
    3716:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    371a:	e7d6      	b.n	36ca <_swilseek+0x3a>
    371c:	f002 ffb6 	bl	668c <__errno>
    3720:	2309      	movs	r3, #9
    3722:	6003      	str	r3, [r0, #0]
    3724:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3728:	e7cf      	b.n	36ca <_swilseek+0x3a>
    372a:	bf00      	nop

0000372c <_lseek>:
    372c:	f7ff bfb0 	b.w	3690 <_swilseek>

00003730 <_close>:
    3730:	b570      	push	{r4, r5, r6, lr}
    3732:	b082      	sub	sp, #8
    3734:	4604      	mov	r4, r0
    3736:	f7ff ff81 	bl	363c <findslot>
    373a:	b328      	cbz	r0, 3788 <_close+0x58>
    373c:	3c01      	subs	r4, #1
    373e:	2c01      	cmp	r4, #1
    3740:	4606      	mov	r6, r0
    3742:	d911      	bls.n	3768 <_close+0x38>
    3744:	ad02      	add	r5, sp, #8
    3746:	6833      	ldr	r3, [r6, #0]
    3748:	f845 3d04 	str.w	r3, [r5, #-4]!
    374c:	2402      	movs	r4, #2
    374e:	4620      	mov	r0, r4
    3750:	4629      	mov	r1, r5
    3752:	beab      	bkpt	0x00ab
    3754:	4604      	mov	r4, r0
    3756:	1c63      	adds	r3, r4, #1
    3758:	4620      	mov	r0, r4
    375a:	d010      	beq.n	377e <_close+0x4e>
    375c:	b910      	cbnz	r0, 3764 <_close+0x34>
    375e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3762:	6033      	str	r3, [r6, #0]
    3764:	b002      	add	sp, #8
    3766:	bd70      	pop	{r4, r5, r6, pc}
    3768:	4b0b      	ldr	r3, [pc, #44]	; (3798 <_close+0x68>)
    376a:	689a      	ldr	r2, [r3, #8]
    376c:	691b      	ldr	r3, [r3, #16]
    376e:	429a      	cmp	r2, r3
    3770:	d1e8      	bne.n	3744 <_close+0x14>
    3772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3776:	6003      	str	r3, [r0, #0]
    3778:	2000      	movs	r0, #0
    377a:	b002      	add	sp, #8
    377c:	bd70      	pop	{r4, r5, r6, pc}
    377e:	f7ff ff79 	bl	3674 <checkerror.part.0>
    3782:	2800      	cmp	r0, #0
    3784:	d0eb      	beq.n	375e <_close+0x2e>
    3786:	e7ed      	b.n	3764 <_close+0x34>
    3788:	f002 ff80 	bl	668c <__errno>
    378c:	2309      	movs	r3, #9
    378e:	6003      	str	r3, [r0, #0]
    3790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3794:	e7e6      	b.n	3764 <_close+0x34>
    3796:	bf00      	nop
    3798:	20001304 	.word	0x20001304

0000379c <_isatty>:
    379c:	b570      	push	{r4, r5, r6, lr}
    379e:	f7ff ff4d 	bl	363c <findslot>
    37a2:	4604      	mov	r4, r0
    37a4:	b190      	cbz	r0, 37cc <_isatty+0x30>
    37a6:	2509      	movs	r5, #9
    37a8:	4628      	mov	r0, r5
    37aa:	4621      	mov	r1, r4
    37ac:	beab      	bkpt	0x00ab
    37ae:	4604      	mov	r4, r0
    37b0:	2c01      	cmp	r4, #1
    37b2:	d009      	beq.n	37c8 <_isatty+0x2c>
    37b4:	f002 ff6a 	bl	668c <__errno>
    37b8:	2513      	movs	r5, #19
    37ba:	4606      	mov	r6, r0
    37bc:	2400      	movs	r4, #0
    37be:	4628      	mov	r0, r5
    37c0:	4621      	mov	r1, r4
    37c2:	beab      	bkpt	0x00ab
    37c4:	4605      	mov	r5, r0
    37c6:	6035      	str	r5, [r6, #0]
    37c8:	4620      	mov	r0, r4
    37ca:	bd70      	pop	{r4, r5, r6, pc}
    37cc:	f002 ff5e 	bl	668c <__errno>
    37d0:	2209      	movs	r2, #9
    37d2:	6002      	str	r2, [r0, #0]
    37d4:	4620      	mov	r0, r4
    37d6:	bd70      	pop	{r4, r5, r6, pc}

000037d8 <USB0DeviceIntHandler>:
//! \return None.
//
//*****************************************************************************
void
USB0DeviceIntHandler(void)
{
    37d8:	b580      	push	{r7, lr}
    37da:	b082      	sub	sp, #8
    37dc:	af00      	add	r7, sp, #0
    unsigned long ulStatus;

    //
    // Get the controller interrupt status.
    //
    ulStatus = MAP_USBIntStatusControl(USB0_BASE);
    37de:	4b07      	ldr	r3, [pc, #28]	; (37fc <USB0DeviceIntHandler+0x24>)
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	33c8      	adds	r3, #200	; 0xc8
    37e4:	681b      	ldr	r3, [r3, #0]
    37e6:	4806      	ldr	r0, [pc, #24]	; (3800 <USB0DeviceIntHandler+0x28>)
    37e8:	4798      	blx	r3
    37ea:	6078      	str	r0, [r7, #4]

    //
    // Call the internal handler.
    //
    USBDeviceIntHandlerInternal(0, ulStatus);
    37ec:	6879      	ldr	r1, [r7, #4]
    37ee:	2000      	movs	r0, #0
    37f0:	f001 fb32 	bl	4e58 <USBDeviceIntHandlerInternal>
}
    37f4:	bf00      	nop
    37f6:	3708      	adds	r7, #8
    37f8:	46bd      	mov	sp, r7
    37fa:	bd80      	pop	{r7, pc}
    37fc:	01000050 	.word	0x01000050
    3800:	40050000 	.word	0x40050000

00003804 <SetDeferredOpFlag>:
//
//*****************************************************************************
static void
SetDeferredOpFlag(volatile unsigned short *pusDeferredOp, unsigned short usBit,
                  tBoolean bSet)
{
    3804:	b480      	push	{r7}
    3806:	b083      	sub	sp, #12
    3808:	af00      	add	r7, sp, #0
    380a:	6078      	str	r0, [r7, #4]
    380c:	460b      	mov	r3, r1
    380e:	807b      	strh	r3, [r7, #2]
    3810:	4613      	mov	r3, r2
    3812:	707b      	strb	r3, [r7, #1]
    //
    // Set the flag bit to 1 or 0 using a bitband access.
    //
    HWREGBITH(pusDeferredOp, usBit) = bSet ? 1 : 0;
    3814:	787b      	ldrb	r3, [r7, #1]
    3816:	2b00      	cmp	r3, #0
    3818:	bf14      	ite	ne
    381a:	2301      	movne	r3, #1
    381c:	2300      	moveq	r3, #0
    381e:	b2d9      	uxtb	r1, r3
    3820:	687b      	ldr	r3, [r7, #4]
    3822:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
    3826:	687b      	ldr	r3, [r7, #4]
    3828:	015b      	lsls	r3, r3, #5
    382a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    382e:	f023 031f 	bic.w	r3, r3, #31
    3832:	4313      	orrs	r3, r2
    3834:	887a      	ldrh	r2, [r7, #2]
    3836:	0092      	lsls	r2, r2, #2
    3838:	4313      	orrs	r3, r2
    383a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    383e:	b28a      	uxth	r2, r1
    3840:	801a      	strh	r2, [r3, #0]
}
    3842:	bf00      	nop
    3844:	370c      	adds	r7, #12
    3846:	46bd      	mov	sp, r7
    3848:	f85d 7b04 	ldr.w	r7, [sp], #4
    384c:	4770      	bx	lr
	...

00003850 <ProcessDataFromHost>:
// \return Returns \b true on success or \b false on failure.
//
//*****************************************************************************
static tBoolean
ProcessDataFromHost(const tUSBDBulkDevice *psDevice, unsigned long ulStatus)
{
    3850:	b590      	push	{r4, r7, lr}
    3852:	b087      	sub	sp, #28
    3854:	af00      	add	r7, sp, #0
    3856:	6078      	str	r0, [r7, #4]
    3858:	6039      	str	r1, [r7, #0]
    tBulkInstance *psInst;

    //
    // Get a pointer to our instance data.
    //
    psInst = psDevice->psPrivateBulkData;
    385a:	687b      	ldr	r3, [r7, #4]
    385c:	6a1b      	ldr	r3, [r3, #32]
    385e:	617b      	str	r3, [r7, #20]

    //
    // Get the endpoint status to see why we were called.
    //
    ulEPStatus = MAP_USBEndpointStatus(USB0_BASE, psInst->ucOUTEndpoint);
    3860:	4b25      	ldr	r3, [pc, #148]	; (38f8 <ProcessDataFromHost+0xa8>)
    3862:	681b      	ldr	r3, [r3, #0]
    3864:	3338      	adds	r3, #56	; 0x38
    3866:	681b      	ldr	r3, [r3, #0]
    3868:	461a      	mov	r2, r3
    386a:	697b      	ldr	r3, [r7, #20]
    386c:	7d1b      	ldrb	r3, [r3, #20]
    386e:	4619      	mov	r1, r3
    3870:	4822      	ldr	r0, [pc, #136]	; (38fc <ProcessDataFromHost+0xac>)
    3872:	4790      	blx	r2
    3874:	6138      	str	r0, [r7, #16]

    //
    // Clear the status bits.
    //
    MAP_USBDevEndpointStatusClear(USB0_BASE, psInst->ucOUTEndpoint, ulEPStatus);
    3876:	4b20      	ldr	r3, [pc, #128]	; (38f8 <ProcessDataFromHost+0xa8>)
    3878:	681b      	ldr	r3, [r3, #0]
    387a:	3324      	adds	r3, #36	; 0x24
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	461c      	mov	r4, r3
    3880:	697b      	ldr	r3, [r7, #20]
    3882:	7d1b      	ldrb	r3, [r3, #20]
    3884:	693a      	ldr	r2, [r7, #16]
    3886:	4619      	mov	r1, r3
    3888:	481c      	ldr	r0, [pc, #112]	; (38fc <ProcessDataFromHost+0xac>)
    388a:	47a0      	blx	r4

    //
    // Has a packet been received?
    //
    if(ulEPStatus & USB_DEV_RX_PKT_RDY)
    388c:	693b      	ldr	r3, [r7, #16]
    388e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    3892:	2b00      	cmp	r3, #0
    3894:	d01c      	beq.n	38d0 <ProcessDataFromHost+0x80>
        // Set the flag we use to indicate that a packet read is pending.  This
        // will be cleared if the packet is read.  If the client doesn't read
        // the packet in the context of the USB_EVENT_RX_AVAILABLE callback,
        // the event will be signaled later during tick processing.
        //
        SetDeferredOpFlag(&psInst->usDeferredOpFlags, BULK_DO_PACKET_RX, true);
    3896:	697b      	ldr	r3, [r7, #20]
    3898:	330e      	adds	r3, #14
    389a:	2201      	movs	r2, #1
    389c:	2105      	movs	r1, #5
    389e:	4618      	mov	r0, r3
    38a0:	f7ff ffb0 	bl	3804 <SetDeferredOpFlag>

        //
        // How big is the packet we've just been sent?
        //
        ulSize = MAP_USBEndpointDataAvail(psInst->ulUSBBase,
    38a4:	4b14      	ldr	r3, [pc, #80]	; (38f8 <ProcessDataFromHost+0xa8>)
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	33b0      	adds	r3, #176	; 0xb0
    38aa:	681b      	ldr	r3, [r3, #0]
    38ac:	461a      	mov	r2, r3
    38ae:	697b      	ldr	r3, [r7, #20]
    38b0:	6818      	ldr	r0, [r3, #0]
                                          psInst->ucOUTEndpoint);
    38b2:	697b      	ldr	r3, [r7, #20]
    38b4:	7d1b      	ldrb	r3, [r3, #20]
        ulSize = MAP_USBEndpointDataAvail(psInst->ulUSBBase,
    38b6:	4619      	mov	r1, r3
    38b8:	4790      	blx	r2
    38ba:	60f8      	str	r0, [r7, #12]
        //
        // The receive channel is not blocked so let the caller know
        // that a packet is waiting.  The parameters are set to indicate
        // that the packet has not been read from the hardware FIFO yet.
        //
        psDevice->pfnRxCallback(psDevice->pvRxCBData,
    38bc:	687b      	ldr	r3, [r7, #4]
    38be:	689c      	ldr	r4, [r3, #8]
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	68d8      	ldr	r0, [r3, #12]
    38c4:	2300      	movs	r3, #0
    38c6:	68fa      	ldr	r2, [r7, #12]
    38c8:	2102      	movs	r1, #2
    38ca:	47a0      	blx	r4
                                    (void *)0);
        }
        return(false);
    }

    return(true);
    38cc:	2301      	movs	r3, #1
    38ce:	e00f      	b.n	38f0 <ProcessDataFromHost+0xa0>
        if(ulEPStatus & USB_RX_ERROR_FLAGS)
    38d0:	693b      	ldr	r3, [r7, #16]
    38d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
    38d6:	2b00      	cmp	r3, #0
    38d8:	d009      	beq.n	38ee <ProcessDataFromHost+0x9e>
            psDevice->pfnRxCallback(psDevice->pvRxCBData,
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	689c      	ldr	r4, [r3, #8]
    38de:	687b      	ldr	r3, [r7, #4]
    38e0:	68d8      	ldr	r0, [r3, #12]
    38e2:	693b      	ldr	r3, [r7, #16]
    38e4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
    38e8:	2300      	movs	r3, #0
    38ea:	2106      	movs	r1, #6
    38ec:	47a0      	blx	r4
        return(false);
    38ee:	2300      	movs	r3, #0
}
    38f0:	4618      	mov	r0, r3
    38f2:	371c      	adds	r7, #28
    38f4:	46bd      	mov	sp, r7
    38f6:	bd90      	pop	{r4, r7, pc}
    38f8:	01000050 	.word	0x01000050
    38fc:	40050000 	.word	0x40050000

00003900 <ProcessDataToHost>:
// \return Returns \b true on success or \b false on failure.
//
//*****************************************************************************
static tBoolean
ProcessDataToHost(const tUSBDBulkDevice *psDevice, unsigned long ulStatus)
{
    3900:	b590      	push	{r4, r7, lr}
    3902:	b087      	sub	sp, #28
    3904:	af00      	add	r7, sp, #0
    3906:	6078      	str	r0, [r7, #4]
    3908:	6039      	str	r1, [r7, #0]
    unsigned long ulSize;

    //
    // Get a pointer to our instance data.
    //
    psInst = psDevice->psPrivateBulkData;
    390a:	687b      	ldr	r3, [r7, #4]
    390c:	6a1b      	ldr	r3, [r3, #32]
    390e:	617b      	str	r3, [r7, #20]

    //
    // Get the endpoint status to see why we were called.
    //
    ulEPStatus = MAP_USBEndpointStatus(psInst->ulUSBBase, psInst->ucINEndpoint);
    3910:	4b16      	ldr	r3, [pc, #88]	; (396c <ProcessDataToHost+0x6c>)
    3912:	681b      	ldr	r3, [r3, #0]
    3914:	3338      	adds	r3, #56	; 0x38
    3916:	681b      	ldr	r3, [r3, #0]
    3918:	461a      	mov	r2, r3
    391a:	697b      	ldr	r3, [r7, #20]
    391c:	6818      	ldr	r0, [r3, #0]
    391e:	697b      	ldr	r3, [r7, #20]
    3920:	7cdb      	ldrb	r3, [r3, #19]
    3922:	4619      	mov	r1, r3
    3924:	4790      	blx	r2
    3926:	6138      	str	r0, [r7, #16]

    //
    // Clear the status bits.
    //
    MAP_USBDevEndpointStatusClear(psInst->ulUSBBase, psInst->ucINEndpoint,
    3928:	4b10      	ldr	r3, [pc, #64]	; (396c <ProcessDataToHost+0x6c>)
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	3324      	adds	r3, #36	; 0x24
    392e:	681b      	ldr	r3, [r3, #0]
    3930:	461c      	mov	r4, r3
    3932:	697b      	ldr	r3, [r7, #20]
    3934:	6818      	ldr	r0, [r3, #0]
    3936:	697b      	ldr	r3, [r7, #20]
    3938:	7cdb      	ldrb	r3, [r3, #19]
    393a:	693a      	ldr	r2, [r7, #16]
    393c:	4619      	mov	r1, r3
    393e:	47a0      	blx	r4

    //
    // Our last transmission completed.  Clear our state back to idle and
    // see if we need to send any more data.
    //
    psInst->eBulkTxState = BULK_STATE_IDLE;
    3940:	697b      	ldr	r3, [r7, #20]
    3942:	2201      	movs	r2, #1
    3944:	735a      	strb	r2, [r3, #13]

    //
    // Notify the client that the last transmission completed.
    //
    ulSize = psInst->usLastTxSize;
    3946:	697b      	ldr	r3, [r7, #20]
    3948:	8a1b      	ldrh	r3, [r3, #16]
    394a:	60fb      	str	r3, [r7, #12]
    psInst->usLastTxSize = 0;
    394c:	697b      	ldr	r3, [r7, #20]
    394e:	2200      	movs	r2, #0
    3950:	821a      	strh	r2, [r3, #16]
    psDevice->pfnTxCallback(psDevice->pvTxCBData, USB_EVENT_TX_COMPLETE,
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	691c      	ldr	r4, [r3, #16]
    3956:	687b      	ldr	r3, [r7, #4]
    3958:	6958      	ldr	r0, [r3, #20]
    395a:	2300      	movs	r3, #0
    395c:	68fa      	ldr	r2, [r7, #12]
    395e:	2105      	movs	r1, #5
    3960:	47a0      	blx	r4
                            ulSize, (void *)0);

    return(true);
    3962:	2301      	movs	r3, #1
}
    3964:	4618      	mov	r0, r3
    3966:	371c      	adds	r7, #28
    3968:	46bd      	mov	sp, r7
    396a:	bd90      	pop	{r4, r7, pc}
    396c:	01000050 	.word	0x01000050

00003970 <HandleEndpoints>:
// signaled in ulStatus.
//
//*****************************************************************************
static void
HandleEndpoints(void *pvInstance, unsigned long ulStatus)
{
    3970:	b580      	push	{r7, lr}
    3972:	b084      	sub	sp, #16
    3974:	af00      	add	r7, sp, #0
    3976:	6078      	str	r0, [r7, #4]
    3978:	6039      	str	r1, [r7, #0]

    //
    // Determine if the serial device is in single or composite mode because
    // the meaning of ulIndex is different in both cases.
    //
    psBulkInst = (const tUSBDBulkDevice *)pvInstance;
    397a:	687b      	ldr	r3, [r7, #4]
    397c:	60fb      	str	r3, [r7, #12]
    psInst = psBulkInst->psPrivateBulkData;
    397e:	68fb      	ldr	r3, [r7, #12]
    3980:	6a1b      	ldr	r3, [r3, #32]
    3982:	60bb      	str	r3, [r7, #8]

    //
    // Handler for the bulk OUT data endpoint.
    //
    if(ulStatus & (0x10000 << USB_EP_TO_INDEX(psInst->ucOUTEndpoint)))
    3984:	68bb      	ldr	r3, [r7, #8]
    3986:	7d1b      	ldrb	r3, [r3, #20]
    3988:	091b      	lsrs	r3, r3, #4
    398a:	b2db      	uxtb	r3, r3
    398c:	461a      	mov	r2, r3
    398e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3992:	4093      	lsls	r3, r2
    3994:	461a      	mov	r2, r3
    3996:	683b      	ldr	r3, [r7, #0]
    3998:	4013      	ands	r3, r2
    399a:	2b00      	cmp	r3, #0
    399c:	d003      	beq.n	39a6 <HandleEndpoints+0x36>
    {
        //
        // Data is being sent to us from the host.
        //
        ProcessDataFromHost(pvInstance, ulStatus);
    399e:	6839      	ldr	r1, [r7, #0]
    39a0:	6878      	ldr	r0, [r7, #4]
    39a2:	f7ff ff55 	bl	3850 <ProcessDataFromHost>
    }

    //
    // Handler for the bulk IN data endpoint.
    //
    if(ulStatus & (1 << USB_EP_TO_INDEX(psInst->ucINEndpoint)))
    39a6:	68bb      	ldr	r3, [r7, #8]
    39a8:	7cdb      	ldrb	r3, [r3, #19]
    39aa:	091b      	lsrs	r3, r3, #4
    39ac:	b2db      	uxtb	r3, r3
    39ae:	461a      	mov	r2, r3
    39b0:	2301      	movs	r3, #1
    39b2:	4093      	lsls	r3, r2
    39b4:	461a      	mov	r2, r3
    39b6:	683b      	ldr	r3, [r7, #0]
    39b8:	4013      	ands	r3, r2
    39ba:	2b00      	cmp	r3, #0
    39bc:	d003      	beq.n	39c6 <HandleEndpoints+0x56>
    {
        ProcessDataToHost(pvInstance, ulStatus);
    39be:	6839      	ldr	r1, [r7, #0]
    39c0:	6878      	ldr	r0, [r7, #4]
    39c2:	f7ff ff9d 	bl	3900 <ProcessDataToHost>
    }
}
    39c6:	bf00      	nop
    39c8:	3710      	adds	r7, #16
    39ca:	46bd      	mov	sp, r7
    39cc:	bd80      	pop	{r7, pc}

000039ce <HandleConfigChange>:
// Called by the USB stack whenever a configuration change occurs.
//
//*****************************************************************************
static void
HandleConfigChange(void *pvInstance, unsigned long ulInfo)
{
    39ce:	b590      	push	{r4, r7, lr}
    39d0:	b085      	sub	sp, #20
    39d2:	af00      	add	r7, sp, #0
    39d4:	6078      	str	r0, [r7, #4]
    39d6:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create a device instance pointer.
    //
    psDevice = (const tUSBDBulkDevice *)pvInstance;
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	60fb      	str	r3, [r7, #12]

    //
    // Get a pointer to our instance data.
    //
    psInst = psDevice->psPrivateBulkData;
    39dc:	68fb      	ldr	r3, [r7, #12]
    39de:	6a1b      	ldr	r3, [r3, #32]
    39e0:	60bb      	str	r3, [r7, #8]

    //
    // Set all our endpoints to idle state.
    //
    psInst->eBulkRxState = BULK_STATE_IDLE;
    39e2:	68bb      	ldr	r3, [r7, #8]
    39e4:	2201      	movs	r2, #1
    39e6:	731a      	strb	r2, [r3, #12]
    psInst->eBulkTxState = BULK_STATE_IDLE;
    39e8:	68bb      	ldr	r3, [r7, #8]
    39ea:	2201      	movs	r2, #1
    39ec:	735a      	strb	r2, [r3, #13]

    //
    // If we have a control callback, let the client know we are open for
    // business.
    //
    if(psDevice->pfnRxCallback)
    39ee:	68fb      	ldr	r3, [r7, #12]
    39f0:	689b      	ldr	r3, [r3, #8]
    39f2:	2b00      	cmp	r3, #0
    39f4:	d007      	beq.n	3a06 <HandleConfigChange+0x38>
    {
        //
        // Pass the connected event to the client.
        //
        psDevice->pfnRxCallback(psDevice->pvRxCBData, USB_EVENT_CONNECTED, 0,
    39f6:	68fb      	ldr	r3, [r7, #12]
    39f8:	689c      	ldr	r4, [r3, #8]
    39fa:	68fb      	ldr	r3, [r7, #12]
    39fc:	68d8      	ldr	r0, [r3, #12]
    39fe:	2300      	movs	r3, #0
    3a00:	2200      	movs	r2, #0
    3a02:	2100      	movs	r1, #0
    3a04:	47a0      	blx	r4
    }

    //
    // Remember that we are connected.
    //
    psInst->bConnected = true;
    3a06:	68bb      	ldr	r3, [r7, #8]
    3a08:	2201      	movs	r2, #1
    3a0a:	749a      	strb	r2, [r3, #18]
}
    3a0c:	bf00      	nop
    3a0e:	3714      	adds	r7, #20
    3a10:	46bd      	mov	sp, r7
    3a12:	bd90      	pop	{r4, r7, pc}

00003a14 <HandleDevice>:
// Device instance specific handler.
//
//*****************************************************************************
static void
HandleDevice(void *pvInstance, unsigned long ulRequest, void *pvRequestData)
{
    3a14:	b480      	push	{r7}
    3a16:	b087      	sub	sp, #28
    3a18:	af00      	add	r7, sp, #0
    3a1a:	60f8      	str	r0, [r7, #12]
    3a1c:	60b9      	str	r1, [r7, #8]
    3a1e:	607a      	str	r2, [r7, #4]
    unsigned char *pucData;

    //
    // Create the serial instance data.
    //
    psInst = ((tUSBDBulkDevice *)pvInstance)->psPrivateBulkData;
    3a20:	68fb      	ldr	r3, [r7, #12]
    3a22:	6a1b      	ldr	r3, [r3, #32]
    3a24:	617b      	str	r3, [r7, #20]

    //
    // Create the char array used by the events supported by the USB CDC
    // serial class.
    //
    pucData = (unsigned char *)pvRequestData;
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	613b      	str	r3, [r7, #16]

    switch(ulRequest)
    3a2a:	68bb      	ldr	r3, [r7, #8]
    3a2c:	2b0e      	cmp	r3, #14
    3a2e:	d002      	beq.n	3a36 <HandleDevice+0x22>
    3a30:	2b0f      	cmp	r3, #15
    3a32:	d005      	beq.n	3a40 <HandleDevice+0x2c>
            }
            break;
        }
        default:
        {
            break;
    3a34:	e01f      	b.n	3a76 <HandleDevice+0x62>
            psInst->ucInterface = pucData[1];
    3a36:	693b      	ldr	r3, [r7, #16]
    3a38:	785a      	ldrb	r2, [r3, #1]
    3a3a:	697b      	ldr	r3, [r7, #20]
    3a3c:	755a      	strb	r2, [r3, #21]
            break;
    3a3e:	e01a      	b.n	3a76 <HandleDevice+0x62>
            if(pucData[0] & USB_EP_DESC_IN)
    3a40:	693b      	ldr	r3, [r7, #16]
    3a42:	781b      	ldrb	r3, [r3, #0]
    3a44:	b25b      	sxtb	r3, r3
    3a46:	2b00      	cmp	r3, #0
    3a48:	da0a      	bge.n	3a60 <HandleDevice+0x4c>
                psInst->ucINEndpoint = INDEX_TO_USB_EP((pucData[1] & 0x7f));
    3a4a:	693b      	ldr	r3, [r7, #16]
    3a4c:	3301      	adds	r3, #1
    3a4e:	781b      	ldrb	r3, [r3, #0]
    3a50:	011b      	lsls	r3, r3, #4
    3a52:	b2db      	uxtb	r3, r3
    3a54:	f023 030f 	bic.w	r3, r3, #15
    3a58:	b2da      	uxtb	r2, r3
    3a5a:	697b      	ldr	r3, [r7, #20]
    3a5c:	74da      	strb	r2, [r3, #19]
            break;
    3a5e:	e009      	b.n	3a74 <HandleDevice+0x60>
                psInst->ucOUTEndpoint = INDEX_TO_USB_EP(pucData[1] & 0x7f);
    3a60:	693b      	ldr	r3, [r7, #16]
    3a62:	3301      	adds	r3, #1
    3a64:	781b      	ldrb	r3, [r3, #0]
    3a66:	011b      	lsls	r3, r3, #4
    3a68:	b2db      	uxtb	r3, r3
    3a6a:	f023 030f 	bic.w	r3, r3, #15
    3a6e:	b2da      	uxtb	r2, r3
    3a70:	697b      	ldr	r3, [r7, #20]
    3a72:	751a      	strb	r2, [r3, #20]
            break;
    3a74:	bf00      	nop
        }
    }
}
    3a76:	bf00      	nop
    3a78:	371c      	adds	r7, #28
    3a7a:	46bd      	mov	sp, r7
    3a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a80:	4770      	bx	lr

00003a82 <HandleDisconnect>:
// disconnected from the host.
//
//*****************************************************************************
static void
HandleDisconnect(void *pvInstance)
{
    3a82:	b590      	push	{r4, r7, lr}
    3a84:	b085      	sub	sp, #20
    3a86:	af00      	add	r7, sp, #0
    3a88:	6078      	str	r0, [r7, #4]
    ASSERT(pvInstance != 0);

    //
    // Create the instance pointer.
    //
    psBulkDevice = (const tUSBDBulkDevice *)pvInstance;
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	60fb      	str	r3, [r7, #12]

    //
    // Get a pointer to our instance data.
    //
    psInst = psBulkDevice->psPrivateBulkData;
    3a8e:	68fb      	ldr	r3, [r7, #12]
    3a90:	6a1b      	ldr	r3, [r3, #32]
    3a92:	60bb      	str	r3, [r7, #8]

    //
    // If we are not currently connected so let the client know we are open
    // for business.
    //
    if(psInst->bConnected)
    3a94:	68bb      	ldr	r3, [r7, #8]
    3a96:	7c9b      	ldrb	r3, [r3, #18]
    3a98:	b2db      	uxtb	r3, r3
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d007      	beq.n	3aae <HandleDisconnect+0x2c>
    {
        //
        // Pass the disconnected event to the client.
        //
        psBulkDevice->pfnRxCallback(psBulkDevice->pvRxCBData,
    3a9e:	68fb      	ldr	r3, [r7, #12]
    3aa0:	689c      	ldr	r4, [r3, #8]
    3aa2:	68fb      	ldr	r3, [r7, #12]
    3aa4:	68d8      	ldr	r0, [r3, #12]
    3aa6:	2300      	movs	r3, #0
    3aa8:	2200      	movs	r2, #0
    3aaa:	2101      	movs	r1, #1
    3aac:	47a0      	blx	r4
    }

    //
    // Remember that we are no longer connected.
    //
    psInst->bConnected = false;
    3aae:	68bb      	ldr	r3, [r7, #8]
    3ab0:	2200      	movs	r2, #0
    3ab2:	749a      	strb	r2, [r3, #18]
}
    3ab4:	bf00      	nop
    3ab6:	3714      	adds	r7, #20
    3ab8:	46bd      	mov	sp, r7
    3aba:	bd90      	pop	{r4, r7, pc}

00003abc <HandleSuspend>:
// suspend state.
//
//*****************************************************************************
static void
HandleSuspend(void *pvInstance)
{
    3abc:	b590      	push	{r4, r7, lr}
    3abe:	b085      	sub	sp, #20
    3ac0:	af00      	add	r7, sp, #0
    3ac2:	6078      	str	r0, [r7, #4]
    ASSERT(pvInstance != 0);

    //
    // Create the instance pointer.
    //
    psBulkDevice = (const tUSBDBulkDevice *)pvInstance;
    3ac4:	687b      	ldr	r3, [r7, #4]
    3ac6:	60fb      	str	r3, [r7, #12]

    //
    // Pass the event on to the client.
    //
    psBulkDevice->pfnRxCallback(psBulkDevice->pvRxCBData, USB_EVENT_SUSPEND, 0,
    3ac8:	68fb      	ldr	r3, [r7, #12]
    3aca:	689c      	ldr	r4, [r3, #8]
    3acc:	68fb      	ldr	r3, [r7, #12]
    3ace:	68d8      	ldr	r0, [r3, #12]
    3ad0:	2300      	movs	r3, #0
    3ad2:	2200      	movs	r2, #0
    3ad4:	2107      	movs	r1, #7
    3ad6:	47a0      	blx	r4
                                (void *)0);
}
    3ad8:	bf00      	nop
    3ada:	3714      	adds	r7, #20
    3adc:	46bd      	mov	sp, r7
    3ade:	bd90      	pop	{r4, r7, pc}

00003ae0 <HandleResume>:
// out of suspend state.
//
//*****************************************************************************
static void
HandleResume(void *pvInstance)
{
    3ae0:	b590      	push	{r4, r7, lr}
    3ae2:	b085      	sub	sp, #20
    3ae4:	af00      	add	r7, sp, #0
    3ae6:	6078      	str	r0, [r7, #4]
    ASSERT(pvInstance != 0);

    //
    // Create the instance pointer.
    //
    psBulkDevice = (const tUSBDBulkDevice *)pvInstance;
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	60fb      	str	r3, [r7, #12]

    //
    // Pass the event on to the client.
    //
    psBulkDevice->pfnRxCallback(psBulkDevice->pvRxCBData, USB_EVENT_RESUME, 0,
    3aec:	68fb      	ldr	r3, [r7, #12]
    3aee:	689c      	ldr	r4, [r3, #8]
    3af0:	68fb      	ldr	r3, [r7, #12]
    3af2:	68d8      	ldr	r0, [r3, #12]
    3af4:	2300      	movs	r3, #0
    3af6:	2200      	movs	r2, #0
    3af8:	2108      	movs	r1, #8
    3afa:	47a0      	blx	r4
                                (void *)0);
}
    3afc:	bf00      	nop
    3afe:	3714      	adds	r7, #20
    3b00:	46bd      	mov	sp, r7
    3b02:	bd90      	pop	{r4, r7, pc}

00003b04 <BulkTickHandler>:
// \return None.
//
//*****************************************************************************
static void
BulkTickHandler(void *pvInstance, unsigned long ulTimemS)
{
    3b04:	b590      	push	{r4, r7, lr}
    3b06:	b087      	sub	sp, #28
    3b08:	af00      	add	r7, sp, #0
    3b0a:	6078      	str	r0, [r7, #4]
    3b0c:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create the instance pointer.
    //
    psDevice = (const tUSBDBulkDevice *)pvInstance;
    3b0e:	687b      	ldr	r3, [r7, #4]
    3b10:	617b      	str	r3, [r7, #20]

    //
    // Get our instance data pointer.
    //
    psInst = psDevice->psPrivateBulkData;
    3b12:	697b      	ldr	r3, [r7, #20]
    3b14:	6a1b      	ldr	r3, [r3, #32]
    3b16:	613b      	str	r3, [r7, #16]

    //
    // Do we have a deferred receive waiting
    //
    if(psInst->usDeferredOpFlags & (1 << BULK_DO_PACKET_RX))
    3b18:	693b      	ldr	r3, [r7, #16]
    3b1a:	89db      	ldrh	r3, [r3, #14]
    3b1c:	b29b      	uxth	r3, r3
    3b1e:	f003 0320 	and.w	r3, r3, #32
    3b22:	2b00      	cmp	r3, #0
    3b24:	d014      	beq.n	3b50 <BulkTickHandler+0x4c>
    {
        //
        // Yes - how big is the waiting packet?
        //
        ulSize = MAP_USBEndpointDataAvail(psInst->ulUSBBase,
    3b26:	4b0c      	ldr	r3, [pc, #48]	; (3b58 <BulkTickHandler+0x54>)
    3b28:	681b      	ldr	r3, [r3, #0]
    3b2a:	33b0      	adds	r3, #176	; 0xb0
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	461a      	mov	r2, r3
    3b30:	693b      	ldr	r3, [r7, #16]
    3b32:	6818      	ldr	r0, [r3, #0]
                                          psInst->ucOUTEndpoint);
    3b34:	693b      	ldr	r3, [r7, #16]
    3b36:	7d1b      	ldrb	r3, [r3, #20]
        ulSize = MAP_USBEndpointDataAvail(psInst->ulUSBBase,
    3b38:	4619      	mov	r1, r3
    3b3a:	4790      	blx	r2
    3b3c:	60f8      	str	r0, [r7, #12]

        //
        // Tell the client that there is a packet waiting for it.
        //
        psDevice->pfnRxCallback(psDevice->pvRxCBData, USB_EVENT_RX_AVAILABLE,
    3b3e:	697b      	ldr	r3, [r7, #20]
    3b40:	689c      	ldr	r4, [r3, #8]
    3b42:	697b      	ldr	r3, [r7, #20]
    3b44:	68d8      	ldr	r0, [r3, #12]
    3b46:	2300      	movs	r3, #0
    3b48:	68fa      	ldr	r2, [r7, #12]
    3b4a:	2102      	movs	r1, #2
    3b4c:	47a0      	blx	r4
                                ulSize, (void *)0);
    }

    return;
    3b4e:	bf00      	nop
    3b50:	bf00      	nop
}
    3b52:	371c      	adds	r7, #28
    3b54:	46bd      	mov	sp, r7
    3b56:	bd90      	pop	{r4, r7, pc}
    3b58:	01000050 	.word	0x01000050

00003b5c <USBDBulkInit>:
//! \return Returns NULL on failure or the psDevice pointer on success.
//
//*****************************************************************************
void *
USBDBulkInit(unsigned long ulIndex, const tUSBDBulkDevice *psDevice)
{
    3b5c:	b580      	push	{r7, lr}
    3b5e:	b084      	sub	sp, #16
    3b60:	af00      	add	r7, sp, #0
    3b62:	6078      	str	r0, [r7, #4]
    3b64:	6039      	str	r1, [r7, #0]
    // Check parameter validity.
    //
    ASSERT(ulIndex == 0);
    ASSERT(psDevice);

    pvInstance = USBDBulkCompositeInit(ulIndex, psDevice);
    3b66:	6839      	ldr	r1, [r7, #0]
    3b68:	6878      	ldr	r0, [r7, #4]
    3b6a:	f000 f811 	bl	3b90 <USBDBulkCompositeInit>
    3b6e:	60f8      	str	r0, [r7, #12]

    if(pvInstance)
    3b70:	68fb      	ldr	r3, [r7, #12]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d006      	beq.n	3b84 <USBDBulkInit+0x28>
    {
        //
        // All is well so now pass the descriptors to the lower layer and put
        // the bulk device on the bus.
        //
        USBDCDInit(ulIndex, psDevice->psPrivateBulkData->psDevInfo);
    3b76:	683b      	ldr	r3, [r7, #0]
    3b78:	6a1b      	ldr	r3, [r3, #32]
    3b7a:	685b      	ldr	r3, [r3, #4]
    3b7c:	4619      	mov	r1, r3
    3b7e:	6878      	ldr	r0, [r7, #4]
    3b80:	f000 f962 	bl	3e48 <USBDCDInit>
    }

    //
    // Return the pointer to the instance indicating that everything went well.
    //
    return(pvInstance);
    3b84:	68fb      	ldr	r3, [r7, #12]
}
    3b86:	4618      	mov	r0, r3
    3b88:	3710      	adds	r7, #16
    3b8a:	46bd      	mov	sp, r7
    3b8c:	bd80      	pop	{r7, pc}
	...

00003b90 <USBDBulkCompositeInit>:
//! used with the remaining USB HID Bulk APIs.
//
//*****************************************************************************
void *
USBDBulkCompositeInit(unsigned long ulIndex, const tUSBDBulkDevice *psDevice)
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b084      	sub	sp, #16
    3b94:	af00      	add	r7, sp, #0
    3b96:	6078      	str	r0, [r7, #4]
    3b98:	6039      	str	r1, [r7, #0]
    ASSERT(psDevice->pfnTxCallback);

    //
    // Initialize the workspace in the passed instance structure.
    //
    psInst = psDevice->psPrivateBulkData;
    3b9a:	683b      	ldr	r3, [r7, #0]
    3b9c:	6a1b      	ldr	r3, [r3, #32]
    3b9e:	60fb      	str	r3, [r7, #12]
    psInst->psConfDescriptor = (tConfigDescriptor *)g_pBulkDescriptor;
    3ba0:	68fb      	ldr	r3, [r7, #12]
    3ba2:	4a27      	ldr	r2, [pc, #156]	; (3c40 <USBDBulkCompositeInit+0xb0>)
    3ba4:	609a      	str	r2, [r3, #8]
    psInst->psDevInfo = &g_sBulkDeviceInfo;
    3ba6:	68fb      	ldr	r3, [r7, #12]
    3ba8:	4a26      	ldr	r2, [pc, #152]	; (3c44 <USBDBulkCompositeInit+0xb4>)
    3baa:	605a      	str	r2, [r3, #4]
    psInst->ulUSBBase = USB0_BASE;
    3bac:	68fb      	ldr	r3, [r7, #12]
    3bae:	4a26      	ldr	r2, [pc, #152]	; (3c48 <USBDBulkCompositeInit+0xb8>)
    3bb0:	601a      	str	r2, [r3, #0]
    psInst->eBulkRxState = BULK_STATE_UNCONFIGURED;
    3bb2:	68fb      	ldr	r3, [r7, #12]
    3bb4:	2200      	movs	r2, #0
    3bb6:	731a      	strb	r2, [r3, #12]
    psInst->eBulkTxState = BULK_STATE_UNCONFIGURED;
    3bb8:	68fb      	ldr	r3, [r7, #12]
    3bba:	2200      	movs	r2, #0
    3bbc:	735a      	strb	r2, [r3, #13]
    psInst->usDeferredOpFlags = 0;
    3bbe:	68fb      	ldr	r3, [r7, #12]
    3bc0:	2200      	movs	r2, #0
    3bc2:	81da      	strh	r2, [r3, #14]
    psInst->bConnected = false;
    3bc4:	68fb      	ldr	r3, [r7, #12]
    3bc6:	2200      	movs	r2, #0
    3bc8:	749a      	strb	r2, [r3, #18]

    //
    // Set the default endpoint and interface assignments.
    //
    psInst->ucINEndpoint = DATA_IN_ENDPOINT;
    3bca:	68fb      	ldr	r3, [r7, #12]
    3bcc:	2210      	movs	r2, #16
    3bce:	74da      	strb	r2, [r3, #19]
    psInst->ucOUTEndpoint = DATA_OUT_ENDPOINT;
    3bd0:	68fb      	ldr	r3, [r7, #12]
    3bd2:	2210      	movs	r2, #16
    3bd4:	751a      	strb	r2, [r3, #20]
    psInst->ucInterface = 0;
    3bd6:	68fb      	ldr	r3, [r7, #12]
    3bd8:	2200      	movs	r2, #0
    3bda:	755a      	strb	r2, [r3, #21]

    //
    // Fix up the device descriptor with the client-supplied values.
    //
    psDevDesc = (tDeviceDescriptor *)psInst->psDevInfo->pDeviceDescriptor;
    3bdc:	68fb      	ldr	r3, [r7, #12]
    3bde:	685b      	ldr	r3, [r3, #4]
    3be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3be2:	60bb      	str	r3, [r7, #8]
    psDevDesc->idVendor = psDevice->usVID;
    3be4:	683b      	ldr	r3, [r7, #0]
    3be6:	881a      	ldrh	r2, [r3, #0]
    3be8:	68bb      	ldr	r3, [r7, #8]
    3bea:	811a      	strh	r2, [r3, #8]
    psDevDesc->idProduct = psDevice->usPID;
    3bec:	683b      	ldr	r3, [r7, #0]
    3bee:	885a      	ldrh	r2, [r3, #2]
    3bf0:	68bb      	ldr	r3, [r7, #8]
    3bf2:	815a      	strh	r2, [r3, #10]

    //
    // Fix up the configuration descriptor with client-supplied values.
    //
    psInst->psConfDescriptor->bmAttributes = psDevice->ucPwrAttributes;
    3bf4:	68fb      	ldr	r3, [r7, #12]
    3bf6:	689b      	ldr	r3, [r3, #8]
    3bf8:	683a      	ldr	r2, [r7, #0]
    3bfa:	7992      	ldrb	r2, [r2, #6]
    3bfc:	71da      	strb	r2, [r3, #7]
    psInst->psConfDescriptor->bMaxPower =
                        (unsigned char)(psDevice->usMaxPowermA / 2);
    3bfe:	683b      	ldr	r3, [r7, #0]
    3c00:	889b      	ldrh	r3, [r3, #4]
    3c02:	085b      	lsrs	r3, r3, #1
    3c04:	b29a      	uxth	r2, r3
    psInst->psConfDescriptor->bMaxPower =
    3c06:	68fb      	ldr	r3, [r7, #12]
    3c08:	689b      	ldr	r3, [r3, #8]
                        (unsigned char)(psDevice->usMaxPowermA / 2);
    3c0a:	b2d2      	uxtb	r2, r2
    psInst->psConfDescriptor->bMaxPower =
    3c0c:	721a      	strb	r2, [r3, #8]

    //
    // Plug in the client's string stable to the device information
    // structure.
    //
    psInst->psDevInfo->ppStringDescriptors = psDevice->ppStringDescriptors;
    3c0e:	68fb      	ldr	r3, [r7, #12]
    3c10:	685b      	ldr	r3, [r3, #4]
    3c12:	683a      	ldr	r2, [r7, #0]
    3c14:	6992      	ldr	r2, [r2, #24]
    3c16:	639a      	str	r2, [r3, #56]	; 0x38
    psInst->psDevInfo->ulNumStringDescriptors
    3c18:	68fb      	ldr	r3, [r7, #12]
    3c1a:	685b      	ldr	r3, [r3, #4]
            = psDevice->ulNumStringDescriptors;
    3c1c:	683a      	ldr	r2, [r7, #0]
    3c1e:	69d2      	ldr	r2, [r2, #28]
    3c20:	63da      	str	r2, [r3, #60]	; 0x3c

    //
    // Set the device instance.
    //
    psInst->psDevInfo->pvInstance = (void *)psDevice;
    3c22:	68fb      	ldr	r3, [r7, #12]
    3c24:	685b      	ldr	r3, [r3, #4]
    3c26:	683a      	ldr	r2, [r7, #0]
    3c28:	645a      	str	r2, [r3, #68]	; 0x44

    //
    // Initialize the USB tick module, this will prevent it from being
    // initialized later in the call to USBDCDInit();
    //
    InternalUSBTickInit();
    3c2a:	f001 fd1f 	bl	566c <InternalUSBTickInit>

    //
    // Register our tick handler (this must be done after USBDCDInit).
    //
    InternalUSBRegisterTickHandler(BulkTickHandler,
    3c2e:	6839      	ldr	r1, [r7, #0]
    3c30:	4806      	ldr	r0, [pc, #24]	; (3c4c <USBDBulkCompositeInit+0xbc>)
    3c32:	f001 fd45 	bl	56c0 <InternalUSBRegisterTickHandler>
                                   (void *)psDevice);

    //
    // Return the pointer to the instance indicating that everything went well.
    //
    return((void *)psDevice);
    3c36:	683b      	ldr	r3, [r7, #0]
}
    3c38:	4618      	mov	r0, r3
    3c3a:	3710      	adds	r7, #16
    3c3c:	46bd      	mov	sp, r7
    3c3e:	bd80      	pop	{r7, pc}
    3c40:	200009c0 	.word	0x200009c0
    3c44:	200009d4 	.word	0x200009d4
    3c48:	40050000 	.word	0x40050000
    3c4c:	00003b05 	.word	0x00003b05

00003c50 <USBDBulkPacketWrite>:
//
//*****************************************************************************
unsigned long
USBDBulkPacketWrite(void *pvInstance, unsigned char *pcData,
                    unsigned long ulLength, tBoolean bLast)
{
    3c50:	b590      	push	{r4, r7, lr}
    3c52:	b087      	sub	sp, #28
    3c54:	af00      	add	r7, sp, #0
    3c56:	60f8      	str	r0, [r7, #12]
    3c58:	60b9      	str	r1, [r7, #8]
    3c5a:	607a      	str	r2, [r7, #4]
    3c5c:	70fb      	strb	r3, [r7, #3]
    ASSERT(pvInstance);

    //
    // Get our instance data pointer
    //
    psInst = ((tUSBDBulkDevice *)pvInstance)->psPrivateBulkData;
    3c5e:	68fb      	ldr	r3, [r7, #12]
    3c60:	6a1b      	ldr	r3, [r3, #32]
    3c62:	613b      	str	r3, [r7, #16]

    //
    // Can we send the data provided?
    //
    if((ulLength > DATA_IN_EP_MAX_SIZE) ||
    3c64:	687b      	ldr	r3, [r7, #4]
    3c66:	2b40      	cmp	r3, #64	; 0x40
    3c68:	d804      	bhi.n	3c74 <USBDBulkPacketWrite+0x24>
       (psInst->eBulkTxState != BULK_STATE_IDLE))
    3c6a:	693b      	ldr	r3, [r7, #16]
    3c6c:	7b5b      	ldrb	r3, [r3, #13]
    3c6e:	b2db      	uxtb	r3, r3
    if((ulLength > DATA_IN_EP_MAX_SIZE) ||
    3c70:	2b01      	cmp	r3, #1
    3c72:	d001      	beq.n	3c78 <USBDBulkPacketWrite+0x28>
    {
        //
        // Either the packet was too big or we are in the middle of sending
        // another packet.  Return 0 to indicate that we can't send this data.
        //
        return(0);
    3c74:	2300      	movs	r3, #0
    3c76:	e034      	b.n	3ce2 <USBDBulkPacketWrite+0x92>
    }

    //
    // Copy the data into the USB endpoint FIFO.
    //
    lRetcode = MAP_USBEndpointDataPut(psInst->ulUSBBase, psInst->ucINEndpoint,
    3c78:	4b1c      	ldr	r3, [pc, #112]	; (3cec <USBDBulkPacketWrite+0x9c>)
    3c7a:	681b      	ldr	r3, [r3, #0]
    3c7c:	332c      	adds	r3, #44	; 0x2c
    3c7e:	681b      	ldr	r3, [r3, #0]
    3c80:	461c      	mov	r4, r3
    3c82:	693b      	ldr	r3, [r7, #16]
    3c84:	6818      	ldr	r0, [r3, #0]
    3c86:	693b      	ldr	r3, [r7, #16]
    3c88:	7cdb      	ldrb	r3, [r3, #19]
    3c8a:	4619      	mov	r1, r3
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	68ba      	ldr	r2, [r7, #8]
    3c90:	47a0      	blx	r4
    3c92:	6178      	str	r0, [r7, #20]
                                      pcData, ulLength);

    //
    // Did we copy the data successfully?
    //
    if(lRetcode != -1)
    3c94:	697b      	ldr	r3, [r7, #20]
    3c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3c9a:	d01b      	beq.n	3cd4 <USBDBulkPacketWrite+0x84>
    {
        //
        // Remember how many bytes we sent.
        //
        psInst->usLastTxSize += (unsigned short)ulLength;
    3c9c:	693b      	ldr	r3, [r7, #16]
    3c9e:	8a1a      	ldrh	r2, [r3, #16]
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	b29b      	uxth	r3, r3
    3ca4:	4413      	add	r3, r2
    3ca6:	b29a      	uxth	r2, r3
    3ca8:	693b      	ldr	r3, [r7, #16]
    3caa:	821a      	strh	r2, [r3, #16]

        //
        // If this is the last call for this packet, schedule transmission.
        //
        if(bLast)
    3cac:	78fb      	ldrb	r3, [r7, #3]
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d010      	beq.n	3cd4 <USBDBulkPacketWrite+0x84>
        {
            //
            // Send the packet to the host if we have received all the data we
            // can expect for this packet.
            //
            psInst->eBulkTxState = BULK_STATE_WAIT_DATA;
    3cb2:	693b      	ldr	r3, [r7, #16]
    3cb4:	2202      	movs	r2, #2
    3cb6:	735a      	strb	r2, [r3, #13]
            lRetcode = MAP_USBEndpointDataSend(psInst->ulUSBBase,
    3cb8:	4b0c      	ldr	r3, [pc, #48]	; (3cec <USBDBulkPacketWrite+0x9c>)
    3cba:	681b      	ldr	r3, [r3, #0]
    3cbc:	3330      	adds	r3, #48	; 0x30
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	461c      	mov	r4, r3
    3cc2:	693b      	ldr	r3, [r7, #16]
    3cc4:	6818      	ldr	r0, [r3, #0]
                                               psInst->ucINEndpoint,
    3cc6:	693b      	ldr	r3, [r7, #16]
    3cc8:	7cdb      	ldrb	r3, [r3, #19]
            lRetcode = MAP_USBEndpointDataSend(psInst->ulUSBBase,
    3cca:	f44f 7281 	mov.w	r2, #258	; 0x102
    3cce:	4619      	mov	r1, r3
    3cd0:	47a0      	blx	r4
    3cd2:	6178      	str	r0, [r7, #20]
    }

    //
    // Did an error occur while trying to send the data?
    //
    if(lRetcode != -1)
    3cd4:	697b      	ldr	r3, [r7, #20]
    3cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3cda:	d001      	beq.n	3ce0 <USBDBulkPacketWrite+0x90>
    {
        //
        // No - tell the caller we sent all the bytes provided.
        //
        return(ulLength);
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	e000      	b.n	3ce2 <USBDBulkPacketWrite+0x92>
    else
    {
        //
        // Yes - tell the caller we couldn't send the data.
        //
        return(0);
    3ce0:	2300      	movs	r3, #0
    }
}
    3ce2:	4618      	mov	r0, r3
    3ce4:	371c      	adds	r7, #28
    3ce6:	46bd      	mov	sp, r7
    3ce8:	bd90      	pop	{r4, r7, pc}
    3cea:	bf00      	nop
    3cec:	01000050 	.word	0x01000050

00003cf0 <USBDBulkPacketRead>:
//
//*****************************************************************************
unsigned long
USBDBulkPacketRead(void *pvInstance, unsigned char *pcData,
                   unsigned long ulLength, tBoolean bLast)
{
    3cf0:	b590      	push	{r4, r7, lr}
    3cf2:	b08b      	sub	sp, #44	; 0x2c
    3cf4:	af00      	add	r7, sp, #0
    3cf6:	60f8      	str	r0, [r7, #12]
    3cf8:	60b9      	str	r1, [r7, #8]
    3cfa:	607a      	str	r2, [r7, #4]
    3cfc:	70fb      	strb	r3, [r7, #3]
    ASSERT(pvInstance);

    //
    // Get our instance data pointer
    //
    psInst = ((tUSBDBulkDevice *)pvInstance)->psPrivateBulkData;
    3cfe:	68fb      	ldr	r3, [r7, #12]
    3d00:	6a1b      	ldr	r3, [r3, #32]
    3d02:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Does the relevant endpoint FIFO have a packet waiting for us?
    //
    ulEPStatus = MAP_USBEndpointStatus(psInst->ulUSBBase,
    3d04:	4b2d      	ldr	r3, [pc, #180]	; (3dbc <USBDBulkPacketRead+0xcc>)
    3d06:	681b      	ldr	r3, [r3, #0]
    3d08:	3338      	adds	r3, #56	; 0x38
    3d0a:	681b      	ldr	r3, [r3, #0]
    3d0c:	461a      	mov	r2, r3
    3d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d10:	6818      	ldr	r0, [r3, #0]
                                       psInst->ucOUTEndpoint);
    3d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d14:	7d1b      	ldrb	r3, [r3, #20]
    ulEPStatus = MAP_USBEndpointStatus(psInst->ulUSBBase,
    3d16:	4619      	mov	r1, r3
    3d18:	4790      	blx	r2
    3d1a:	6238      	str	r0, [r7, #32]

    if(ulEPStatus & USB_DEV_RX_PKT_RDY)
    3d1c:	6a3b      	ldr	r3, [r7, #32]
    3d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    3d22:	2b00      	cmp	r3, #0
    3d24:	d045      	beq.n	3db2 <USBDBulkPacketRead+0xc2>
    {
        //
        // How many bytes are available for us to receive?
        //
        ulPkt = MAP_USBEndpointDataAvail(psInst->ulUSBBase,
    3d26:	4b25      	ldr	r3, [pc, #148]	; (3dbc <USBDBulkPacketRead+0xcc>)
    3d28:	681b      	ldr	r3, [r3, #0]
    3d2a:	33b0      	adds	r3, #176	; 0xb0
    3d2c:	681b      	ldr	r3, [r3, #0]
    3d2e:	461a      	mov	r2, r3
    3d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d32:	6818      	ldr	r0, [r3, #0]
                                         psInst->ucOUTEndpoint);
    3d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d36:	7d1b      	ldrb	r3, [r3, #20]
        ulPkt = MAP_USBEndpointDataAvail(psInst->ulUSBBase,
    3d38:	4619      	mov	r1, r3
    3d3a:	4790      	blx	r2
    3d3c:	61f8      	str	r0, [r7, #28]

        //
        // Get as much data as we can.
        //
        ulCount = ulLength;
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	617b      	str	r3, [r7, #20]
        lRetcode = MAP_USBEndpointDataGet(psInst->ulUSBBase,
    3d42:	4b1e      	ldr	r3, [pc, #120]	; (3dbc <USBDBulkPacketRead+0xcc>)
    3d44:	681b      	ldr	r3, [r3, #0]
    3d46:	3328      	adds	r3, #40	; 0x28
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	461c      	mov	r4, r3
    3d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d4e:	6818      	ldr	r0, [r3, #0]
                                          psInst->ucOUTEndpoint,
    3d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d52:	7d1b      	ldrb	r3, [r3, #20]
        lRetcode = MAP_USBEndpointDataGet(psInst->ulUSBBase,
    3d54:	4619      	mov	r1, r3
    3d56:	f107 0314 	add.w	r3, r7, #20
    3d5a:	68ba      	ldr	r2, [r7, #8]
    3d5c:	47a0      	blx	r4
    3d5e:	61b8      	str	r0, [r7, #24]
                                          pcData, &ulCount);

        //
        // Did we read the last of the packet data?
        //
        if(ulCount == ulPkt)
    3d60:	697b      	ldr	r3, [r7, #20]
    3d62:	69fa      	ldr	r2, [r7, #28]
    3d64:	429a      	cmp	r2, r3
    3d66:	d11e      	bne.n	3da6 <USBDBulkPacketRead+0xb6>
        {
            //
            // Clear the endpoint status so that we know no packet is
            // waiting.
            //
            MAP_USBDevEndpointStatusClear(psInst->ulUSBBase,
    3d68:	4b14      	ldr	r3, [pc, #80]	; (3dbc <USBDBulkPacketRead+0xcc>)
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	3324      	adds	r3, #36	; 0x24
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	461c      	mov	r4, r3
    3d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d74:	6818      	ldr	r0, [r3, #0]
                                          psInst->ucOUTEndpoint,
    3d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d78:	7d1b      	ldrb	r3, [r3, #20]
            MAP_USBDevEndpointStatusClear(psInst->ulUSBBase,
    3d7a:	6a3a      	ldr	r2, [r7, #32]
    3d7c:	4619      	mov	r1, r3
    3d7e:	47a0      	blx	r4

            //
            // Acknowledge the data, thus freeing the host to send the
            // next packet.
            //
            MAP_USBDevEndpointDataAck(psInst->ulUSBBase, psInst->ucOUTEndpoint,
    3d80:	4b0e      	ldr	r3, [pc, #56]	; (3dbc <USBDBulkPacketRead+0xcc>)
    3d82:	681b      	ldr	r3, [r3, #0]
    3d84:	3318      	adds	r3, #24
    3d86:	681b      	ldr	r3, [r3, #0]
    3d88:	461c      	mov	r4, r3
    3d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d8c:	6818      	ldr	r0, [r3, #0]
    3d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d90:	7d1b      	ldrb	r3, [r3, #20]
    3d92:	2201      	movs	r2, #1
    3d94:	4619      	mov	r1, r3
    3d96:	47a0      	blx	r4

            //
            // Clear the flag we set to indicate that a packet read is
            // pending.
            //
            SetDeferredOpFlag(&psInst->usDeferredOpFlags, BULK_DO_PACKET_RX,
    3d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d9a:	330e      	adds	r3, #14
    3d9c:	2200      	movs	r2, #0
    3d9e:	2105      	movs	r1, #5
    3da0:	4618      	mov	r0, r3
    3da2:	f7ff fd2f 	bl	3804 <SetDeferredOpFlag>
        }

        //
        // If all went well, tell the caller how many bytes they got.
        //
        if(lRetcode != -1)
    3da6:	69bb      	ldr	r3, [r7, #24]
    3da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3dac:	d001      	beq.n	3db2 <USBDBulkPacketRead+0xc2>
        {
            return(ulCount);
    3dae:	697b      	ldr	r3, [r7, #20]
    3db0:	e000      	b.n	3db4 <USBDBulkPacketRead+0xc4>

    //
    // No packet was available or an error occurred while reading so tell
    // the caller no bytes were returned.
    //
    return(0);
    3db2:	2300      	movs	r3, #0
}
    3db4:	4618      	mov	r0, r3
    3db6:	372c      	adds	r7, #44	; 0x2c
    3db8:	46bd      	mov	sp, r7
    3dba:	bd90      	pop	{r4, r7, pc}
    3dbc:	01000050 	.word	0x01000050

00003dc0 <USBDBulkTxPacketAvailable>:
//! \return Returns the number of bytes available in the transmit buffer.
//
//*****************************************************************************
unsigned long
USBDBulkTxPacketAvailable(void *pvInstance)
{
    3dc0:	b480      	push	{r7}
    3dc2:	b085      	sub	sp, #20
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
    ASSERT(pvInstance);

    //
    // Get our instance data pointer.
    //
    psInst = ((tUSBDBulkDevice *)pvInstance)->psPrivateBulkData;
    3dc8:	687b      	ldr	r3, [r7, #4]
    3dca:	6a1b      	ldr	r3, [r3, #32]
    3dcc:	60fb      	str	r3, [r7, #12]

    //
    // Do we have a packet transmission currently ongoing?
    //
    if(psInst->eBulkTxState != BULK_STATE_IDLE)
    3dce:	68fb      	ldr	r3, [r7, #12]
    3dd0:	7b5b      	ldrb	r3, [r3, #13]
    3dd2:	b2db      	uxtb	r3, r3
    3dd4:	2b01      	cmp	r3, #1
    3dd6:	d001      	beq.n	3ddc <USBDBulkTxPacketAvailable+0x1c>
    {
        //
        // We are not ready to receive a new packet so return 0.
        //
        return(0);
    3dd8:	2300      	movs	r3, #0
    3dda:	e000      	b.n	3dde <USBDBulkTxPacketAvailable+0x1e>
    {
        //
        // We can receive a packet so return the max packet size for the
        // relevant endpoint.
        //
        return(DATA_IN_EP_MAX_SIZE);
    3ddc:	2340      	movs	r3, #64	; 0x40
    }
}
    3dde:	4618      	mov	r0, r3
    3de0:	3714      	adds	r7, #20
    3de2:	46bd      	mov	sp, r7
    3de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de8:	4770      	bx	lr
	...

00003dec <USBDBulkRxPacketAvailable>:
//! size of the packet if a packet is waiting to be read.
//
//*****************************************************************************
unsigned long
USBDBulkRxPacketAvailable(void *pvInstance)
{
    3dec:	b580      	push	{r7, lr}
    3dee:	b086      	sub	sp, #24
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
    ASSERT(pvInstance);

    //
    // Get our instance data pointer
    //
    psInst = ((tUSBDBulkDevice *)pvInstance)->psPrivateBulkData;
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	6a1b      	ldr	r3, [r3, #32]
    3df8:	617b      	str	r3, [r7, #20]

    //
    // Does the relevant endpoint FIFO have a packet waiting for us?
    //
    ulEPStatus = MAP_USBEndpointStatus(psInst->ulUSBBase,
    3dfa:	4b12      	ldr	r3, [pc, #72]	; (3e44 <USBDBulkRxPacketAvailable+0x58>)
    3dfc:	681b      	ldr	r3, [r3, #0]
    3dfe:	3338      	adds	r3, #56	; 0x38
    3e00:	681b      	ldr	r3, [r3, #0]
    3e02:	461a      	mov	r2, r3
    3e04:	697b      	ldr	r3, [r7, #20]
    3e06:	6818      	ldr	r0, [r3, #0]
                                       psInst->ucOUTEndpoint);
    3e08:	697b      	ldr	r3, [r7, #20]
    3e0a:	7d1b      	ldrb	r3, [r3, #20]
    ulEPStatus = MAP_USBEndpointStatus(psInst->ulUSBBase,
    3e0c:	4619      	mov	r1, r3
    3e0e:	4790      	blx	r2
    3e10:	6138      	str	r0, [r7, #16]

    if(ulEPStatus & USB_DEV_RX_PKT_RDY)
    3e12:	693b      	ldr	r3, [r7, #16]
    3e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d00d      	beq.n	3e38 <USBDBulkRxPacketAvailable+0x4c>
    {
        //
        // Yes - a packet is waiting.  How big is it?
        //
        ulSize = MAP_USBEndpointDataAvail(psInst->ulUSBBase,
    3e1c:	4b09      	ldr	r3, [pc, #36]	; (3e44 <USBDBulkRxPacketAvailable+0x58>)
    3e1e:	681b      	ldr	r3, [r3, #0]
    3e20:	33b0      	adds	r3, #176	; 0xb0
    3e22:	681b      	ldr	r3, [r3, #0]
    3e24:	461a      	mov	r2, r3
    3e26:	697b      	ldr	r3, [r7, #20]
    3e28:	6818      	ldr	r0, [r3, #0]
                                          psInst->ucOUTEndpoint);
    3e2a:	697b      	ldr	r3, [r7, #20]
    3e2c:	7d1b      	ldrb	r3, [r3, #20]
        ulSize = MAP_USBEndpointDataAvail(psInst->ulUSBBase,
    3e2e:	4619      	mov	r1, r3
    3e30:	4790      	blx	r2
    3e32:	60f8      	str	r0, [r7, #12]

        return(ulSize);
    3e34:	68fb      	ldr	r3, [r7, #12]
    3e36:	e000      	b.n	3e3a <USBDBulkRxPacketAvailable+0x4e>
    else
    {
        //
        // There is no packet waiting to be received.
        //
        return(0);
    3e38:	2300      	movs	r3, #0
    }
}
    3e3a:	4618      	mov	r0, r3
    3e3c:	3718      	adds	r7, #24
    3e3e:	46bd      	mov	sp, r7
    3e40:	bd80      	pop	{r7, pc}
    3e42:	bf00      	nop
    3e44:	01000050 	.word	0x01000050

00003e48 <USBDCDInit>:
//! \return None.
//
//*****************************************************************************
void
USBDCDInit(unsigned long ulIndex, tDeviceInfo *psDevice)
{
    3e48:	b590      	push	{r4, r7, lr}
    3e4a:	b085      	sub	sp, #20
    3e4c:	af00      	add	r7, sp, #0
    3e4e:	6078      	str	r0, [r7, #4]
    3e50:	6039      	str	r1, [r7, #0]
    ASSERT(g_eUSBMode != USB_MODE_FORCE_HOST);

    //
    // Initialize a couple of fields in the device state structure.
    //
    g_psUSBDevice[0].ulConfiguration = DEFAULT_CONFIG_ID;
    3e52:	4b60      	ldr	r3, [pc, #384]	; (3fd4 <USBDCDInit+0x18c>)
    3e54:	2201      	movs	r2, #1
    3e56:	611a      	str	r2, [r3, #16]
    g_psUSBDevice[0].ulDefaultConfiguration = DEFAULT_CONFIG_ID;
    3e58:	4b5e      	ldr	r3, [pc, #376]	; (3fd4 <USBDCDInit+0x18c>)
    3e5a:	2201      	movs	r2, #1
    3e5c:	615a      	str	r2, [r3, #20]

    //
    // Remember the device information pointer.
    //
    g_psUSBDevice[0].psInfo = psDevice;
    3e5e:	4a5d      	ldr	r2, [pc, #372]	; (3fd4 <USBDCDInit+0x18c>)
    3e60:	683b      	ldr	r3, [r7, #0]
    3e62:	6013      	str	r3, [r2, #0]
    g_psUSBDevice[0].pvInstance = psDevice->pvInstance;
    3e64:	683b      	ldr	r3, [r7, #0]
    3e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e68:	4a5a      	ldr	r2, [pc, #360]	; (3fd4 <USBDCDInit+0x18c>)
    3e6a:	6053      	str	r3, [r2, #4]
    g_psUSBDevice[0].eEP0State = USB_STATE_IDLE;
    3e6c:	4b59      	ldr	r3, [pc, #356]	; (3fd4 <USBDCDInit+0x18c>)
    3e6e:	2200      	movs	r2, #0
    3e70:	721a      	strb	r2, [r3, #8]

    //
    // Default to device mode if no mode was set.
    //
    if(g_eUSBMode == USB_MODE_NONE)
    3e72:	4b59      	ldr	r3, [pc, #356]	; (3fd8 <USBDCDInit+0x190>)
    3e74:	781b      	ldrb	r3, [r3, #0]
    3e76:	2b03      	cmp	r3, #3
    3e78:	d102      	bne.n	3e80 <USBDCDInit+0x38>
    {
        g_eUSBMode = USB_MODE_DEVICE;
    3e7a:	4b57      	ldr	r3, [pc, #348]	; (3fd8 <USBDCDInit+0x190>)
    3e7c:	2200      	movs	r2, #0
    3e7e:	701a      	strb	r2, [r3, #0]
    }

    //
    // Only do hardware update if the stack is in not in OTG mode.
    //
    if(g_eUSBMode != USB_MODE_OTG)
    3e80:	4b55      	ldr	r3, [pc, #340]	; (3fd8 <USBDCDInit+0x190>)
    3e82:	781b      	ldrb	r3, [r3, #0]
    3e84:	2b02      	cmp	r3, #2
    3e86:	d028      	beq.n	3eda <USBDCDInit+0x92>
    {
        //
        // Reset the USB controller.
        //
        MAP_SysCtlPeripheralReset(SYSCTL_PERIPH_USB0);
    3e88:	4b54      	ldr	r3, [pc, #336]	; (3fdc <USBDCDInit+0x194>)
    3e8a:	681b      	ldr	r3, [r3, #0]
    3e8c:	3314      	adds	r3, #20
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	4853      	ldr	r0, [pc, #332]	; (3fe0 <USBDCDInit+0x198>)
    3e92:	4798      	blx	r3

        //
        // Enable Clocking to the USB controller.
        //
        MAP_SysCtlPeripheralEnable(SYSCTL_PERIPH_USB0);
    3e94:	4b51      	ldr	r3, [pc, #324]	; (3fdc <USBDCDInit+0x194>)
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	3318      	adds	r3, #24
    3e9a:	681b      	ldr	r3, [r3, #0]
    3e9c:	4850      	ldr	r0, [pc, #320]	; (3fe0 <USBDCDInit+0x198>)
    3e9e:	4798      	blx	r3

        //
        // Turn on USB Phy clock.
        //
        MAP_SysCtlUSBPLLEnable();
    3ea0:	4b4e      	ldr	r3, [pc, #312]	; (3fdc <USBDCDInit+0x194>)
    3ea2:	681b      	ldr	r3, [r3, #0]
    3ea4:	337c      	adds	r3, #124	; 0x7c
    3ea6:	681b      	ldr	r3, [r3, #0]
    3ea8:	4798      	blx	r3
        //
        // If the application is requesting OTG or DEVICE mode then set the mode
        // detection to OTG.  If the mode was device then the rest of the library
        // should make sure that no OTG signaling actually occurs.
        //
        if((g_eUSBMode == USB_MODE_DEVICE) || (g_eUSBMode == USB_MODE_OTG))
    3eaa:	4b4b      	ldr	r3, [pc, #300]	; (3fd8 <USBDCDInit+0x190>)
    3eac:	781b      	ldrb	r3, [r3, #0]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d003      	beq.n	3eba <USBDCDInit+0x72>
    3eb2:	4b49      	ldr	r3, [pc, #292]	; (3fd8 <USBDCDInit+0x190>)
    3eb4:	781b      	ldrb	r3, [r3, #0]
    3eb6:	2b02      	cmp	r3, #2
    3eb8:	d106      	bne.n	3ec8 <USBDCDInit+0x80>
        {
            //
            // Switch to OTG mode to detect VBUS changes.
            //
            MAP_USBOTGMode(USB0_BASE);
    3eba:	4b4a      	ldr	r3, [pc, #296]	; (3fe4 <USBDCDInit+0x19c>)
    3ebc:	681b      	ldr	r3, [r3, #0]
    3ebe:	33ec      	adds	r3, #236	; 0xec
    3ec0:	681b      	ldr	r3, [r3, #0]
    3ec2:	4849      	ldr	r0, [pc, #292]	; (3fe8 <USBDCDInit+0x1a0>)
    3ec4:	4798      	blx	r3
    3ec6:	e005      	b.n	3ed4 <USBDCDInit+0x8c>
        else
        {
            //
            // Force device mode on devices that support forcing mode.
            //
            MAP_USBDevMode(USB0_BASE);
    3ec8:	4b46      	ldr	r3, [pc, #280]	; (3fe4 <USBDCDInit+0x19c>)
    3eca:	681b      	ldr	r3, [r3, #0]
    3ecc:	33dc      	adds	r3, #220	; 0xdc
    3ece:	681b      	ldr	r3, [r3, #0]
    3ed0:	4845      	ldr	r0, [pc, #276]	; (3fe8 <USBDCDInit+0x1a0>)
    3ed2:	4798      	blx	r3

        //
        // In all other cases, set the mode to device this function should not
        // be called in OTG mode.
        //
        g_eUSBMode = USB_MODE_DEVICE;
    3ed4:	4b40      	ldr	r3, [pc, #256]	; (3fd8 <USBDCDInit+0x190>)
    3ed6:	2200      	movs	r2, #0
    3ed8:	701a      	strb	r2, [r3, #0]
    }

    //
    // Initialize the USB tick module.
    //
    InternalUSBTickInit();
    3eda:	f001 fbc7 	bl	566c <InternalUSBTickInit>

    //
    // Get a pointer to the default configuration descriptor.
    //
    psHdr = psDevice->ppConfigDescriptors[
    3ede:	683b      	ldr	r3, [r7, #0]
    3ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                g_psUSBDevice[0].ulDefaultConfiguration - 1];
    3ee2:	4b3c      	ldr	r3, [pc, #240]	; (3fd4 <USBDCDInit+0x18c>)
    3ee4:	695b      	ldr	r3, [r3, #20]
    psHdr = psDevice->ppConfigDescriptors[
    3ee6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3eea:	3b01      	subs	r3, #1
    3eec:	009b      	lsls	r3, r3, #2
    3eee:	4413      	add	r3, r2
    3ef0:	681b      	ldr	r3, [r3, #0]
    3ef2:	60fb      	str	r3, [r7, #12]
    psDesc = (const tConfigDescriptor *)(psHdr->psSections[0]->pucData);
    3ef4:	68fb      	ldr	r3, [r7, #12]
    3ef6:	685b      	ldr	r3, [r3, #4]
    3ef8:	681b      	ldr	r3, [r3, #0]
    3efa:	685b      	ldr	r3, [r3, #4]
    3efc:	60bb      	str	r3, [r7, #8]

    //
    // Default to the state where remote wake up is disabled.
    //
    g_psUSBDevice[0].ucStatus = 0;
    3efe:	4b35      	ldr	r3, [pc, #212]	; (3fd4 <USBDCDInit+0x18c>)
    3f00:	2200      	movs	r2, #0
    3f02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    g_psUSBDevice[0].bRemoteWakeup = false;
    3f06:	4b33      	ldr	r3, [pc, #204]	; (3fd4 <USBDCDInit+0x18c>)
    3f08:	2200      	movs	r2, #0
    3f0a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

    //
    // Determine the self- or bus-powered state based on the flags the
    // user provided.
    //
    g_psUSBDevice[0].bPwrSrcSet = false;
    3f0e:	4b31      	ldr	r3, [pc, #196]	; (3fd4 <USBDCDInit+0x18c>)
    3f10:	2200      	movs	r2, #0
    3f12:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

    if((psDesc->bmAttributes & USB_CONF_ATTR_PWR_M) == USB_CONF_ATTR_SELF_PWR)
    3f16:	68bb      	ldr	r3, [r7, #8]
    3f18:	79db      	ldrb	r3, [r3, #7]
    3f1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3f1e:	2bc0      	cmp	r3, #192	; 0xc0
    3f20:	d109      	bne.n	3f36 <USBDCDInit+0xee>
    {
        g_psUSBDevice[0].ucStatus |= USB_STATUS_SELF_PWR;
    3f22:	4b2c      	ldr	r3, [pc, #176]	; (3fd4 <USBDCDInit+0x18c>)
    3f24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    3f28:	f043 0301 	orr.w	r3, r3, #1
    3f2c:	b2da      	uxtb	r2, r3
    3f2e:	4b29      	ldr	r3, [pc, #164]	; (3fd4 <USBDCDInit+0x18c>)
    3f30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    3f34:	e008      	b.n	3f48 <USBDCDInit+0x100>
    }
    else
    {
        g_psUSBDevice[0].ucStatus &= ~USB_STATUS_SELF_PWR;
    3f36:	4b27      	ldr	r3, [pc, #156]	; (3fd4 <USBDCDInit+0x18c>)
    3f38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    3f3c:	f023 0301 	bic.w	r3, r3, #1
    3f40:	b2da      	uxtb	r2, r3
    3f42:	4b24      	ldr	r3, [pc, #144]	; (3fd4 <USBDCDInit+0x18c>)
    3f44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    //
    // Only do hardware update if the stack is not in OTG mode.
    //
    if(g_eUSBMode != USB_MODE_OTG)
    3f48:	4b23      	ldr	r3, [pc, #140]	; (3fd8 <USBDCDInit+0x190>)
    3f4a:	781b      	ldrb	r3, [r3, #0]
    3f4c:	2b02      	cmp	r3, #2
    3f4e:	d03c      	beq.n	3fca <USBDCDInit+0x182>
    {
        //
        // Get the current interrupt status.to clear all pending USB interrupts.
        //
        MAP_USBIntStatusControl(USB0_BASE);
    3f50:	4b24      	ldr	r3, [pc, #144]	; (3fe4 <USBDCDInit+0x19c>)
    3f52:	681b      	ldr	r3, [r3, #0]
    3f54:	33c8      	adds	r3, #200	; 0xc8
    3f56:	681b      	ldr	r3, [r3, #0]
    3f58:	4823      	ldr	r0, [pc, #140]	; (3fe8 <USBDCDInit+0x1a0>)
    3f5a:	4798      	blx	r3
        MAP_USBIntStatusEndpoint(USB0_BASE);
    3f5c:	4b21      	ldr	r3, [pc, #132]	; (3fe4 <USBDCDInit+0x19c>)
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	33d4      	adds	r3, #212	; 0xd4
    3f62:	681b      	ldr	r3, [r3, #0]
    3f64:	4820      	ldr	r0, [pc, #128]	; (3fe8 <USBDCDInit+0x1a0>)
    3f66:	4798      	blx	r3

        //
        // Enable USB Interrupts.
        //
        MAP_USBIntEnableControl(USB0_BASE, USB_INTCTRL_RESET |
    3f68:	4b1e      	ldr	r3, [pc, #120]	; (3fe4 <USBDCDInit+0x19c>)
    3f6a:	681b      	ldr	r3, [r3, #0]
    3f6c:	33c4      	adds	r3, #196	; 0xc4
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	212f      	movs	r1, #47	; 0x2f
    3f72:	481d      	ldr	r0, [pc, #116]	; (3fe8 <USBDCDInit+0x1a0>)
    3f74:	4798      	blx	r3
                                           USB_INTCTRL_DISCONNECT |
                                           USB_INTCTRL_RESUME |
                                           USB_INTCTRL_SUSPEND |
                                           USB_INTCTRL_SOF);
        MAP_USBIntEnableEndpoint(USB0_BASE, USB_INTEP_ALL);
    3f76:	4b1b      	ldr	r3, [pc, #108]	; (3fe4 <USBDCDInit+0x19c>)
    3f78:	681b      	ldr	r3, [r3, #0]
    3f7a:	33d0      	adds	r3, #208	; 0xd0
    3f7c:	681b      	ldr	r3, [r3, #0]
    3f7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f82:	4819      	ldr	r0, [pc, #100]	; (3fe8 <USBDCDInit+0x1a0>)
    3f84:	4798      	blx	r3
        //
        // Make sure we disconnect from the host for a while.  This ensures
        // that the host will enumerate us even if we were previously
        // connected to the bus.
        //
        MAP_USBDevDisconnect(USB0_BASE);
    3f86:	4b17      	ldr	r3, [pc, #92]	; (3fe4 <USBDCDInit+0x19c>)
    3f88:	681b      	ldr	r3, [r3, #0]
    3f8a:	3310      	adds	r3, #16
    3f8c:	681b      	ldr	r3, [r3, #0]
    3f8e:	4816      	ldr	r0, [pc, #88]	; (3fe8 <USBDCDInit+0x1a0>)
    3f90:	4798      	blx	r3

        //
        // Wait about 100mS.
        //
        OS_DELAY(MAP_SysCtlClockGet() / 30);
    3f92:	4b12      	ldr	r3, [pc, #72]	; (3fdc <USBDCDInit+0x194>)
    3f94:	681b      	ldr	r3, [r3, #0]
    3f96:	3388      	adds	r3, #136	; 0x88
    3f98:	681b      	ldr	r3, [r3, #0]
    3f9a:	461c      	mov	r4, r3
    3f9c:	4b0f      	ldr	r3, [pc, #60]	; (3fdc <USBDCDInit+0x194>)
    3f9e:	681b      	ldr	r3, [r3, #0]
    3fa0:	3360      	adds	r3, #96	; 0x60
    3fa2:	681b      	ldr	r3, [r3, #0]
    3fa4:	4798      	blx	r3
    3fa6:	4602      	mov	r2, r0
    3fa8:	4b10      	ldr	r3, [pc, #64]	; (3fec <USBDCDInit+0x1a4>)
    3faa:	fba3 2302 	umull	r2, r3, r3, r2
    3fae:	091b      	lsrs	r3, r3, #4
    3fb0:	4618      	mov	r0, r3
    3fb2:	47a0      	blx	r4

        //
        // Attach the device using the soft connect.
        //
        MAP_USBDevConnect(USB0_BASE);
    3fb4:	4b0b      	ldr	r3, [pc, #44]	; (3fe4 <USBDCDInit+0x19c>)
    3fb6:	681b      	ldr	r3, [r3, #0]
    3fb8:	330c      	adds	r3, #12
    3fba:	681b      	ldr	r3, [r3, #0]
    3fbc:	480a      	ldr	r0, [pc, #40]	; (3fe8 <USBDCDInit+0x1a0>)
    3fbe:	4798      	blx	r3

        //
        // Enable the USB interrupt.
        //
        OS_INT_ENABLE(INT_USB0);
    3fc0:	4b0b      	ldr	r3, [pc, #44]	; (3ff0 <USBDCDInit+0x1a8>)
    3fc2:	681b      	ldr	r3, [r3, #0]
    3fc4:	681b      	ldr	r3, [r3, #0]
    3fc6:	203c      	movs	r0, #60	; 0x3c
    3fc8:	4798      	blx	r3
    }
}
    3fca:	bf00      	nop
    3fcc:	3714      	adds	r7, #20
    3fce:	46bd      	mov	sp, r7
    3fd0:	bd90      	pop	{r4, r7, pc}
    3fd2:	bf00      	nop
    3fd4:	20001668 	.word	0x20001668
    3fd8:	20000a20 	.word	0x20000a20
    3fdc:	01000044 	.word	0x01000044
    3fe0:	20100001 	.word	0x20100001
    3fe4:	01000050 	.word	0x01000050
    3fe8:	40050000 	.word	0x40050000
    3fec:	88888889 	.word	0x88888889
    3ff0:	01000048 	.word	0x01000048

00003ff4 <USBDCDStallEP0>:
//! \return None.
//
//*****************************************************************************
void
USBDCDStallEP0(unsigned long ulIndex)
{
    3ff4:	b580      	push	{r7, lr}
    3ff6:	b082      	sub	sp, #8
    3ff8:	af00      	add	r7, sp, #0
    3ffa:	6078      	str	r0, [r7, #4]
    ASSERT(ulIndex == 0);

    //
    // Stall the endpoint in question.
    //
    MAP_USBDevEndpointStall(USB0_BASE, USB_EP_0, USB_EP_DEV_OUT);
    3ffc:	4b07      	ldr	r3, [pc, #28]	; (401c <USBDCDStallEP0+0x28>)
    3ffe:	681b      	ldr	r3, [r3, #0]
    4000:	331c      	adds	r3, #28
    4002:	681b      	ldr	r3, [r3, #0]
    4004:	2200      	movs	r2, #0
    4006:	2100      	movs	r1, #0
    4008:	4805      	ldr	r0, [pc, #20]	; (4020 <USBDCDStallEP0+0x2c>)
    400a:	4798      	blx	r3

    //
    // Enter the stalled state.
    //
    g_psUSBDevice[0].eEP0State = USB_STATE_STALL;
    400c:	4b05      	ldr	r3, [pc, #20]	; (4024 <USBDCDStallEP0+0x30>)
    400e:	2205      	movs	r2, #5
    4010:	721a      	strb	r2, [r3, #8]
}
    4012:	bf00      	nop
    4014:	3708      	adds	r7, #8
    4016:	46bd      	mov	sp, r7
    4018:	bd80      	pop	{r7, pc}
    401a:	bf00      	nop
    401c:	01000050 	.word	0x01000050
    4020:	40050000 	.word	0x40050000
    4024:	20001668 	.word	0x20001668

00004028 <USBDeviceResumeTickHandler>:
// \return None.
//
//*****************************************************************************
void
USBDeviceResumeTickHandler(tDeviceInstance *psDevInst)
{
    4028:	b580      	push	{r7, lr}
    402a:	b082      	sub	sp, #8
    402c:	af00      	add	r7, sp, #0
    402e:	6078      	str	r0, [r7, #4]
    if(g_psUSBDevice[0].bRemoteWakeup)
    4030:	4b18      	ldr	r3, [pc, #96]	; (4094 <USBDeviceResumeTickHandler+0x6c>)
    4032:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
    4036:	2b00      	cmp	r3, #0
    4038:	d028      	beq.n	408c <USBDeviceResumeTickHandler+0x64>
    {
        //
        // Increment the millisecond counter we use to time the resume
        // signaling.
        //
        g_psUSBDevice[0].ucRemoteWakeupCount++;
    403a:	4b16      	ldr	r3, [pc, #88]	; (4094 <USBDeviceResumeTickHandler+0x6c>)
    403c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4040:	3301      	adds	r3, #1
    4042:	b2da      	uxtb	r2, r3
    4044:	4b13      	ldr	r3, [pc, #76]	; (4094 <USBDeviceResumeTickHandler+0x6c>)
    4046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        //
        // Have we reached the 10mS mark? If so, we need to turn the signaling
        // off again.
        //
        if(g_psUSBDevice[0].ucRemoteWakeupCount == REMOTE_WAKEUP_PULSE_MS)
    404a:	4b12      	ldr	r3, [pc, #72]	; (4094 <USBDeviceResumeTickHandler+0x6c>)
    404c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4050:	2b0a      	cmp	r3, #10
    4052:	d106      	bne.n	4062 <USBDeviceResumeTickHandler+0x3a>
        {
            MAP_USBHostResume(USB0_BASE, false);
    4054:	4b10      	ldr	r3, [pc, #64]	; (4098 <USBDeviceResumeTickHandler+0x70>)
    4056:	681b      	ldr	r3, [r3, #0]
    4058:	3390      	adds	r3, #144	; 0x90
    405a:	681b      	ldr	r3, [r3, #0]
    405c:	2100      	movs	r1, #0
    405e:	480f      	ldr	r0, [pc, #60]	; (409c <USBDeviceResumeTickHandler+0x74>)
    4060:	4798      	blx	r3
        // Have we reached the point at which we can tell the client that the
        // bus has resumed? The controller doesn't give us an interrupt if we
        // initiated the wake up signaling so we just wait until 20mS have
        // passed then tell the client all is well.
        //
        if(g_psUSBDevice[0].ucRemoteWakeupCount == REMOTE_WAKEUP_READY_MS)
    4062:	4b0c      	ldr	r3, [pc, #48]	; (4094 <USBDeviceResumeTickHandler+0x6c>)
    4064:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4068:	2b14      	cmp	r3, #20
    406a:	d10f      	bne.n	408c <USBDeviceResumeTickHandler+0x64>
        {
            //
            // We are now finished with the remote wake up signaling.
            //
            g_psUSBDevice[0].bRemoteWakeup = false;
    406c:	4b09      	ldr	r3, [pc, #36]	; (4094 <USBDeviceResumeTickHandler+0x6c>)
    406e:	2200      	movs	r2, #0
    4070:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            //
            // If the client has registered a resume callback, call it.  In the
            // case of a remote wake up request, we do not get a resume
            // interrupt from the controller so we need to fake it here.
            //
            if(g_psUSBDevice[0].psInfo->sCallbacks.pfnResumeHandler)
    4074:	4b07      	ldr	r3, [pc, #28]	; (4094 <USBDeviceResumeTickHandler+0x6c>)
    4076:	681b      	ldr	r3, [r3, #0]
    4078:	6a1b      	ldr	r3, [r3, #32]
    407a:	2b00      	cmp	r3, #0
    407c:	d006      	beq.n	408c <USBDeviceResumeTickHandler+0x64>
            {
                g_psUSBDevice[0].psInfo->sCallbacks.pfnResumeHandler(
    407e:	4b05      	ldr	r3, [pc, #20]	; (4094 <USBDeviceResumeTickHandler+0x6c>)
    4080:	681b      	ldr	r3, [r3, #0]
    4082:	6a1b      	ldr	r3, [r3, #32]
    4084:	4a03      	ldr	r2, [pc, #12]	; (4094 <USBDeviceResumeTickHandler+0x6c>)
    4086:	6852      	ldr	r2, [r2, #4]
    4088:	4610      	mov	r0, r2
    408a:	4798      	blx	r3
                    g_psUSBDevice[0].pvInstance);
            }
        }
    }
}
    408c:	bf00      	nop
    408e:	3708      	adds	r7, #8
    4090:	46bd      	mov	sp, r7
    4092:	bd80      	pop	{r7, pc}
    4094:	20001668 	.word	0x20001668
    4098:	01000050 	.word	0x01000050
    409c:	40050000 	.word	0x40050000

000040a0 <USBDReadAndDispatchRequest>:
// \return None.
//
//*****************************************************************************
static void
USBDReadAndDispatchRequest(unsigned long ulIndex)
{
    40a0:	b590      	push	{r4, r7, lr}
    40a2:	b085      	sub	sp, #20
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
    tUSBRequest *pRequest;

    //
    // Cast the buffer to a request structure.
    //
    pRequest = (tUSBRequest *)g_pucDataBufferIn;
    40a8:	4b23      	ldr	r3, [pc, #140]	; (4138 <USBDReadAndDispatchRequest+0x98>)
    40aa:	60fb      	str	r3, [r7, #12]

    //
    // Set the buffer size.
    //
    ulSize = EP0_MAX_PACKET_SIZE;
    40ac:	2340      	movs	r3, #64	; 0x40
    40ae:	60bb      	str	r3, [r7, #8]

    //
    // Get the data from the USB controller end point 0.
    //
    MAP_USBEndpointDataGet(USB0_BASE,
    40b0:	4b22      	ldr	r3, [pc, #136]	; (413c <USBDReadAndDispatchRequest+0x9c>)
    40b2:	681b      	ldr	r3, [r3, #0]
    40b4:	3328      	adds	r3, #40	; 0x28
    40b6:	681b      	ldr	r3, [r3, #0]
    40b8:	461c      	mov	r4, r3
    40ba:	f107 0308 	add.w	r3, r7, #8
    40be:	4a1e      	ldr	r2, [pc, #120]	; (4138 <USBDReadAndDispatchRequest+0x98>)
    40c0:	2100      	movs	r1, #0
    40c2:	481f      	ldr	r0, [pc, #124]	; (4140 <USBDReadAndDispatchRequest+0xa0>)
    40c4:	47a0      	blx	r4
                           &ulSize);

    //
    // If there was a null setup packet then just return.
    //
    if(!ulSize)
    40c6:	68bb      	ldr	r3, [r7, #8]
    40c8:	2b00      	cmp	r3, #0
    40ca:	d031      	beq.n	4130 <USBDReadAndDispatchRequest+0x90>
    }

    //
    // See if this is a standard request or not.
    //
    if((pRequest->bmRequestType & USB_RTYPE_TYPE_M) != USB_RTYPE_STANDARD)
    40cc:	68fb      	ldr	r3, [r7, #12]
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
    40d4:	2b00      	cmp	r3, #0
    40d6:	d011      	beq.n	40fc <USBDReadAndDispatchRequest+0x5c>
    {
        //
        // Since this is not a standard request, see if there is
        // an external handler present.
        //
        if(g_psUSBDevice[0].psInfo->sCallbacks.pfnRequestHandler)
    40d8:	4b1a      	ldr	r3, [pc, #104]	; (4144 <USBDReadAndDispatchRequest+0xa4>)
    40da:	681b      	ldr	r3, [r3, #0]
    40dc:	685b      	ldr	r3, [r3, #4]
    40de:	2b00      	cmp	r3, #0
    40e0:	d008      	beq.n	40f4 <USBDReadAndDispatchRequest+0x54>
        {
            g_psUSBDevice[0].psInfo->sCallbacks.pfnRequestHandler(
    40e2:	4b18      	ldr	r3, [pc, #96]	; (4144 <USBDReadAndDispatchRequest+0xa4>)
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	685b      	ldr	r3, [r3, #4]
    40e8:	4a16      	ldr	r2, [pc, #88]	; (4144 <USBDReadAndDispatchRequest+0xa4>)
    40ea:	6852      	ldr	r2, [r2, #4]
    40ec:	68f9      	ldr	r1, [r7, #12]
    40ee:	4610      	mov	r0, r2
    40f0:	4798      	blx	r3
    40f2:	e01e      	b.n	4132 <USBDReadAndDispatchRequest+0x92>
        else
        {
            //
            // If there is no handler then stall this request.
            //
            USBDCDStallEP0(0);
    40f4:	2000      	movs	r0, #0
    40f6:	f7ff ff7d 	bl	3ff4 <USBDCDStallEP0>
    40fa:	e01a      	b.n	4132 <USBDReadAndDispatchRequest+0x92>
    else
    {
        //
        // Assure that the jump table is not out of bounds.
        //
        if((pRequest->bRequest <
    40fc:	68fb      	ldr	r3, [r7, #12]
    40fe:	785b      	ldrb	r3, [r3, #1]
    4100:	2b0c      	cmp	r3, #12
    4102:	d811      	bhi.n	4128 <USBDReadAndDispatchRequest+0x88>
           (sizeof(g_psUSBDStdRequests) / sizeof(tStdRequest))) &&
           (g_psUSBDStdRequests[pRequest->bRequest] != 0))
    4104:	68fb      	ldr	r3, [r7, #12]
    4106:	785b      	ldrb	r3, [r3, #1]
    4108:	461a      	mov	r2, r3
    410a:	4b0f      	ldr	r3, [pc, #60]	; (4148 <USBDReadAndDispatchRequest+0xa8>)
    410c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
           (sizeof(g_psUSBDStdRequests) / sizeof(tStdRequest))) &&
    4110:	2b00      	cmp	r3, #0
    4112:	d009      	beq.n	4128 <USBDReadAndDispatchRequest+0x88>
        {
            //
            // Jump table to the appropriate handler.
            //
            g_psUSBDStdRequests[pRequest->bRequest](&g_psUSBDevice[0],
    4114:	68fb      	ldr	r3, [r7, #12]
    4116:	785b      	ldrb	r3, [r3, #1]
    4118:	461a      	mov	r2, r3
    411a:	4b0b      	ldr	r3, [pc, #44]	; (4148 <USBDReadAndDispatchRequest+0xa8>)
    411c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4120:	68f9      	ldr	r1, [r7, #12]
    4122:	4808      	ldr	r0, [pc, #32]	; (4144 <USBDReadAndDispatchRequest+0xa4>)
    4124:	4798      	blx	r3
    4126:	e004      	b.n	4132 <USBDReadAndDispatchRequest+0x92>
        else
        {
            //
            // If there is no handler then stall this request.
            //
            USBDCDStallEP0(0);
    4128:	2000      	movs	r0, #0
    412a:	f7ff ff63 	bl	3ff4 <USBDCDStallEP0>
    412e:	e000      	b.n	4132 <USBDReadAndDispatchRequest+0x92>
        return;
    4130:	bf00      	nop
        }
    }
}
    4132:	3714      	adds	r7, #20
    4134:	46bd      	mov	sp, r7
    4136:	bd90      	pop	{r4, r7, pc}
    4138:	200013a4 	.word	0x200013a4
    413c:	01000050 	.word	0x01000050
    4140:	40050000 	.word	0x40050000
    4144:	20001668 	.word	0x20001668
    4148:	00006af8 	.word	0x00006af8

0000414c <USBDeviceEnumHandler>:
//  ----------------------------------------------------------------
//
//*****************************************************************************
void
USBDeviceEnumHandler(tDeviceInstance *pDevInstance)
{
    414c:	b590      	push	{r4, r7, lr}
    414e:	b085      	sub	sp, #20
    4150:	af00      	add	r7, sp, #0
    4152:	6078      	str	r0, [r7, #4]
    unsigned long ulEPStatus;

    //
    // Get the end point 0 status.
    //
    ulEPStatus = MAP_USBEndpointStatus(USB0_BASE, USB_EP_0);
    4154:	4b5c      	ldr	r3, [pc, #368]	; (42c8 <USBDeviceEnumHandler+0x17c>)
    4156:	681b      	ldr	r3, [r3, #0]
    4158:	3338      	adds	r3, #56	; 0x38
    415a:	681b      	ldr	r3, [r3, #0]
    415c:	2100      	movs	r1, #0
    415e:	485b      	ldr	r0, [pc, #364]	; (42cc <USBDeviceEnumHandler+0x180>)
    4160:	4798      	blx	r3
    4162:	60f8      	str	r0, [r7, #12]

    switch(pDevInstance->eEP0State)
    4164:	687b      	ldr	r3, [r7, #4]
    4166:	7a1b      	ldrb	r3, [r3, #8]
    4168:	b2db      	uxtb	r3, r3
    416a:	2b05      	cmp	r3, #5
    416c:	f200 80a8 	bhi.w	42c0 <USBDeviceEnumHandler+0x174>
    4170:	a201      	add	r2, pc, #4	; (adr r2, 4178 <USBDeviceEnumHandler+0x2c>)
    4172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4176:	bf00      	nop
    4178:	000041d1 	.word	0x000041d1
    417c:	000041e3 	.word	0x000041e3
    4180:	000041eb 	.word	0x000041eb
    4184:	000041f3 	.word	0x000041f3
    4188:	00004191 	.word	0x00004191
    418c:	00004295 	.word	0x00004295
        case USB_STATE_STATUS:
        {
            //
            // Just go back to the idle state.
            //
            pDevInstance->eEP0State = USB_STATE_IDLE;
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	2200      	movs	r2, #0
    4194:	721a      	strb	r2, [r3, #8]

            //
            // If there is a pending address change then set the address.
            //
            if(pDevInstance->ulDevAddress & DEV_ADDR_PENDING)
    4196:	687b      	ldr	r3, [r7, #4]
    4198:	68db      	ldr	r3, [r3, #12]
    419a:	2b00      	cmp	r3, #0
    419c:	da0f      	bge.n	41be <USBDeviceEnumHandler+0x72>
            {
                //
                // Clear the pending address change and set the address.
                //
                pDevInstance->ulDevAddress &= ~DEV_ADDR_PENDING;
    419e:	687b      	ldr	r3, [r7, #4]
    41a0:	68db      	ldr	r3, [r3, #12]
    41a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	60da      	str	r2, [r3, #12]
                MAP_USBDevAddrSet(USB0_BASE, pDevInstance->ulDevAddress);
    41aa:	4b47      	ldr	r3, [pc, #284]	; (42c8 <USBDeviceEnumHandler+0x17c>)
    41ac:	681b      	ldr	r3, [r3, #0]
    41ae:	3308      	adds	r3, #8
    41b0:	681b      	ldr	r3, [r3, #0]
    41b2:	461a      	mov	r2, r3
    41b4:	687b      	ldr	r3, [r7, #4]
    41b6:	68db      	ldr	r3, [r3, #12]
    41b8:	4619      	mov	r1, r3
    41ba:	4844      	ldr	r0, [pc, #272]	; (42cc <USBDeviceEnumHandler+0x180>)
    41bc:	4790      	blx	r2

            //
            // If a new packet is already pending, we need to read it
            // and handle whatever request it contains.
            //
            if(ulEPStatus & USB_DEV_EP0_OUT_PKTRDY)
    41be:	68fb      	ldr	r3, [r7, #12]
    41c0:	f003 0301 	and.w	r3, r3, #1
    41c4:	2b00      	cmp	r3, #0
    41c6:	d076      	beq.n	42b6 <USBDeviceEnumHandler+0x16a>
            {
                //
                // Process the newly arrived packet.
                //
                USBDReadAndDispatchRequest(0);
    41c8:	2000      	movs	r0, #0
    41ca:	f7ff ff69 	bl	40a0 <USBDReadAndDispatchRequest>
            }
            break;
    41ce:	e072      	b.n	42b6 <USBDeviceEnumHandler+0x16a>
        case USB_STATE_IDLE:
        {
            //
            // Is there a packet waiting for us?
            //
            if(ulEPStatus & USB_DEV_EP0_OUT_PKTRDY)
    41d0:	68fb      	ldr	r3, [r7, #12]
    41d2:	f003 0301 	and.w	r3, r3, #1
    41d6:	2b00      	cmp	r3, #0
    41d8:	d06f      	beq.n	42ba <USBDeviceEnumHandler+0x16e>
            {
                //
                // Yes - process it.
                //
                USBDReadAndDispatchRequest(0);
    41da:	2000      	movs	r0, #0
    41dc:	f7ff ff60 	bl	40a0 <USBDReadAndDispatchRequest>
            }
            break;
    41e0:	e06b      	b.n	42ba <USBDeviceEnumHandler+0x16e>
        // Data is still being sent to the host so handle this in the
        // EP0StateTx() function.
        //
        case USB_STATE_TX:
        {
            USBDEP0StateTx(0);
    41e2:	2000      	movs	r0, #0
    41e4:	f000 fccc 	bl	4b80 <USBDEP0StateTx>
            break;
    41e8:	e06a      	b.n	42c0 <USBDeviceEnumHandler+0x174>
        // We are still in the middle of sending the configuration descriptor
        // so handle this in the EP0StateTxConfig() function.
        //
        case USB_STATE_TX_CONFIG:
        {
            USBDEP0StateTxConfig(0);
    41ea:	2000      	movs	r0, #0
    41ec:	f000 fd28 	bl	4c40 <USBDEP0StateTxConfig>
            break;
    41f0:	e066      	b.n	42c0 <USBDeviceEnumHandler+0x174>
            unsigned long ulDataSize;

            //
            // Set the number of bytes to get out of this next packet.
            //
            if(pDevInstance->ulEP0DataRemain > EP0_MAX_PACKET_SIZE)
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41f6:	2b40      	cmp	r3, #64	; 0x40
    41f8:	d902      	bls.n	4200 <USBDeviceEnumHandler+0xb4>
            {
                //
                // Don't send more than EP0_MAX_PACKET_SIZE bytes.
                //
                ulDataSize = EP0_MAX_PACKET_SIZE;
    41fa:	2340      	movs	r3, #64	; 0x40
    41fc:	60bb      	str	r3, [r7, #8]
    41fe:	e002      	b.n	4206 <USBDeviceEnumHandler+0xba>
            else
            {
                //
                // There was space so send the remaining bytes.
                //
                ulDataSize = pDevInstance->ulEP0DataRemain;
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4204:	60bb      	str	r3, [r7, #8]
            }

            //
            // Get the data from the USB controller end point 0.
            //
            MAP_USBEndpointDataGet(USB0_BASE, USB_EP_0, pDevInstance->pEP0Data,
    4206:	4b30      	ldr	r3, [pc, #192]	; (42c8 <USBDeviceEnumHandler+0x17c>)
    4208:	681b      	ldr	r3, [r3, #0]
    420a:	3328      	adds	r3, #40	; 0x28
    420c:	681b      	ldr	r3, [r3, #0]
    420e:	461c      	mov	r4, r3
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	6a1a      	ldr	r2, [r3, #32]
    4214:	f107 0308 	add.w	r3, r7, #8
    4218:	2100      	movs	r1, #0
    421a:	482c      	ldr	r0, [pc, #176]	; (42cc <USBDeviceEnumHandler+0x180>)
    421c:	47a0      	blx	r4
            // If there we not more that EP0_MAX_PACKET_SIZE or more bytes
            // remaining then this transfer is complete.  If there were exactly
            // EP0_MAX_PACKET_SIZE remaining then there still needs to be
            // null packet sent before this is complete.
            //
            if(pDevInstance->ulEP0DataRemain < EP0_MAX_PACKET_SIZE)
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4222:	2b3f      	cmp	r3, #63	; 0x3f
    4224:	d820      	bhi.n	4268 <USBDeviceEnumHandler+0x11c>
            {
                //
                // Need to ACK the data on end point 0 in this case and set the
                // data end as this is the last of the data.
                //
                MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, true);
    4226:	4b28      	ldr	r3, [pc, #160]	; (42c8 <USBDeviceEnumHandler+0x17c>)
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	3318      	adds	r3, #24
    422c:	681b      	ldr	r3, [r3, #0]
    422e:	2201      	movs	r2, #1
    4230:	2100      	movs	r1, #0
    4232:	4826      	ldr	r0, [pc, #152]	; (42cc <USBDeviceEnumHandler+0x180>)
    4234:	4798      	blx	r3

                //
                // Return to the idle state.
                //
                pDevInstance->eEP0State =  USB_STATE_STATUS;
    4236:	687b      	ldr	r3, [r7, #4]
    4238:	2204      	movs	r2, #4
    423a:	721a      	strb	r2, [r3, #8]

                //
                // If there is a receive callback then call it.
                //
                if((pDevInstance->psInfo->sCallbacks.pfnDataReceived) &&
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	681b      	ldr	r3, [r3, #0]
    4240:	691b      	ldr	r3, [r3, #16]
    4242:	2b00      	cmp	r3, #0
    4244:	d018      	beq.n	4278 <USBDeviceEnumHandler+0x12c>
                   (pDevInstance->ulOUTDataSize != 0))
    4246:	687b      	ldr	r3, [r7, #4]
    4248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                if((pDevInstance->psInfo->sCallbacks.pfnDataReceived) &&
    424a:	2b00      	cmp	r3, #0
    424c:	d014      	beq.n	4278 <USBDeviceEnumHandler+0x12c>
                {
                    //
                    // Call the custom receive handler to handle the data
                    // that was received.
                    //
                    pDevInstance->psInfo->sCallbacks.pfnDataReceived(
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	681b      	ldr	r3, [r3, #0]
    4252:	691b      	ldr	r3, [r3, #16]
    4254:	687a      	ldr	r2, [r7, #4]
    4256:	6850      	ldr	r0, [r2, #4]
    4258:	687a      	ldr	r2, [r7, #4]
    425a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    425c:	4611      	mov	r1, r2
    425e:	4798      	blx	r3

                    //
                    // Indicate that there is no longer any data being waited
                    // on.
                    //
                    pDevInstance->ulOUTDataSize = 0;
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	2200      	movs	r2, #0
    4264:	629a      	str	r2, [r3, #40]	; 0x28
    4266:	e007      	b.n	4278 <USBDeviceEnumHandler+0x12c>
            {
                //
                // Need to ACK the data on end point 0 in this case
                // without setting data end because more data is coming.
                //
                MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, false);
    4268:	4b17      	ldr	r3, [pc, #92]	; (42c8 <USBDeviceEnumHandler+0x17c>)
    426a:	681b      	ldr	r3, [r3, #0]
    426c:	3318      	adds	r3, #24
    426e:	681b      	ldr	r3, [r3, #0]
    4270:	2200      	movs	r2, #0
    4272:	2100      	movs	r1, #0
    4274:	4815      	ldr	r0, [pc, #84]	; (42cc <USBDeviceEnumHandler+0x180>)
    4276:	4798      	blx	r3
            }

            //
            // Advance the pointer.
            //
            pDevInstance->pEP0Data += ulDataSize;
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	6a1a      	ldr	r2, [r3, #32]
    427c:	68bb      	ldr	r3, [r7, #8]
    427e:	441a      	add	r2, r3
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	621a      	str	r2, [r3, #32]

            //
            // Decrement the number of bytes that are being waited on.
            //
            pDevInstance->ulEP0DataRemain -= ulDataSize;
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4288:	68bb      	ldr	r3, [r7, #8]
    428a:	1ad2      	subs	r2, r2, r3
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	625a      	str	r2, [r3, #36]	; 0x24

            break;
    4290:	bf00      	nop
    4292:	e015      	b.n	42c0 <USBDeviceEnumHandler+0x174>
        case USB_STATE_STALL:
        {
            //
            // If we sent a stall then acknowledge this interrupt.
            //
            if(ulEPStatus & USB_DEV_EP0_SENT_STALL)
    4294:	68fb      	ldr	r3, [r7, #12]
    4296:	f003 0304 	and.w	r3, r3, #4
    429a:	2b00      	cmp	r3, #0
    429c:	d00f      	beq.n	42be <USBDeviceEnumHandler+0x172>
            {
                //
                // Clear the Setup End condition.
                //
                MAP_USBDevEndpointStatusClear(USB0_BASE, USB_EP_0,
    429e:	4b0a      	ldr	r3, [pc, #40]	; (42c8 <USBDeviceEnumHandler+0x17c>)
    42a0:	681b      	ldr	r3, [r3, #0]
    42a2:	3324      	adds	r3, #36	; 0x24
    42a4:	681b      	ldr	r3, [r3, #0]
    42a6:	2204      	movs	r2, #4
    42a8:	2100      	movs	r1, #0
    42aa:	4808      	ldr	r0, [pc, #32]	; (42cc <USBDeviceEnumHandler+0x180>)
    42ac:	4798      	blx	r3
                                              USB_DEV_EP0_SENT_STALL);

                //
                // Reset the global end point 0 state to IDLE.
                //
                pDevInstance->eEP0State = USB_STATE_IDLE;
    42ae:	687b      	ldr	r3, [r7, #4]
    42b0:	2200      	movs	r2, #0
    42b2:	721a      	strb	r2, [r3, #8]

            }
            break;
    42b4:	e003      	b.n	42be <USBDeviceEnumHandler+0x172>
            break;
    42b6:	bf00      	nop
    42b8:	e002      	b.n	42c0 <USBDeviceEnumHandler+0x174>
            break;
    42ba:	bf00      	nop
    42bc:	e000      	b.n	42c0 <USBDeviceEnumHandler+0x174>
            break;
    42be:	bf00      	nop
        default:
        {
            ASSERT(0);
        }
    }
}
    42c0:	bf00      	nop
    42c2:	3714      	adds	r7, #20
    42c4:	46bd      	mov	sp, r7
    42c6:	bd90      	pop	{r4, r7, pc}
    42c8:	01000050 	.word	0x01000050
    42cc:	40050000 	.word	0x40050000

000042d0 <USBDeviceEnumResetHandler>:
// \return None.
//
//*****************************************************************************
void
USBDeviceEnumResetHandler(tDeviceInstance *pDevInstance)
{
    42d0:	b580      	push	{r7, lr}
    42d2:	b084      	sub	sp, #16
    42d4:	af00      	add	r7, sp, #0
    42d6:	6078      	str	r0, [r7, #4]
    unsigned long ulLoop;

    //
    // Disable remote wake up signaling (as per USB 2.0 spec 9.1.1.6).
    //
    pDevInstance->ucStatus &= ~USB_STATUS_REMOTE_WAKE;
    42d8:	687b      	ldr	r3, [r7, #4]
    42da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    42de:	f023 0302 	bic.w	r3, r3, #2
    42e2:	b2da      	uxtb	r2, r3
    42e4:	687b      	ldr	r3, [r7, #4]
    42e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    pDevInstance->bRemoteWakeup = false;
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	2200      	movs	r2, #0
    42ee:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

    //
    // Call the device dependent code to indicate a bus reset has occurred.
    //
    if(pDevInstance->psInfo->sCallbacks.pfnResetHandler)
    42f2:	687b      	ldr	r3, [r7, #4]
    42f4:	681b      	ldr	r3, [r3, #0]
    42f6:	699b      	ldr	r3, [r3, #24]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d006      	beq.n	430a <USBDeviceEnumResetHandler+0x3a>
    {
        pDevInstance->psInfo->sCallbacks.pfnResetHandler(
    42fc:	687b      	ldr	r3, [r7, #4]
    42fe:	681b      	ldr	r3, [r3, #0]
    4300:	699b      	ldr	r3, [r3, #24]
    4302:	687a      	ldr	r2, [r7, #4]
    4304:	6852      	ldr	r2, [r2, #4]
    4306:	4610      	mov	r0, r2
    4308:	4798      	blx	r3

    //
    // Reset the default configuration identifier and alternate function
    // selections.
    //
    pDevInstance->ulConfiguration = pDevInstance->ulDefaultConfiguration;
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	695a      	ldr	r2, [r3, #20]
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	611a      	str	r2, [r3, #16]

    for(ulLoop = 0; ulLoop < USB_MAX_INTERFACES_PER_DEVICE; ulLoop++)
    4312:	2300      	movs	r3, #0
    4314:	60fb      	str	r3, [r7, #12]
    4316:	e008      	b.n	432a <USBDeviceEnumResetHandler+0x5a>
    {
        pDevInstance->pucAltSetting[ulLoop] = (unsigned char)0;
    4318:	687a      	ldr	r2, [r7, #4]
    431a:	68fb      	ldr	r3, [r7, #12]
    431c:	4413      	add	r3, r2
    431e:	3318      	adds	r3, #24
    4320:	2200      	movs	r2, #0
    4322:	701a      	strb	r2, [r3, #0]
    for(ulLoop = 0; ulLoop < USB_MAX_INTERFACES_PER_DEVICE; ulLoop++)
    4324:	68fb      	ldr	r3, [r7, #12]
    4326:	3301      	adds	r3, #1
    4328:	60fb      	str	r3, [r7, #12]
    432a:	68fb      	ldr	r3, [r7, #12]
    432c:	2b07      	cmp	r3, #7
    432e:	d9f3      	bls.n	4318 <USBDeviceEnumResetHandler+0x48>
    }
}
    4330:	bf00      	nop
    4332:	3710      	adds	r7, #16
    4334:	46bd      	mov	sp, r7
    4336:	bd80      	pop	{r7, pc}

00004338 <USBDGetStatus>:
// \return None.
//
//*****************************************************************************
static void
USBDGetStatus(void *pvInstance, tUSBRequest *pUSBRequest)
{
    4338:	b580      	push	{r7, lr}
    433a:	b086      	sub	sp, #24
    433c:	af00      	add	r7, sp, #0
    433e:	6078      	str	r0, [r7, #4]
    4340:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create the device information pointer.
    //
    psUSBControl = (tDeviceInstance *)pvInstance;
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	617b      	str	r3, [r7, #20]

    //
    // Need to ACK the data on end point 0 without setting last data as there
    // will be a data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, false);
    4346:	4b2a      	ldr	r3, [pc, #168]	; (43f0 <USBDGetStatus+0xb8>)
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	3318      	adds	r3, #24
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	2200      	movs	r2, #0
    4350:	2100      	movs	r1, #0
    4352:	4828      	ldr	r0, [pc, #160]	; (43f4 <USBDGetStatus+0xbc>)
    4354:	4798      	blx	r3

    //
    // Determine what type of status was requested.
    //
    switch(pUSBRequest->bmRequestType & USB_RTYPE_RECIPIENT_M)
    4356:	683b      	ldr	r3, [r7, #0]
    4358:	781b      	ldrb	r3, [r3, #0]
    435a:	f003 031f 	and.w	r3, r3, #31
    435e:	2b01      	cmp	r3, #1
    4360:	d009      	beq.n	4376 <USBDGetStatus+0x3e>
    4362:	2b02      	cmp	r3, #2
    4364:	d00a      	beq.n	437c <USBDGetStatus+0x44>
    4366:	2b00      	cmp	r3, #0
    4368:	d131      	bne.n	43ce <USBDGetStatus+0x96>
        case USB_RTYPE_DEVICE:
        {
            //
            // Return the current status for the device.
            //
            usData = (unsigned short)psUSBControl->ucStatus;
    436a:	697b      	ldr	r3, [r7, #20]
    436c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4370:	b29b      	uxth	r3, r3
    4372:	817b      	strh	r3, [r7, #10]

            break;
    4374:	e02f      	b.n	43d6 <USBDGetStatus+0x9e>
        case USB_RTYPE_INTERFACE:
        {
            //
            // Interface status always returns 0.
            //
            usData = (unsigned short)0;
    4376:	2300      	movs	r3, #0
    4378:	817b      	strh	r3, [r7, #10]

            break;
    437a:	e02c      	b.n	43d6 <USBDGetStatus+0x9e>
            unsigned long ulDir;

            //
            // Which endpoint are we dealing with?
            //
            usIndex = pUSBRequest->wIndex & USB_REQ_EP_NUM_M;
    437c:	683b      	ldr	r3, [r7, #0]
    437e:	889b      	ldrh	r3, [r3, #4]
    4380:	b29b      	uxth	r3, r3
    4382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4386:	827b      	strh	r3, [r7, #18]

            //
            // Check if this was a valid endpoint request.
            //
            if((usIndex == 0) || (usIndex >= NUM_USB_EP))
    4388:	8a7b      	ldrh	r3, [r7, #18]
    438a:	2b00      	cmp	r3, #0
    438c:	d002      	beq.n	4394 <USBDGetStatus+0x5c>
    438e:	8a7b      	ldrh	r3, [r7, #18]
    4390:	2b0f      	cmp	r3, #15
    4392:	d903      	bls.n	439c <USBDGetStatus+0x64>
            {
                USBDCDStallEP0(0);
    4394:	2000      	movs	r0, #0
    4396:	f7ff fe2d 	bl	3ff4 <USBDCDStallEP0>
                return;
    439a:	e026      	b.n	43ea <USBDGetStatus+0xb2>
            else
            {
                //
                // Are we dealing with an IN or OUT endpoint?
                //
                ulDir = ((pUSBRequest->wIndex & USB_REQ_EP_DIR_M) ==
    439c:	683b      	ldr	r3, [r7, #0]
    439e:	889b      	ldrh	r3, [r3, #4]
    43a0:	b29b      	uxth	r3, r3
    43a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
                         USB_REQ_EP_DIR_IN) ? HALT_EP_IN : HALT_EP_OUT;
    43a6:	2b00      	cmp	r3, #0
    43a8:	bf0c      	ite	eq
    43aa:	2301      	moveq	r3, #1
    43ac:	2300      	movne	r3, #0
    43ae:	b2db      	uxtb	r3, r3
                ulDir = ((pUSBRequest->wIndex & USB_REQ_EP_DIR_M) ==
    43b0:	60fb      	str	r3, [r7, #12]

                //
                // Get the current halt status for this endpoint.
                //
                usData =
                      (unsigned short)psUSBControl->ucHalt[ulDir][usIndex - 1];
    43b2:	8a7b      	ldrh	r3, [r7, #18]
    43b4:	1e59      	subs	r1, r3, #1
    43b6:	6978      	ldr	r0, [r7, #20]
    43b8:	68fa      	ldr	r2, [r7, #12]
    43ba:	4613      	mov	r3, r2
    43bc:	011b      	lsls	r3, r3, #4
    43be:	1a9b      	subs	r3, r3, r2
    43c0:	4403      	add	r3, r0
    43c2:	440b      	add	r3, r1
    43c4:	332d      	adds	r3, #45	; 0x2d
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	b29b      	uxth	r3, r3
                usData =
    43ca:	817b      	strh	r3, [r7, #10]
            }
            break;
    43cc:	e003      	b.n	43d6 <USBDGetStatus+0x9e>
        {
            //
            // Anything else causes a stall condition to indicate that the
            // command was not supported.
            //
            USBDCDStallEP0(0);
    43ce:	2000      	movs	r0, #0
    43d0:	f7ff fe10 	bl	3ff4 <USBDCDStallEP0>
            return;
    43d4:	e009      	b.n	43ea <USBDGetStatus+0xb2>
    }

    //
    // Send the two byte status response.
    //
    psUSBControl->ulEP0DataRemain = 2;
    43d6:	697b      	ldr	r3, [r7, #20]
    43d8:	2202      	movs	r2, #2
    43da:	625a      	str	r2, [r3, #36]	; 0x24
    psUSBControl->pEP0Data = (unsigned char *)&usData;
    43dc:	697b      	ldr	r3, [r7, #20]
    43de:	f107 020a 	add.w	r2, r7, #10
    43e2:	621a      	str	r2, [r3, #32]

    //
    // Send the response.
    //
    USBDEP0StateTx(0);
    43e4:	2000      	movs	r0, #0
    43e6:	f000 fbcb 	bl	4b80 <USBDEP0StateTx>
}
    43ea:	3718      	adds	r7, #24
    43ec:	46bd      	mov	sp, r7
    43ee:	bd80      	pop	{r7, pc}
    43f0:	01000050 	.word	0x01000050
    43f4:	40050000 	.word	0x40050000

000043f8 <USBDClearFeature>:
// \return None.
//
//*****************************************************************************
static void
USBDClearFeature(void *pvInstance, tUSBRequest *pUSBRequest)
{
    43f8:	b590      	push	{r4, r7, lr}
    43fa:	b087      	sub	sp, #28
    43fc:	af00      	add	r7, sp, #0
    43fe:	6078      	str	r0, [r7, #4]
    4400:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create the device information pointer.
    //
    psUSBControl = (tDeviceInstance *)pvInstance;
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	617b      	str	r3, [r7, #20]

    //
    // Need to ACK the data on end point 0 with last data set as this has no
    // data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, true);
    4406:	4b3d      	ldr	r3, [pc, #244]	; (44fc <USBDClearFeature+0x104>)
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	3318      	adds	r3, #24
    440c:	681b      	ldr	r3, [r3, #0]
    440e:	2201      	movs	r2, #1
    4410:	2100      	movs	r1, #0
    4412:	483b      	ldr	r0, [pc, #236]	; (4500 <USBDClearFeature+0x108>)
    4414:	4798      	blx	r3

    //
    // Determine what type of status was requested.
    //
    switch(pUSBRequest->bmRequestType & USB_RTYPE_RECIPIENT_M)
    4416:	683b      	ldr	r3, [r7, #0]
    4418:	781b      	ldrb	r3, [r3, #0]
    441a:	f003 031f 	and.w	r3, r3, #31
    441e:	2b00      	cmp	r3, #0
    4420:	d002      	beq.n	4428 <USBDClearFeature+0x30>
    4422:	2b02      	cmp	r3, #2
    4424:	d016      	beq.n	4454 <USBDClearFeature+0x5c>
    4426:	e061      	b.n	44ec <USBDClearFeature+0xf4>
        case USB_RTYPE_DEVICE:
        {
            //
            // Only remote wake is can be cleared by this function.
            //
            if(USB_FEATURE_REMOTE_WAKE & pUSBRequest->wValue)
    4428:	683b      	ldr	r3, [r7, #0]
    442a:	885b      	ldrh	r3, [r3, #2]
    442c:	b29b      	uxth	r3, r3
    442e:	f003 0301 	and.w	r3, r3, #1
    4432:	b29b      	uxth	r3, r3
    4434:	2b00      	cmp	r3, #0
    4436:	d009      	beq.n	444c <USBDClearFeature+0x54>
            {
                //
                // Clear the remote wake up state.
                //
                psUSBControl->ucStatus &= ~USB_STATUS_REMOTE_WAKE;
    4438:	697b      	ldr	r3, [r7, #20]
    443a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    443e:	f023 0302 	bic.w	r3, r3, #2
    4442:	b2da      	uxtb	r2, r3
    4444:	697b      	ldr	r3, [r7, #20]
    4446:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            }
            else
            {
                USBDCDStallEP0(0);
            }
            break;
    444a:	e053      	b.n	44f4 <USBDClearFeature+0xfc>
                USBDCDStallEP0(0);
    444c:	2000      	movs	r0, #0
    444e:	f7ff fdd1 	bl	3ff4 <USBDCDStallEP0>
            break;
    4452:	e04f      	b.n	44f4 <USBDClearFeature+0xfc>
            unsigned short usIndex;

            //
            // Which endpoint are we dealing with?
            //
            usIndex = pUSBRequest->wIndex & USB_REQ_EP_NUM_M;
    4454:	683b      	ldr	r3, [r7, #0]
    4456:	889b      	ldrh	r3, [r3, #4]
    4458:	b29b      	uxth	r3, r3
    445a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    445e:	827b      	strh	r3, [r7, #18]

            //
            // Not a valid endpoint.
            //
            if((usIndex == 0) || (usIndex > NUM_USB_EP))
    4460:	8a7b      	ldrh	r3, [r7, #18]
    4462:	2b00      	cmp	r3, #0
    4464:	d002      	beq.n	446c <USBDClearFeature+0x74>
    4466:	8a7b      	ldrh	r3, [r7, #18]
    4468:	2b10      	cmp	r3, #16
    446a:	d903      	bls.n	4474 <USBDClearFeature+0x7c>
            {
                USBDCDStallEP0(0);
    446c:	2000      	movs	r0, #0
    446e:	f7ff fdc1 	bl	3ff4 <USBDCDStallEP0>
                    //
                    USBDCDStallEP0(0);
                    return;
                }
            }
            break;
    4472:	e03f      	b.n	44f4 <USBDClearFeature+0xfc>
                if(USB_FEATURE_EP_HALT == pUSBRequest->wValue)
    4474:	683b      	ldr	r3, [r7, #0]
    4476:	885b      	ldrh	r3, [r3, #2]
    4478:	b29b      	uxth	r3, r3
    447a:	2b00      	cmp	r3, #0
    447c:	d132      	bne.n	44e4 <USBDClearFeature+0xec>
                    ulDir = ((pUSBRequest->wIndex & USB_REQ_EP_DIR_M) ==
    447e:	683b      	ldr	r3, [r7, #0]
    4480:	889b      	ldrh	r3, [r3, #4]
    4482:	b29b      	uxth	r3, r3
    4484:	f003 0380 	and.w	r3, r3, #128	; 0x80
                             USB_REQ_EP_DIR_IN) ? HALT_EP_IN : HALT_EP_OUT;
    4488:	2b00      	cmp	r3, #0
    448a:	bf0c      	ite	eq
    448c:	2301      	moveq	r3, #1
    448e:	2300      	movne	r3, #0
    4490:	b2db      	uxtb	r3, r3
                    ulDir = ((pUSBRequest->wIndex & USB_REQ_EP_DIR_M) ==
    4492:	60fb      	str	r3, [r7, #12]
                    psUSBControl->ucHalt[ulDir][usIndex - 1] = 0;
    4494:	8a7b      	ldrh	r3, [r7, #18]
    4496:	1e59      	subs	r1, r3, #1
    4498:	6978      	ldr	r0, [r7, #20]
    449a:	68fa      	ldr	r2, [r7, #12]
    449c:	4613      	mov	r3, r2
    449e:	011b      	lsls	r3, r3, #4
    44a0:	1a9b      	subs	r3, r3, r2
    44a2:	4403      	add	r3, r0
    44a4:	440b      	add	r3, r1
    44a6:	332d      	adds	r3, #45	; 0x2d
    44a8:	2200      	movs	r2, #0
    44aa:	701a      	strb	r2, [r3, #0]
                    if(ulDir == HALT_EP_IN)
    44ac:	68fb      	ldr	r3, [r7, #12]
    44ae:	2b00      	cmp	r3, #0
    44b0:	d10c      	bne.n	44cc <USBDClearFeature+0xd4>
                        MAP_USBDevEndpointStallClear(USB0_BASE,
    44b2:	4b12      	ldr	r3, [pc, #72]	; (44fc <USBDClearFeature+0x104>)
    44b4:	681b      	ldr	r3, [r3, #0]
    44b6:	3320      	adds	r3, #32
    44b8:	681b      	ldr	r3, [r3, #0]
    44ba:	461c      	mov	r4, r3
                                                     INDEX_TO_USB_EP(usIndex),
    44bc:	8a7b      	ldrh	r3, [r7, #18]
    44be:	011b      	lsls	r3, r3, #4
                        MAP_USBDevEndpointStallClear(USB0_BASE,
    44c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    44c4:	4619      	mov	r1, r3
    44c6:	480e      	ldr	r0, [pc, #56]	; (4500 <USBDClearFeature+0x108>)
    44c8:	47a0      	blx	r4
            break;
    44ca:	e013      	b.n	44f4 <USBDClearFeature+0xfc>
                        MAP_USBDevEndpointStallClear(USB0_BASE,
    44cc:	4b0b      	ldr	r3, [pc, #44]	; (44fc <USBDClearFeature+0x104>)
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	3320      	adds	r3, #32
    44d2:	681b      	ldr	r3, [r3, #0]
    44d4:	461c      	mov	r4, r3
                                                     INDEX_TO_USB_EP(usIndex),
    44d6:	8a7b      	ldrh	r3, [r7, #18]
    44d8:	011b      	lsls	r3, r3, #4
                        MAP_USBDevEndpointStallClear(USB0_BASE,
    44da:	2200      	movs	r2, #0
    44dc:	4619      	mov	r1, r3
    44de:	4808      	ldr	r0, [pc, #32]	; (4500 <USBDClearFeature+0x108>)
    44e0:	47a0      	blx	r4
            break;
    44e2:	e007      	b.n	44f4 <USBDClearFeature+0xfc>
                    USBDCDStallEP0(0);
    44e4:	2000      	movs	r0, #0
    44e6:	f7ff fd85 	bl	3ff4 <USBDCDStallEP0>
                    return;
    44ea:	e003      	b.n	44f4 <USBDClearFeature+0xfc>
        //
        // This is an unknown request.
        //
        default:
        {
            USBDCDStallEP0(0);
    44ec:	2000      	movs	r0, #0
    44ee:	f7ff fd81 	bl	3ff4 <USBDCDStallEP0>
            return;
    44f2:	bf00      	nop
        }
    }
}
    44f4:	371c      	adds	r7, #28
    44f6:	46bd      	mov	sp, r7
    44f8:	bd90      	pop	{r4, r7, pc}
    44fa:	bf00      	nop
    44fc:	01000050 	.word	0x01000050
    4500:	40050000 	.word	0x40050000

00004504 <USBDSetFeature>:
// \return None.
//
//*****************************************************************************
static void
USBDSetFeature(void *pvInstance, tUSBRequest *pUSBRequest)
{
    4504:	b580      	push	{r7, lr}
    4506:	b086      	sub	sp, #24
    4508:	af00      	add	r7, sp, #0
    450a:	6078      	str	r0, [r7, #4]
    450c:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create the device information pointer.
    //
    psUSBControl = (tDeviceInstance *)pvInstance;
    450e:	687b      	ldr	r3, [r7, #4]
    4510:	617b      	str	r3, [r7, #20]

    //
    // Need to ACK the data on end point 0 with last data set as this has no
    // data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, true);
    4512:	4b2f      	ldr	r3, [pc, #188]	; (45d0 <USBDSetFeature+0xcc>)
    4514:	681b      	ldr	r3, [r3, #0]
    4516:	3318      	adds	r3, #24
    4518:	681b      	ldr	r3, [r3, #0]
    451a:	2201      	movs	r2, #1
    451c:	2100      	movs	r1, #0
    451e:	482d      	ldr	r0, [pc, #180]	; (45d4 <USBDSetFeature+0xd0>)
    4520:	4798      	blx	r3

    //
    // Determine what type of status was requested.
    //
    switch(pUSBRequest->bmRequestType & USB_RTYPE_RECIPIENT_M)
    4522:	683b      	ldr	r3, [r7, #0]
    4524:	781b      	ldrb	r3, [r3, #0]
    4526:	f003 031f 	and.w	r3, r3, #31
    452a:	2b00      	cmp	r3, #0
    452c:	d002      	beq.n	4534 <USBDSetFeature+0x30>
    452e:	2b02      	cmp	r3, #2
    4530:	d016      	beq.n	4560 <USBDSetFeature+0x5c>
    4532:	e046      	b.n	45c2 <USBDSetFeature+0xbe>
        {
            //
            // Only remote wake is the only feature that can be set by this
            // function.
            //
            if(USB_FEATURE_REMOTE_WAKE & pUSBRequest->wValue)
    4534:	683b      	ldr	r3, [r7, #0]
    4536:	885b      	ldrh	r3, [r3, #2]
    4538:	b29b      	uxth	r3, r3
    453a:	f003 0301 	and.w	r3, r3, #1
    453e:	b29b      	uxth	r3, r3
    4540:	2b00      	cmp	r3, #0
    4542:	d009      	beq.n	4558 <USBDSetFeature+0x54>
            {
                //
                // Set the remote wake up state.
                //
                psUSBControl->ucStatus |= USB_STATUS_REMOTE_WAKE;
    4544:	697b      	ldr	r3, [r7, #20]
    4546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    454a:	f043 0302 	orr.w	r3, r3, #2
    454e:	b2da      	uxtb	r2, r3
    4550:	697b      	ldr	r3, [r7, #20]
    4552:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            }
            else
            {
                USBDCDStallEP0(0);
            }
            break;
    4556:	e038      	b.n	45ca <USBDSetFeature+0xc6>
                USBDCDStallEP0(0);
    4558:	2000      	movs	r0, #0
    455a:	f7ff fd4b 	bl	3ff4 <USBDCDStallEP0>
            break;
    455e:	e034      	b.n	45ca <USBDSetFeature+0xc6>
            unsigned long ulDir;

            //
            // Which endpoint are we dealing with?
            //
            usIndex = pUSBRequest->wIndex & USB_REQ_EP_NUM_M;
    4560:	683b      	ldr	r3, [r7, #0]
    4562:	889b      	ldrh	r3, [r3, #4]
    4564:	b29b      	uxth	r3, r3
    4566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    456a:	827b      	strh	r3, [r7, #18]

            //
            // Not a valid endpoint?
            //
            if((usIndex == 0) || (usIndex >= NUM_USB_EP))
    456c:	8a7b      	ldrh	r3, [r7, #18]
    456e:	2b00      	cmp	r3, #0
    4570:	d002      	beq.n	4578 <USBDSetFeature+0x74>
    4572:	8a7b      	ldrh	r3, [r7, #18]
    4574:	2b0f      	cmp	r3, #15
    4576:	d903      	bls.n	4580 <USBDSetFeature+0x7c>
            {
                USBDCDStallEP0(0);
    4578:	2000      	movs	r0, #0
    457a:	f7ff fd3b 	bl	3ff4 <USBDCDStallEP0>
                    //
                    USBDCDStallEP0(0);
                    return;
                }
            }
            break;
    457e:	e024      	b.n	45ca <USBDSetFeature+0xc6>
                if(USB_FEATURE_EP_HALT == pUSBRequest->wValue)
    4580:	683b      	ldr	r3, [r7, #0]
    4582:	885b      	ldrh	r3, [r3, #2]
    4584:	b29b      	uxth	r3, r3
    4586:	2b00      	cmp	r3, #0
    4588:	d117      	bne.n	45ba <USBDSetFeature+0xb6>
                    ulDir = ((pUSBRequest->wIndex & USB_REQ_EP_DIR_M) ==
    458a:	683b      	ldr	r3, [r7, #0]
    458c:	889b      	ldrh	r3, [r3, #4]
    458e:	b29b      	uxth	r3, r3
    4590:	f003 0380 	and.w	r3, r3, #128	; 0x80
                             USB_REQ_EP_DIR_IN) ? HALT_EP_IN : HALT_EP_OUT;
    4594:	2b00      	cmp	r3, #0
    4596:	bf0c      	ite	eq
    4598:	2301      	moveq	r3, #1
    459a:	2300      	movne	r3, #0
    459c:	b2db      	uxtb	r3, r3
                    ulDir = ((pUSBRequest->wIndex & USB_REQ_EP_DIR_M) ==
    459e:	60fb      	str	r3, [r7, #12]
                    psUSBControl->ucHalt[ulDir][usIndex - 1] = 1;
    45a0:	8a7b      	ldrh	r3, [r7, #18]
    45a2:	1e59      	subs	r1, r3, #1
    45a4:	6978      	ldr	r0, [r7, #20]
    45a6:	68fa      	ldr	r2, [r7, #12]
    45a8:	4613      	mov	r3, r2
    45aa:	011b      	lsls	r3, r3, #4
    45ac:	1a9b      	subs	r3, r3, r2
    45ae:	4403      	add	r3, r0
    45b0:	440b      	add	r3, r1
    45b2:	332d      	adds	r3, #45	; 0x2d
    45b4:	2201      	movs	r2, #1
    45b6:	701a      	strb	r2, [r3, #0]
            break;
    45b8:	e007      	b.n	45ca <USBDSetFeature+0xc6>
                    USBDCDStallEP0(0);
    45ba:	2000      	movs	r0, #0
    45bc:	f7ff fd1a 	bl	3ff4 <USBDCDStallEP0>
                    return;
    45c0:	e003      	b.n	45ca <USBDSetFeature+0xc6>
        //
        // This is an unknown request.
        //
        default:
        {
            USBDCDStallEP0(0);
    45c2:	2000      	movs	r0, #0
    45c4:	f7ff fd16 	bl	3ff4 <USBDCDStallEP0>
            return;
    45c8:	bf00      	nop
        }
    }
}
    45ca:	3718      	adds	r7, #24
    45cc:	46bd      	mov	sp, r7
    45ce:	bd80      	pop	{r7, pc}
    45d0:	01000050 	.word	0x01000050
    45d4:	40050000 	.word	0x40050000

000045d8 <USBDSetAddress>:
// \return None.
//
//*****************************************************************************
static void
USBDSetAddress(void *pvInstance, tUSBRequest *pUSBRequest)
{
    45d8:	b580      	push	{r7, lr}
    45da:	b084      	sub	sp, #16
    45dc:	af00      	add	r7, sp, #0
    45de:	6078      	str	r0, [r7, #4]
    45e0:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create the device information pointer.
    //
    psUSBControl = (tDeviceInstance *)pvInstance;
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	60fb      	str	r3, [r7, #12]

    //
    // Need to ACK the data on end point 0 with last data set as this has no
    // data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, true);
    45e6:	4b0b      	ldr	r3, [pc, #44]	; (4614 <USBDSetAddress+0x3c>)
    45e8:	681b      	ldr	r3, [r3, #0]
    45ea:	3318      	adds	r3, #24
    45ec:	681b      	ldr	r3, [r3, #0]
    45ee:	2201      	movs	r2, #1
    45f0:	2100      	movs	r1, #0
    45f2:	4809      	ldr	r0, [pc, #36]	; (4618 <USBDSetAddress+0x40>)
    45f4:	4798      	blx	r3

    //
    // Save the device address as we cannot change address until the status
    // phase is complete.
    //
    psUSBControl->ulDevAddress = pUSBRequest->wValue | DEV_ADDR_PENDING;
    45f6:	683b      	ldr	r3, [r7, #0]
    45f8:	885b      	ldrh	r3, [r3, #2]
    45fa:	b29b      	uxth	r3, r3
    45fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    4600:	68fb      	ldr	r3, [r7, #12]
    4602:	60da      	str	r2, [r3, #12]

    //
    // Transition directly to the status state since there is no data phase
    // for this request.
    //
    psUSBControl->eEP0State = USB_STATE_STATUS;
    4604:	68fb      	ldr	r3, [r7, #12]
    4606:	2204      	movs	r2, #4
    4608:	721a      	strb	r2, [r3, #8]
}
    460a:	bf00      	nop
    460c:	3710      	adds	r7, #16
    460e:	46bd      	mov	sp, r7
    4610:	bd80      	pop	{r7, pc}
    4612:	bf00      	nop
    4614:	01000050 	.word	0x01000050
    4618:	40050000 	.word	0x40050000

0000461c <USBDGetDescriptor>:
// \return None.
//
//*****************************************************************************
static void
USBDGetDescriptor(void *pvInstance, tUSBRequest *pUSBRequest)
{
    461c:	b580      	push	{r7, lr}
    461e:	b08a      	sub	sp, #40	; 0x28
    4620:	af00      	add	r7, sp, #0
    4622:	6078      	str	r0, [r7, #4]
    4624:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create the device information pointer.
    //
    psUSBControl = (tDeviceInstance *)pvInstance;
    4626:	687b      	ldr	r3, [r7, #4]
    4628:	623b      	str	r3, [r7, #32]
    psDevice = psUSBControl->psInfo;
    462a:	6a3b      	ldr	r3, [r7, #32]
    462c:	681b      	ldr	r3, [r3, #0]
    462e:	61fb      	str	r3, [r7, #28]

    //
    // Need to ACK the data on end point 0 without setting last data as there
    // will be a data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, false);
    4630:	4b58      	ldr	r3, [pc, #352]	; (4794 <USBDGetDescriptor+0x178>)
    4632:	681b      	ldr	r3, [r3, #0]
    4634:	3318      	adds	r3, #24
    4636:	681b      	ldr	r3, [r3, #0]
    4638:	2200      	movs	r2, #0
    463a:	2100      	movs	r1, #0
    463c:	4856      	ldr	r0, [pc, #344]	; (4798 <USBDGetDescriptor+0x17c>)
    463e:	4798      	blx	r3

    //
    // Assume we are not sending the configuration descriptor until we
    // determine otherwise.
    //
    bConfig = false;
    4640:	2300      	movs	r3, #0
    4642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    //
    // Which descriptor are we being asked for?
    //
    switch(pUSBRequest->wValue >> 8)
    4646:	683b      	ldr	r3, [r7, #0]
    4648:	885b      	ldrh	r3, [r3, #2]
    464a:	b29b      	uxth	r3, r3
    464c:	0a1b      	lsrs	r3, r3, #8
    464e:	b29b      	uxth	r3, r3
    4650:	2b02      	cmp	r3, #2
    4652:	d00e      	beq.n	4672 <USBDGetDescriptor+0x56>
    4654:	2b03      	cmp	r3, #3
    4656:	d045      	beq.n	46e4 <USBDGetDescriptor+0xc8>
    4658:	2b01      	cmp	r3, #1
    465a:	d16b      	bne.n	4734 <USBDGetDescriptor+0x118>
        {
            //
            // Return the externally provided device descriptor.
            //
            psUSBControl->pEP0Data =
                (unsigned char *)psDevice->pDeviceDescriptor;
    465c:	69fb      	ldr	r3, [r7, #28]
    465e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            psUSBControl->pEP0Data =
    4660:	6a3b      	ldr	r3, [r7, #32]
    4662:	621a      	str	r2, [r3, #32]

            //
            // The size of the device descriptor is in the first byte.
            //
            psUSBControl->ulEP0DataRemain = psDevice->pDeviceDescriptor[0];
    4664:	69fb      	ldr	r3, [r7, #28]
    4666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4668:	781b      	ldrb	r3, [r3, #0]
    466a:	461a      	mov	r2, r3
    466c:	6a3b      	ldr	r3, [r7, #32]
    466e:	625a      	str	r2, [r3, #36]	; 0x24

            break;
    4670:	e070      	b.n	4754 <USBDGetDescriptor+0x138>
            unsigned char ucIndex;

            //
            // Which configuration are we being asked for?
            //
            ucIndex = (unsigned char)(pUSBRequest->wValue & 0xFF);
    4672:	683b      	ldr	r3, [r7, #0]
    4674:	885b      	ldrh	r3, [r3, #2]
    4676:	b29b      	uxth	r3, r3
    4678:	75fb      	strb	r3, [r7, #23]

            //
            // Is this valid?
            //
            psDeviceDesc =
    467a:	69fb      	ldr	r3, [r7, #28]
    467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    467e:	613b      	str	r3, [r7, #16]
                (const tDeviceDescriptor *)psDevice->pDeviceDescriptor;

            if(ucIndex >= psDeviceDesc->bNumConfigurations)
    4680:	693b      	ldr	r3, [r7, #16]
    4682:	7c5b      	ldrb	r3, [r3, #17]
    4684:	7dfa      	ldrb	r2, [r7, #23]
    4686:	429a      	cmp	r2, r3
    4688:	d309      	bcc.n	469e <USBDGetDescriptor+0x82>
            {
                //
                // This is an invalid configuration index.  Stall EP0 to
                // indicate a request error.
                //
                USBDCDStallEP0(0);
    468a:	2000      	movs	r0, #0
    468c:	f7ff fcb2 	bl	3ff4 <USBDCDStallEP0>
                psUSBControl->pEP0Data = 0;
    4690:	6a3b      	ldr	r3, [r7, #32]
    4692:	2200      	movs	r2, #0
    4694:	621a      	str	r2, [r3, #32]
                psUSBControl->ulEP0DataRemain = 0;
    4696:	6a3b      	ldr	r3, [r7, #32]
    4698:	2200      	movs	r2, #0
    469a:	625a      	str	r2, [r3, #36]	; 0x24
                //
                psUSBControl->ucConfigIndex = ucIndex;

                bConfig = true;
            }
            break;
    469c:	e05a      	b.n	4754 <USBDGetDescriptor+0x138>
                psConfig = psDevice->ppConfigDescriptors[ucIndex];
    469e:	69fb      	ldr	r3, [r7, #28]
    46a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    46a2:	7dfb      	ldrb	r3, [r7, #23]
    46a4:	009b      	lsls	r3, r3, #2
    46a6:	4413      	add	r3, r2
    46a8:	681b      	ldr	r3, [r3, #0]
    46aa:	60fb      	str	r3, [r7, #12]
                psUSBControl->ucConfigSection = 0;
    46ac:	6a3b      	ldr	r3, [r7, #32]
    46ae:	2200      	movs	r2, #0
    46b0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                psUSBControl->ucSectionOffset = 0;
    46b4:	6a3b      	ldr	r3, [r7, #32]
    46b6:	2200      	movs	r2, #0
    46b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                                          psConfig->psSections[0]->pucData;
    46bc:	68fb      	ldr	r3, [r7, #12]
    46be:	685b      	ldr	r3, [r3, #4]
    46c0:	681b      	ldr	r3, [r3, #0]
    46c2:	685a      	ldr	r2, [r3, #4]
                psUSBControl->pEP0Data = (unsigned char *)
    46c4:	6a3b      	ldr	r3, [r7, #32]
    46c6:	621a      	str	r2, [r3, #32]
                                            USBDCDConfigDescGetSize(psConfig);
    46c8:	68f8      	ldr	r0, [r7, #12]
    46ca:	f001 f8cc 	bl	5866 <USBDCDConfigDescGetSize>
    46ce:	4602      	mov	r2, r0
                psUSBControl->ulEP0DataRemain =
    46d0:	6a3b      	ldr	r3, [r7, #32]
    46d2:	625a      	str	r2, [r3, #36]	; 0x24
                psUSBControl->ucConfigIndex = ucIndex;
    46d4:	6a3b      	ldr	r3, [r7, #32]
    46d6:	7dfa      	ldrb	r2, [r7, #23]
    46d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
                bConfig = true;
    46dc:	2301      	movs	r3, #1
    46de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
    46e2:	e037      	b.n	4754 <USBDGetDescriptor+0x138>

            //
            // Determine the correct descriptor index based on the requested
            // language ID and index.
            //
            lIndex = USBDStringIndexFromRequest(pUSBRequest->wIndex,
    46e4:	683b      	ldr	r3, [r7, #0]
    46e6:	889b      	ldrh	r3, [r3, #4]
    46e8:	b29a      	uxth	r2, r3
                                                pUSBRequest->wValue & 0xFF);
    46ea:	683b      	ldr	r3, [r7, #0]
    46ec:	885b      	ldrh	r3, [r3, #2]
    46ee:	b29b      	uxth	r3, r3
            lIndex = USBDStringIndexFromRequest(pUSBRequest->wIndex,
    46f0:	b2db      	uxtb	r3, r3
    46f2:	b29b      	uxth	r3, r3
    46f4:	4619      	mov	r1, r3
    46f6:	4610      	mov	r0, r2
    46f8:	f000 f850 	bl	479c <USBDStringIndexFromRequest>
    46fc:	61b8      	str	r0, [r7, #24]

            //
            // If the mapping function returned -1 then stall the request to
            // indicate that the request was not valid.
            //
            if(lIndex == -1)
    46fe:	69bb      	ldr	r3, [r7, #24]
    4700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4704:	d103      	bne.n	470e <USBDGetDescriptor+0xf2>
            {
                USBDCDStallEP0(0);
    4706:	2000      	movs	r0, #0
    4708:	f7ff fc74 	bl	3ff4 <USBDCDStallEP0>
                break;
    470c:	e022      	b.n	4754 <USBDGetDescriptor+0x138>

            //
            // Return the externally specified configuration descriptor.
            //
            psUSBControl->pEP0Data =
                (unsigned char *)psDevice->ppStringDescriptors[lIndex];
    470e:	69fb      	ldr	r3, [r7, #28]
    4710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4712:	69bb      	ldr	r3, [r7, #24]
    4714:	009b      	lsls	r3, r3, #2
    4716:	4413      	add	r3, r2
    4718:	681a      	ldr	r2, [r3, #0]
            psUSBControl->pEP0Data =
    471a:	6a3b      	ldr	r3, [r7, #32]
    471c:	621a      	str	r2, [r3, #32]

            //
            // The total size of a string descriptor is in byte 0.
            //
            psUSBControl->ulEP0DataRemain =
                psDevice->ppStringDescriptors[lIndex][0];
    471e:	69fb      	ldr	r3, [r7, #28]
    4720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4722:	69bb      	ldr	r3, [r7, #24]
    4724:	009b      	lsls	r3, r3, #2
    4726:	4413      	add	r3, r2
    4728:	681b      	ldr	r3, [r3, #0]
    472a:	781b      	ldrb	r3, [r3, #0]
    472c:	461a      	mov	r2, r3
            psUSBControl->ulEP0DataRemain =
    472e:	6a3b      	ldr	r3, [r7, #32]
    4730:	625a      	str	r2, [r3, #36]	; 0x24

            break;
    4732:	e00f      	b.n	4754 <USBDGetDescriptor+0x138>
        {
            //
            // If there is a handler for requests that are not handled then
            // call it.
            //
            if(psDevice->sCallbacks.pfnGetDescriptor)
    4734:	69fb      	ldr	r3, [r7, #28]
    4736:	681b      	ldr	r3, [r3, #0]
    4738:	2b00      	cmp	r3, #0
    473a:	d007      	beq.n	474c <USBDGetDescriptor+0x130>
            {
                psDevice->sCallbacks.pfnGetDescriptor(psUSBControl->pvInstance,
    473c:	69fb      	ldr	r3, [r7, #28]
    473e:	681b      	ldr	r3, [r3, #0]
    4740:	6a3a      	ldr	r2, [r7, #32]
    4742:	6852      	ldr	r2, [r2, #4]
    4744:	6839      	ldr	r1, [r7, #0]
    4746:	4610      	mov	r0, r2
    4748:	4798      	blx	r3
                // just stall the request.
                //
                USBDCDStallEP0(0);
            }

            return;
    474a:	e01f      	b.n	478c <USBDGetDescriptor+0x170>
                USBDCDStallEP0(0);
    474c:	2000      	movs	r0, #0
    474e:	f7ff fc51 	bl	3ff4 <USBDCDStallEP0>
            return;
    4752:	e01b      	b.n	478c <USBDGetDescriptor+0x170>
    }

    //
    // If this request has data to send, then send it.
    //
    if(psUSBControl->pEP0Data)
    4754:	6a3b      	ldr	r3, [r7, #32]
    4756:	6a1b      	ldr	r3, [r3, #32]
    4758:	2b00      	cmp	r3, #0
    475a:	d017      	beq.n	478c <USBDGetDescriptor+0x170>
    {
        //
        // If there is more data to send than is requested then just
        // send the requested amount of data.
        //
        if(psUSBControl->ulEP0DataRemain > pUSBRequest->wLength)
    475c:	6a3b      	ldr	r3, [r7, #32]
    475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4760:	683a      	ldr	r2, [r7, #0]
    4762:	88d2      	ldrh	r2, [r2, #6]
    4764:	b292      	uxth	r2, r2
    4766:	4293      	cmp	r3, r2
    4768:	d905      	bls.n	4776 <USBDGetDescriptor+0x15a>
        {
            psUSBControl->ulEP0DataRemain = pUSBRequest->wLength;
    476a:	683b      	ldr	r3, [r7, #0]
    476c:	88db      	ldrh	r3, [r3, #6]
    476e:	b29b      	uxth	r3, r3
    4770:	461a      	mov	r2, r3
    4772:	6a3b      	ldr	r3, [r7, #32]
    4774:	625a      	str	r2, [r3, #36]	; 0x24
        //
        // Now in the transmit data state.  Be careful to call the correct
        // function since we need to handle the configuration descriptor
        // differently from the others.
        //
        if(!bConfig)
    4776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    477a:	2b00      	cmp	r3, #0
    477c:	d103      	bne.n	4786 <USBDGetDescriptor+0x16a>
        {
            USBDEP0StateTx(0);
    477e:	2000      	movs	r0, #0
    4780:	f000 f9fe 	bl	4b80 <USBDEP0StateTx>
    4784:	e002      	b.n	478c <USBDGetDescriptor+0x170>
        }
        else
        {
            USBDEP0StateTxConfig(0);
    4786:	2000      	movs	r0, #0
    4788:	f000 fa5a 	bl	4c40 <USBDEP0StateTxConfig>
        }
    }
}
    478c:	3728      	adds	r7, #40	; 0x28
    478e:	46bd      	mov	sp, r7
    4790:	bd80      	pop	{r7, pc}
    4792:	bf00      	nop
    4794:	01000050 	.word	0x01000050
    4798:	40050000 	.word	0x40050000

0000479c <USBDStringIndexFromRequest>:
// could not be found.
//
//*****************************************************************************
static long
USBDStringIndexFromRequest(unsigned short usLang, unsigned short usIndex)
{
    479c:	b480      	push	{r7}
    479e:	b087      	sub	sp, #28
    47a0:	af00      	add	r7, sp, #0
    47a2:	4603      	mov	r3, r0
    47a4:	460a      	mov	r2, r1
    47a6:	80fb      	strh	r3, [r7, #6]
    47a8:	4613      	mov	r3, r2
    47aa:	80bb      	strh	r3, [r7, #4]
    unsigned long ulLoop;

    //
    // Make sure we have a string table at all.
    //
    if((g_psUSBDevice[0].psInfo == 0) ||
    47ac:	4b2b      	ldr	r3, [pc, #172]	; (485c <USBDStringIndexFromRequest+0xc0>)
    47ae:	681b      	ldr	r3, [r3, #0]
    47b0:	2b00      	cmp	r3, #0
    47b2:	d004      	beq.n	47be <USBDStringIndexFromRequest+0x22>
       (g_psUSBDevice[0].psInfo->ppStringDescriptors == 0))
    47b4:	4b29      	ldr	r3, [pc, #164]	; (485c <USBDStringIndexFromRequest+0xc0>)
    47b6:	681b      	ldr	r3, [r3, #0]
    47b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if((g_psUSBDevice[0].psInfo == 0) ||
    47ba:	2b00      	cmp	r3, #0
    47bc:	d102      	bne.n	47c4 <USBDStringIndexFromRequest+0x28>
    {
        return(-1);
    47be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    47c2:	e044      	b.n	484e <USBDStringIndexFromRequest+0xb2>
    //
    // First look for the trivial case where descriptor 0 is being
    // requested.  This is the special case since descriptor 0 contains the
    // language codes supported by the device.
    //
    if(usIndex == 0)
    47c4:	88bb      	ldrh	r3, [r7, #4]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d101      	bne.n	47ce <USBDStringIndexFromRequest+0x32>
    {
        return(0);
    47ca:	2300      	movs	r3, #0
    47cc:	e03f      	b.n	484e <USBDStringIndexFromRequest+0xb2>
    // How many languages does this device support?  This is determined by
    // looking at the length of the first descriptor in the string table,
    // subtracting 2 for the header and dividing by two (the size of each
    // language code).
    //
    ulNumLangs = (g_psUSBDevice[0].psInfo->ppStringDescriptors[0][0] - 2) / 2;
    47ce:	4b23      	ldr	r3, [pc, #140]	; (485c <USBDStringIndexFromRequest+0xc0>)
    47d0:	681b      	ldr	r3, [r3, #0]
    47d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47d4:	681b      	ldr	r3, [r3, #0]
    47d6:	781b      	ldrb	r3, [r3, #0]
    47d8:	3b02      	subs	r3, #2
    47da:	0fda      	lsrs	r2, r3, #31
    47dc:	4413      	add	r3, r2
    47de:	105b      	asrs	r3, r3, #1
    47e0:	613b      	str	r3, [r7, #16]
    // so how many are there for each language?  This may seem an odd way to
    // do this (why not just have the application tell us in the device info
    // structure?) but it's needed since we didn't want to change the API
    // after the first release which did not support multiple languages.
    //
    ulNumStringsPerLang = ((g_psUSBDevice[0].psInfo->ulNumStringDescriptors - 1) /
    47e2:	4b1e      	ldr	r3, [pc, #120]	; (485c <USBDStringIndexFromRequest+0xc0>)
    47e4:	681b      	ldr	r3, [r3, #0]
    47e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    47e8:	1e5a      	subs	r2, r3, #1
    47ea:	693b      	ldr	r3, [r7, #16]
    47ec:	fbb2 f3f3 	udiv	r3, r2, r3
    47f0:	60fb      	str	r3, [r7, #12]
    //
    // Just to be sure, make sure that the calculation indicates an equal
    // number of strings per language.  We expect the string table to contain
    // (1 + (strings_per_language * languages)) entries.
    //
    if((1 + (ulNumStringsPerLang * ulNumLangs)) !=
    47f2:	68fb      	ldr	r3, [r7, #12]
    47f4:	693a      	ldr	r2, [r7, #16]
    47f6:	fb02 f303 	mul.w	r3, r2, r3
    47fa:	1c5a      	adds	r2, r3, #1
       g_psUSBDevice[0].psInfo->ulNumStringDescriptors)
    47fc:	4b17      	ldr	r3, [pc, #92]	; (485c <USBDStringIndexFromRequest+0xc0>)
    47fe:	681b      	ldr	r3, [r3, #0]
    4800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if((1 + (ulNumStringsPerLang * ulNumLangs)) !=
    4802:	429a      	cmp	r2, r3
    4804:	d002      	beq.n	480c <USBDStringIndexFromRequest+0x70>
    {
        return(-1);
    4806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    480a:	e020      	b.n	484e <USBDStringIndexFromRequest+0xb2>
    //
    // Now determine which language we are looking for.  It is assumed that
    // the order of the groups of strings per language in the table is the
    // same as the order of the language IDs listed in the first descriptor.
    //
    pLang = (tString0Descriptor *)(g_psUSBDevice[0].psInfo->ppStringDescriptors[0]);
    480c:	4b13      	ldr	r3, [pc, #76]	; (485c <USBDStringIndexFromRequest+0xc0>)
    480e:	681b      	ldr	r3, [r3, #0]
    4810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4812:	681b      	ldr	r3, [r3, #0]
    4814:	60bb      	str	r3, [r7, #8]

    //
    // Look through the supported languages looking for the one we were asked
    // for.
    //
    for(ulLoop = 0; ulLoop < ulNumLangs; ulLoop++)
    4816:	2300      	movs	r3, #0
    4818:	617b      	str	r3, [r7, #20]
    481a:	e012      	b.n	4842 <USBDStringIndexFromRequest+0xa6>
    {
        //
        // Have we found the requested language?
        //
        if(pLang->wLANGID[ulLoop] == usLang)
    481c:	68ba      	ldr	r2, [r7, #8]
    481e:	697b      	ldr	r3, [r7, #20]
    4820:	005b      	lsls	r3, r3, #1
    4822:	4413      	add	r3, r2
    4824:	885b      	ldrh	r3, [r3, #2]
    4826:	b29b      	uxth	r3, r3
    4828:	88fa      	ldrh	r2, [r7, #6]
    482a:	429a      	cmp	r2, r3
    482c:	d106      	bne.n	483c <USBDStringIndexFromRequest+0xa0>
        {
            //
            // Yes - calculate the index of the descriptor to send.
            //
            return((ulNumStringsPerLang * ulLoop) + usIndex);
    482e:	68fb      	ldr	r3, [r7, #12]
    4830:	697a      	ldr	r2, [r7, #20]
    4832:	fb02 f203 	mul.w	r2, r2, r3
    4836:	88bb      	ldrh	r3, [r7, #4]
    4838:	4413      	add	r3, r2
    483a:	e008      	b.n	484e <USBDStringIndexFromRequest+0xb2>
    for(ulLoop = 0; ulLoop < ulNumLangs; ulLoop++)
    483c:	697b      	ldr	r3, [r7, #20]
    483e:	3301      	adds	r3, #1
    4840:	617b      	str	r3, [r7, #20]
    4842:	697a      	ldr	r2, [r7, #20]
    4844:	693b      	ldr	r3, [r7, #16]
    4846:	429a      	cmp	r2, r3
    4848:	d3e8      	bcc.n	481c <USBDStringIndexFromRequest+0x80>

    //
    // If we drop out of the loop, the requested language was not found so
    // return -1 to indicate the error.
    //
    return(-1);
    484a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    484e:	4618      	mov	r0, r3
    4850:	371c      	adds	r7, #28
    4852:	46bd      	mov	sp, r7
    4854:	f85d 7b04 	ldr.w	r7, [sp], #4
    4858:	4770      	bx	lr
    485a:	bf00      	nop
    485c:	20001668 	.word	0x20001668

00004860 <USBDSetDescriptor>:
// \return None.
//
//*****************************************************************************
static void
USBDSetDescriptor(void *pvInstance, tUSBRequest *pUSBRequest)
{
    4860:	b580      	push	{r7, lr}
    4862:	b082      	sub	sp, #8
    4864:	af00      	add	r7, sp, #0
    4866:	6078      	str	r0, [r7, #4]
    4868:	6039      	str	r1, [r7, #0]
    //
    // Need to ACK the data on end point 0 without setting last data as there
    // will be a data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, false);
    486a:	4b07      	ldr	r3, [pc, #28]	; (4888 <USBDSetDescriptor+0x28>)
    486c:	681b      	ldr	r3, [r3, #0]
    486e:	3318      	adds	r3, #24
    4870:	681b      	ldr	r3, [r3, #0]
    4872:	2200      	movs	r2, #0
    4874:	2100      	movs	r1, #0
    4876:	4805      	ldr	r0, [pc, #20]	; (488c <USBDSetDescriptor+0x2c>)
    4878:	4798      	blx	r3

    //
    // This function is not handled by default.
    //
    USBDCDStallEP0(0);
    487a:	2000      	movs	r0, #0
    487c:	f7ff fbba 	bl	3ff4 <USBDCDStallEP0>
}
    4880:	bf00      	nop
    4882:	3708      	adds	r7, #8
    4884:	46bd      	mov	sp, r7
    4886:	bd80      	pop	{r7, pc}
    4888:	01000050 	.word	0x01000050
    488c:	40050000 	.word	0x40050000

00004890 <USBDGetConfiguration>:
// \return None.
//
//*****************************************************************************
static void
USBDGetConfiguration(void *pvInstance, tUSBRequest *pUSBRequest)
{
    4890:	b580      	push	{r7, lr}
    4892:	b084      	sub	sp, #16
    4894:	af00      	add	r7, sp, #0
    4896:	6078      	str	r0, [r7, #4]
    4898:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create the device information pointer.
    //
    psUSBControl = (tDeviceInstance *)pvInstance;
    489a:	687b      	ldr	r3, [r7, #4]
    489c:	60fb      	str	r3, [r7, #12]

    //
    // Need to ACK the data on end point 0 without setting last data as there
    // will be a data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, false);
    489e:	4b10      	ldr	r3, [pc, #64]	; (48e0 <USBDGetConfiguration+0x50>)
    48a0:	681b      	ldr	r3, [r3, #0]
    48a2:	3318      	adds	r3, #24
    48a4:	681b      	ldr	r3, [r3, #0]
    48a6:	2200      	movs	r2, #0
    48a8:	2100      	movs	r1, #0
    48aa:	480e      	ldr	r0, [pc, #56]	; (48e4 <USBDGetConfiguration+0x54>)
    48ac:	4798      	blx	r3

    //
    // If we still have an address pending then the device is still not
    // configured.
    //
    if(psUSBControl->ulDevAddress & DEV_ADDR_PENDING)
    48ae:	68fb      	ldr	r3, [r7, #12]
    48b0:	68db      	ldr	r3, [r3, #12]
    48b2:	2b00      	cmp	r3, #0
    48b4:	da02      	bge.n	48bc <USBDGetConfiguration+0x2c>
    {
        ucValue = 0;
    48b6:	2300      	movs	r3, #0
    48b8:	72fb      	strb	r3, [r7, #11]
    48ba:	e003      	b.n	48c4 <USBDGetConfiguration+0x34>
    }
    else
    {
        ucValue = (unsigned char)psUSBControl->ulConfiguration;
    48bc:	68fb      	ldr	r3, [r7, #12]
    48be:	691b      	ldr	r3, [r3, #16]
    48c0:	b2db      	uxtb	r3, r3
    48c2:	72fb      	strb	r3, [r7, #11]
    }

    psUSBControl->ulEP0DataRemain = 1;
    48c4:	68fb      	ldr	r3, [r7, #12]
    48c6:	2201      	movs	r2, #1
    48c8:	625a      	str	r2, [r3, #36]	; 0x24
    psUSBControl->pEP0Data = &ucValue;
    48ca:	68fb      	ldr	r3, [r7, #12]
    48cc:	f107 020b 	add.w	r2, r7, #11
    48d0:	621a      	str	r2, [r3, #32]

    //
    // Send the single byte response.
    //
    USBDEP0StateTx(0);
    48d2:	2000      	movs	r0, #0
    48d4:	f000 f954 	bl	4b80 <USBDEP0StateTx>
}
    48d8:	bf00      	nop
    48da:	3710      	adds	r7, #16
    48dc:	46bd      	mov	sp, r7
    48de:	bd80      	pop	{r7, pc}
    48e0:	01000050 	.word	0x01000050
    48e4:	40050000 	.word	0x40050000

000048e8 <USBDSetConfiguration>:
// \return None.
//
//*****************************************************************************
static void
USBDSetConfiguration(void *pvInstance, tUSBRequest *pUSBRequest)
{
    48e8:	b580      	push	{r7, lr}
    48ea:	b086      	sub	sp, #24
    48ec:	af00      	add	r7, sp, #0
    48ee:	6078      	str	r0, [r7, #4]
    48f0:	6039      	str	r1, [r7, #0]
    tDeviceInfo *psDevice;

    //
    // Create the device information pointer.
    //
    psUSBControl = (tDeviceInstance *)pvInstance;
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	617b      	str	r3, [r7, #20]
    psDevice = psUSBControl->psInfo;
    48f6:	697b      	ldr	r3, [r7, #20]
    48f8:	681b      	ldr	r3, [r3, #0]
    48fa:	613b      	str	r3, [r7, #16]

    //
    // Need to ACK the data on end point 0 with last data set as this has no
    // data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, true);
    48fc:	4b37      	ldr	r3, [pc, #220]	; (49dc <USBDSetConfiguration+0xf4>)
    48fe:	681b      	ldr	r3, [r3, #0]
    4900:	3318      	adds	r3, #24
    4902:	681b      	ldr	r3, [r3, #0]
    4904:	2201      	movs	r2, #1
    4906:	2100      	movs	r1, #0
    4908:	4835      	ldr	r0, [pc, #212]	; (49e0 <USBDSetConfiguration+0xf8>)
    490a:	4798      	blx	r3

    //
    // Cannot set the configuration to one that does not exist so check the
    // enumeration structure to see how many valid configurations are present.
    //
    if(pUSBRequest->wValue > psUSBControl->psInfo->pDeviceDescriptor[17])
    490c:	683b      	ldr	r3, [r7, #0]
    490e:	885b      	ldrh	r3, [r3, #2]
    4910:	b29a      	uxth	r2, r3
    4912:	697b      	ldr	r3, [r7, #20]
    4914:	681b      	ldr	r3, [r3, #0]
    4916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4918:	3311      	adds	r3, #17
    491a:	781b      	ldrb	r3, [r3, #0]
    491c:	b29b      	uxth	r3, r3
    491e:	429a      	cmp	r2, r3
    4920:	d903      	bls.n	492a <USBDSetConfiguration+0x42>
    {
        //
        // The passed configuration number is not valid.  Stall the endpoint to
        // signal the error to the host.
        //
        USBDCDStallEP0(0);
    4922:	2000      	movs	r0, #0
    4924:	f7ff fb66 	bl	3ff4 <USBDCDStallEP0>
        {
            psDevice->sCallbacks.pfnConfigChange(
                psUSBControl->pvInstance, psUSBControl->ulConfiguration);
        }
    }
}
    4928:	e053      	b.n	49d2 <USBDSetConfiguration+0xea>
        psUSBControl->ulConfiguration = pUSBRequest->wValue;
    492a:	683b      	ldr	r3, [r7, #0]
    492c:	885b      	ldrh	r3, [r3, #2]
    492e:	b29b      	uxth	r3, r3
    4930:	461a      	mov	r2, r3
    4932:	697b      	ldr	r3, [r7, #20]
    4934:	611a      	str	r2, [r3, #16]
        if(psUSBControl->ulConfiguration)
    4936:	697b      	ldr	r3, [r7, #20]
    4938:	691b      	ldr	r3, [r3, #16]
    493a:	2b00      	cmp	r3, #0
    493c:	d03d      	beq.n	49ba <USBDSetConfiguration+0xd2>
            psHdr = psDevice->ppConfigDescriptors[pUSBRequest->wValue - 1];
    493e:	693b      	ldr	r3, [r7, #16]
    4940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4942:	683b      	ldr	r3, [r7, #0]
    4944:	885b      	ldrh	r3, [r3, #2]
    4946:	b29b      	uxth	r3, r3
    4948:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    494c:	3b01      	subs	r3, #1
    494e:	009b      	lsls	r3, r3, #2
    4950:	4413      	add	r3, r2
    4952:	681b      	ldr	r3, [r3, #0]
    4954:	60fb      	str	r3, [r7, #12]
            psDesc = (const tConfigDescriptor *)(psHdr->psSections[0]->pucData);
    4956:	68fb      	ldr	r3, [r7, #12]
    4958:	685b      	ldr	r3, [r3, #4]
    495a:	681b      	ldr	r3, [r3, #0]
    495c:	685b      	ldr	r3, [r3, #4]
    495e:	60bb      	str	r3, [r7, #8]
            if(!psUSBControl->bPwrSrcSet)
    4960:	697b      	ldr	r3, [r7, #20]
    4962:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    4966:	2b00      	cmp	r3, #0
    4968:	d118      	bne.n	499c <USBDSetConfiguration+0xb4>
                if((psDesc->bmAttributes & USB_CONF_ATTR_PWR_M) ==
    496a:	68bb      	ldr	r3, [r7, #8]
    496c:	79db      	ldrb	r3, [r3, #7]
    496e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4972:	2bc0      	cmp	r3, #192	; 0xc0
    4974:	d109      	bne.n	498a <USBDSetConfiguration+0xa2>
                    psUSBControl->ucStatus |= USB_STATUS_SELF_PWR;
    4976:	697b      	ldr	r3, [r7, #20]
    4978:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    497c:	f043 0301 	orr.w	r3, r3, #1
    4980:	b2da      	uxtb	r2, r3
    4982:	697b      	ldr	r3, [r7, #20]
    4984:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    4988:	e008      	b.n	499c <USBDSetConfiguration+0xb4>
                    psUSBControl->ucStatus &= ~USB_STATUS_SELF_PWR;
    498a:	697b      	ldr	r3, [r7, #20]
    498c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4990:	f023 0301 	bic.w	r3, r3, #1
    4994:	b2da      	uxtb	r2, r3
    4996:	697b      	ldr	r3, [r7, #20]
    4998:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                         psDevice->ppConfigDescriptors[pUSBRequest->wValue - 1]);
    499c:	693b      	ldr	r3, [r7, #16]
    499e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    49a0:	683b      	ldr	r3, [r7, #0]
    49a2:	885b      	ldrh	r3, [r3, #2]
    49a4:	b29b      	uxth	r3, r3
    49a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    49aa:	3b01      	subs	r3, #1
    49ac:	009b      	lsls	r3, r3, #2
    49ae:	4413      	add	r3, r2
            USBDeviceConfig(psUSBControl,
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	4619      	mov	r1, r3
    49b4:	6978      	ldr	r0, [r7, #20]
    49b6:	f001 f8e1 	bl	5b7c <USBDeviceConfig>
        if(psDevice->sCallbacks.pfnConfigChange)
    49ba:	693b      	ldr	r3, [r7, #16]
    49bc:	68db      	ldr	r3, [r3, #12]
    49be:	2b00      	cmp	r3, #0
    49c0:	d007      	beq.n	49d2 <USBDSetConfiguration+0xea>
            psDevice->sCallbacks.pfnConfigChange(
    49c2:	693b      	ldr	r3, [r7, #16]
    49c4:	68db      	ldr	r3, [r3, #12]
    49c6:	697a      	ldr	r2, [r7, #20]
    49c8:	6850      	ldr	r0, [r2, #4]
    49ca:	697a      	ldr	r2, [r7, #20]
    49cc:	6912      	ldr	r2, [r2, #16]
    49ce:	4611      	mov	r1, r2
    49d0:	4798      	blx	r3
}
    49d2:	bf00      	nop
    49d4:	3718      	adds	r7, #24
    49d6:	46bd      	mov	sp, r7
    49d8:	bd80      	pop	{r7, pc}
    49da:	bf00      	nop
    49dc:	01000050 	.word	0x01000050
    49e0:	40050000 	.word	0x40050000

000049e4 <USBDGetInterface>:
// \return None.
//
//*****************************************************************************
static void
USBDGetInterface(void *pvInstance, tUSBRequest *pUSBRequest)
{
    49e4:	b580      	push	{r7, lr}
    49e6:	b084      	sub	sp, #16
    49e8:	af00      	add	r7, sp, #0
    49ea:	6078      	str	r0, [r7, #4]
    49ec:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create the device information pointer.
    //
    psUSBControl = (tDeviceInstance *)pvInstance;
    49ee:	687b      	ldr	r3, [r7, #4]
    49f0:	60fb      	str	r3, [r7, #12]

    //
    // Need to ACK the data on end point 0 without setting last data as there
    // will be a data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, false);
    49f2:	4b17      	ldr	r3, [pc, #92]	; (4a50 <USBDGetInterface+0x6c>)
    49f4:	681b      	ldr	r3, [r3, #0]
    49f6:	3318      	adds	r3, #24
    49f8:	681b      	ldr	r3, [r3, #0]
    49fa:	2200      	movs	r2, #0
    49fc:	2100      	movs	r1, #0
    49fe:	4815      	ldr	r0, [pc, #84]	; (4a54 <USBDGetInterface+0x70>)
    4a00:	4798      	blx	r3

    //
    // If we still have an address pending then the device is still not
    // configured.
    //
    if(psUSBControl->ulDevAddress & DEV_ADDR_PENDING)
    4a02:	68fb      	ldr	r3, [r7, #12]
    4a04:	68db      	ldr	r3, [r3, #12]
    4a06:	2b00      	cmp	r3, #0
    4a08:	da02      	bge.n	4a10 <USBDGetInterface+0x2c>
    {
        ucValue = (unsigned char)0;
    4a0a:	2300      	movs	r3, #0
    4a0c:	72fb      	strb	r3, [r7, #11]
    4a0e:	e011      	b.n	4a34 <USBDGetInterface+0x50>
    else
    {
        //
        // Is the interface number valid?
        //
        if(pUSBRequest->wIndex < USB_MAX_INTERFACES_PER_DEVICE)
    4a10:	683b      	ldr	r3, [r7, #0]
    4a12:	889b      	ldrh	r3, [r3, #4]
    4a14:	b29b      	uxth	r3, r3
    4a16:	2b07      	cmp	r3, #7
    4a18:	d808      	bhi.n	4a2c <USBDGetInterface+0x48>
        {
            //
            // Read the current alternate setting for the required interface.
            //
            ucValue = psUSBControl->pucAltSetting[pUSBRequest->wIndex];
    4a1a:	683b      	ldr	r3, [r7, #0]
    4a1c:	889b      	ldrh	r3, [r3, #4]
    4a1e:	b29b      	uxth	r3, r3
    4a20:	461a      	mov	r2, r3
    4a22:	68fb      	ldr	r3, [r7, #12]
    4a24:	4413      	add	r3, r2
    4a26:	7e1b      	ldrb	r3, [r3, #24]
    4a28:	72fb      	strb	r3, [r7, #11]
    4a2a:	e003      	b.n	4a34 <USBDGetInterface+0x50>
        else
        {
            //
            // An invalid interface number was specified.
            //
            USBDCDStallEP0(0);
    4a2c:	2000      	movs	r0, #0
    4a2e:	f7ff fae1 	bl	3ff4 <USBDCDStallEP0>
    4a32:	e009      	b.n	4a48 <USBDGetInterface+0x64>
    }

    //
    // Send the single byte response.
    //
    psUSBControl->ulEP0DataRemain = 1;
    4a34:	68fb      	ldr	r3, [r7, #12]
    4a36:	2201      	movs	r2, #1
    4a38:	625a      	str	r2, [r3, #36]	; 0x24
    psUSBControl->pEP0Data = &ucValue;
    4a3a:	68fb      	ldr	r3, [r7, #12]
    4a3c:	f107 020b 	add.w	r2, r7, #11
    4a40:	621a      	str	r2, [r3, #32]

    //
    // Send the single byte response.
    //
    USBDEP0StateTx(0);
    4a42:	2000      	movs	r0, #0
    4a44:	f000 f89c 	bl	4b80 <USBDEP0StateTx>
}
    4a48:	3710      	adds	r7, #16
    4a4a:	46bd      	mov	sp, r7
    4a4c:	bd80      	pop	{r7, pc}
    4a4e:	bf00      	nop
    4a50:	01000050 	.word	0x01000050
    4a54:	40050000 	.word	0x40050000

00004a58 <USBDSetInterface>:
// \return None.
//
//*****************************************************************************
static void
USBDSetInterface(void *pvInstance, tUSBRequest *pUSBRequest)
{
    4a58:	b580      	push	{r7, lr}
    4a5a:	b08a      	sub	sp, #40	; 0x28
    4a5c:	af00      	add	r7, sp, #0
    4a5e:	6078      	str	r0, [r7, #4]
    4a60:	6039      	str	r1, [r7, #0]
    ASSERT(pvInstance != 0);

    //
    // Create the device information pointer.
    //
    psUSBControl = (tDeviceInstance *)pvInstance;
    4a62:	687b      	ldr	r3, [r7, #4]
    4a64:	623b      	str	r3, [r7, #32]
    psDevice = psUSBControl->psInfo;
    4a66:	6a3b      	ldr	r3, [r7, #32]
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	61fb      	str	r3, [r7, #28]

    //
    // Need to ACK the data on end point 0 with last data set as this has no
    // data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, true);
    4a6c:	4b36      	ldr	r3, [pc, #216]	; (4b48 <USBDSetInterface+0xf0>)
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	3318      	adds	r3, #24
    4a72:	681b      	ldr	r3, [r3, #0]
    4a74:	2201      	movs	r2, #1
    4a76:	2100      	movs	r1, #0
    4a78:	4834      	ldr	r0, [pc, #208]	; (4b4c <USBDSetInterface+0xf4>)
    4a7a:	4798      	blx	r3

    //
    // Use the current configuration.
    //
    psConfig = psDevice->ppConfigDescriptors[psUSBControl->ulConfiguration - 1];
    4a7c:	69fb      	ldr	r3, [r7, #28]
    4a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4a80:	6a3b      	ldr	r3, [r7, #32]
    4a82:	691b      	ldr	r3, [r3, #16]
    4a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a88:	3b01      	subs	r3, #1
    4a8a:	009b      	lsls	r3, r3, #2
    4a8c:	4413      	add	r3, r2
    4a8e:	681b      	ldr	r3, [r3, #0]
    4a90:	61bb      	str	r3, [r7, #24]

    //
    // How many interfaces are included in the descriptor?
    //
    ulNumInterfaces = USBDCDConfigDescGetNum(psConfig,
    4a92:	2104      	movs	r1, #4
    4a94:	69b8      	ldr	r0, [r7, #24]
    4a96:	f000 ff0a 	bl	58ae <USBDCDConfigDescGetNum>
    4a9a:	6178      	str	r0, [r7, #20]

    //
    // Find the interface descriptor for the supplied interface and alternate
    // setting numbers.
    //
    for(ulLoop = 0; ulLoop < ulNumInterfaces; ulLoop++)
    4a9c:	2300      	movs	r3, #0
    4a9e:	627b      	str	r3, [r7, #36]	; 0x24
    4aa0:	e046      	b.n	4b30 <USBDSetInterface+0xd8>
    {
        //
        // Get the next interface descriptor in the configuration descriptor.
        //
        psInterface = USBDCDConfigGetInterface(psConfig, ulLoop, USB_DESC_ANY,
    4aa2:	f107 0308 	add.w	r3, r7, #8
    4aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4aac:	69b8      	ldr	r0, [r7, #24]
    4aae:	f000 ff7d 	bl	59ac <USBDCDConfigGetInterface>
    4ab2:	6138      	str	r0, [r7, #16]
                                               &ulSection);

        //
        // Is this the required interface with the correct alternate setting?
        //
        if(psInterface &&
    4ab4:	693b      	ldr	r3, [r7, #16]
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d037      	beq.n	4b2a <USBDSetInterface+0xd2>
           (psInterface->bInterfaceNumber == pUSBRequest->wIndex) &&
    4aba:	693b      	ldr	r3, [r7, #16]
    4abc:	789b      	ldrb	r3, [r3, #2]
    4abe:	b29a      	uxth	r2, r3
    4ac0:	683b      	ldr	r3, [r7, #0]
    4ac2:	889b      	ldrh	r3, [r3, #4]
    4ac4:	b29b      	uxth	r3, r3
        if(psInterface &&
    4ac6:	429a      	cmp	r2, r3
    4ac8:	d12f      	bne.n	4b2a <USBDSetInterface+0xd2>
           (psInterface->bAlternateSetting == pUSBRequest->wValue))
    4aca:	693b      	ldr	r3, [r7, #16]
    4acc:	78db      	ldrb	r3, [r3, #3]
    4ace:	b29a      	uxth	r2, r3
    4ad0:	683b      	ldr	r3, [r7, #0]
    4ad2:	885b      	ldrh	r3, [r3, #2]
    4ad4:	b29b      	uxth	r3, r3
           (psInterface->bInterfaceNumber == pUSBRequest->wIndex) &&
    4ad6:	429a      	cmp	r2, r3
    4ad8:	d127      	bne.n	4b2a <USBDSetInterface+0xd2>
        {
            ucInterface = psInterface->bInterfaceNumber;
    4ada:	693b      	ldr	r3, [r7, #16]
    4adc:	789b      	ldrb	r3, [r3, #2]
    4ade:	73fb      	strb	r3, [r7, #15]

            //
            // This is the correct interface descriptor so save the
            // setting.
            //
            psUSBControl->pucAltSetting[ucInterface] =
    4ae0:	7bfb      	ldrb	r3, [r7, #15]
                                            psInterface->bAlternateSetting;
    4ae2:	693a      	ldr	r2, [r7, #16]
    4ae4:	78d1      	ldrb	r1, [r2, #3]
            psUSBControl->pucAltSetting[ucInterface] =
    4ae6:	6a3a      	ldr	r2, [r7, #32]
    4ae8:	4413      	add	r3, r2
    4aea:	460a      	mov	r2, r1
    4aec:	761a      	strb	r2, [r3, #24]

            //
            // Reconfigure the endpoints to match the requirements of the
            // new alternate setting for the interface.
            //
            bRetcode = USBDeviceConfigAlternate(psUSBControl, psConfig, ucInterface,
    4aee:	693b      	ldr	r3, [r7, #16]
    4af0:	78db      	ldrb	r3, [r3, #3]
    4af2:	7bfa      	ldrb	r2, [r7, #15]
    4af4:	69b9      	ldr	r1, [r7, #24]
    4af6:	6a38      	ldr	r0, [r7, #32]
    4af8:	f001 f9ee 	bl	5ed8 <USBDeviceConfigAlternate>
    4afc:	4603      	mov	r3, r0
    4afe:	73bb      	strb	r3, [r7, #14]

            //
            // If there is a callback then notify the application of the
            // change to the alternate interface.
            //
            if(bRetcode && psDevice->sCallbacks.pfnInterfaceChange)
    4b00:	7bbb      	ldrb	r3, [r7, #14]
    4b02:	2b00      	cmp	r3, #0
    4b04:	d01c      	beq.n	4b40 <USBDSetInterface+0xe8>
    4b06:	69fb      	ldr	r3, [r7, #28]
    4b08:	689b      	ldr	r3, [r3, #8]
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d018      	beq.n	4b40 <USBDSetInterface+0xe8>
            {
                psDevice->sCallbacks.pfnInterfaceChange(
    4b0e:	69fb      	ldr	r3, [r7, #28]
    4b10:	689b      	ldr	r3, [r3, #8]
    4b12:	6a3a      	ldr	r2, [r7, #32]
    4b14:	6850      	ldr	r0, [r2, #4]
                                                psUSBControl->pvInstance,
                                                pUSBRequest->wIndex,
    4b16:	683a      	ldr	r2, [r7, #0]
    4b18:	8892      	ldrh	r2, [r2, #4]
    4b1a:	b292      	uxth	r2, r2
                psDevice->sCallbacks.pfnInterfaceChange(
    4b1c:	b2d1      	uxtb	r1, r2
                                                pUSBRequest->wValue);
    4b1e:	683a      	ldr	r2, [r7, #0]
    4b20:	8852      	ldrh	r2, [r2, #2]
    4b22:	b292      	uxth	r2, r2
                psDevice->sCallbacks.pfnInterfaceChange(
    4b24:	b2d2      	uxtb	r2, r2
    4b26:	4798      	blx	r3
    4b28:	e00b      	b.n	4b42 <USBDSetInterface+0xea>
    for(ulLoop = 0; ulLoop < ulNumInterfaces; ulLoop++)
    4b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b2c:	3301      	adds	r3, #1
    4b2e:	627b      	str	r3, [r7, #36]	; 0x24
    4b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4b32:	697b      	ldr	r3, [r7, #20]
    4b34:	429a      	cmp	r2, r3
    4b36:	d3b4      	bcc.n	4aa2 <USBDSetInterface+0x4a>
    //
    // If we drop out of the loop, we didn't find an interface descriptor
    // matching the requested number and alternate setting or there was an
    // error while trying to set up for the new alternate setting.
    //
    USBDCDStallEP0(0);
    4b38:	2000      	movs	r0, #0
    4b3a:	f7ff fa5b 	bl	3ff4 <USBDCDStallEP0>
    4b3e:	e000      	b.n	4b42 <USBDSetInterface+0xea>
            return;
    4b40:	bf00      	nop
}
    4b42:	3728      	adds	r7, #40	; 0x28
    4b44:	46bd      	mov	sp, r7
    4b46:	bd80      	pop	{r7, pc}
    4b48:	01000050 	.word	0x01000050
    4b4c:	40050000 	.word	0x40050000

00004b50 <USBDSyncFrame>:
// \return None.
//
//*****************************************************************************
static void
USBDSyncFrame(void *pvInstance, tUSBRequest *pUSBRequest)
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b082      	sub	sp, #8
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
    4b58:	6039      	str	r1, [r7, #0]
    //
    // Need to ACK the data on end point 0 with last data set as this has no
    // data phase.
    //
    MAP_USBDevEndpointDataAck(USB0_BASE, USB_EP_0, true);
    4b5a:	4b07      	ldr	r3, [pc, #28]	; (4b78 <USBDSyncFrame+0x28>)
    4b5c:	681b      	ldr	r3, [r3, #0]
    4b5e:	3318      	adds	r3, #24
    4b60:	681b      	ldr	r3, [r3, #0]
    4b62:	2201      	movs	r2, #1
    4b64:	2100      	movs	r1, #0
    4b66:	4805      	ldr	r0, [pc, #20]	; (4b7c <USBDSyncFrame+0x2c>)
    4b68:	4798      	blx	r3

    //
    // Not handled yet so stall this request.
    //
    USBDCDStallEP0(0);
    4b6a:	2000      	movs	r0, #0
    4b6c:	f7ff fa42 	bl	3ff4 <USBDCDStallEP0>
}
    4b70:	bf00      	nop
    4b72:	3708      	adds	r7, #8
    4b74:	46bd      	mov	sp, r7
    4b76:	bd80      	pop	{r7, pc}
    4b78:	01000050 	.word	0x01000050
    4b7c:	40050000 	.word	0x40050000

00004b80 <USBDEP0StateTx>:
// \return None.
//
//*****************************************************************************
static void
USBDEP0StateTx(unsigned long ulIndex)
{
    4b80:	b590      	push	{r4, r7, lr}
    4b82:	b085      	sub	sp, #20
    4b84:	af00      	add	r7, sp, #0
    4b86:	6078      	str	r0, [r7, #4]
    ASSERT(ulIndex == 0);

    //
    // In the TX state on endpoint zero.
    //
    g_psUSBDevice[0].eEP0State = USB_STATE_TX;
    4b88:	4b2a      	ldr	r3, [pc, #168]	; (4c34 <USBDEP0StateTx+0xb4>)
    4b8a:	2201      	movs	r2, #1
    4b8c:	721a      	strb	r2, [r3, #8]

    //
    // Set the number of bytes to send this iteration.
    //
    ulNumBytes = g_psUSBDevice[0].ulEP0DataRemain;
    4b8e:	4b29      	ldr	r3, [pc, #164]	; (4c34 <USBDEP0StateTx+0xb4>)
    4b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4b92:	60fb      	str	r3, [r7, #12]

    //
    // Limit individual transfers to 64 bytes.
    //
    if(ulNumBytes > EP0_MAX_PACKET_SIZE)
    4b94:	68fb      	ldr	r3, [r7, #12]
    4b96:	2b40      	cmp	r3, #64	; 0x40
    4b98:	d901      	bls.n	4b9e <USBDEP0StateTx+0x1e>
    {
        ulNumBytes = EP0_MAX_PACKET_SIZE;
    4b9a:	2340      	movs	r3, #64	; 0x40
    4b9c:	60fb      	str	r3, [r7, #12]

    //
    // Save the pointer so that it can be passed to the USBEndpointDataPut()
    // function.
    //
    pData = (unsigned char *)g_psUSBDevice[0].pEP0Data;
    4b9e:	4b25      	ldr	r3, [pc, #148]	; (4c34 <USBDEP0StateTx+0xb4>)
    4ba0:	6a1b      	ldr	r3, [r3, #32]
    4ba2:	60bb      	str	r3, [r7, #8]

    //
    // Advance the data pointer and counter to the next data to be sent.
    //
    g_psUSBDevice[0].ulEP0DataRemain -= ulNumBytes;
    4ba4:	4b23      	ldr	r3, [pc, #140]	; (4c34 <USBDEP0StateTx+0xb4>)
    4ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4ba8:	68fb      	ldr	r3, [r7, #12]
    4baa:	1ad3      	subs	r3, r2, r3
    4bac:	4a21      	ldr	r2, [pc, #132]	; (4c34 <USBDEP0StateTx+0xb4>)
    4bae:	6253      	str	r3, [r2, #36]	; 0x24
    g_psUSBDevice[0].pEP0Data += ulNumBytes;
    4bb0:	4b20      	ldr	r3, [pc, #128]	; (4c34 <USBDEP0StateTx+0xb4>)
    4bb2:	6a1a      	ldr	r2, [r3, #32]
    4bb4:	68fb      	ldr	r3, [r7, #12]
    4bb6:	4413      	add	r3, r2
    4bb8:	4a1e      	ldr	r2, [pc, #120]	; (4c34 <USBDEP0StateTx+0xb4>)
    4bba:	6213      	str	r3, [r2, #32]

    //
    // Put the data in the correct FIFO.
    //
    MAP_USBEndpointDataPut(USB0_BASE, USB_EP_0, pData, ulNumBytes);
    4bbc:	4b1e      	ldr	r3, [pc, #120]	; (4c38 <USBDEP0StateTx+0xb8>)
    4bbe:	681b      	ldr	r3, [r3, #0]
    4bc0:	332c      	adds	r3, #44	; 0x2c
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	461c      	mov	r4, r3
    4bc6:	68fb      	ldr	r3, [r7, #12]
    4bc8:	68ba      	ldr	r2, [r7, #8]
    4bca:	2100      	movs	r1, #0
    4bcc:	481b      	ldr	r0, [pc, #108]	; (4c3c <USBDEP0StateTx+0xbc>)
    4bce:	47a0      	blx	r4

    //
    // If this is exactly 64 then don't set the last packet yet.
    //
    if(ulNumBytes == EP0_MAX_PACKET_SIZE)
    4bd0:	68fb      	ldr	r3, [r7, #12]
    4bd2:	2b40      	cmp	r3, #64	; 0x40
    4bd4:	d109      	bne.n	4bea <USBDEP0StateTx+0x6a>
        //
        // There is more data to send or exactly 64 bytes were sent, this
        // means that there is either more data coming or a null packet needs
        // to be sent to complete the transaction.
        //
        MAP_USBEndpointDataSend(USB0_BASE, USB_EP_0, USB_TRANS_IN);
    4bd6:	4b18      	ldr	r3, [pc, #96]	; (4c38 <USBDEP0StateTx+0xb8>)
    4bd8:	681b      	ldr	r3, [r3, #0]
    4bda:	3330      	adds	r3, #48	; 0x30
    4bdc:	681b      	ldr	r3, [r3, #0]
    4bde:	f44f 7281 	mov.w	r2, #258	; 0x102
    4be2:	2100      	movs	r1, #0
    4be4:	4815      	ldr	r0, [pc, #84]	; (4c3c <USBDEP0StateTx+0xbc>)
    4be6:	4798      	blx	r3
            // There is no longer any data pending to be sent.
            //
            g_psUSBDevice[0].ulOUTDataSize = 0;
        }
    }
}
    4be8:	e020      	b.n	4c2c <USBDEP0StateTx+0xac>
        g_psUSBDevice[0].eEP0State = USB_STATE_STATUS;
    4bea:	4b12      	ldr	r3, [pc, #72]	; (4c34 <USBDEP0StateTx+0xb4>)
    4bec:	2204      	movs	r2, #4
    4bee:	721a      	strb	r2, [r3, #8]
        MAP_USBEndpointDataSend(USB0_BASE, USB_EP_0, USB_TRANS_IN_LAST);
    4bf0:	4b11      	ldr	r3, [pc, #68]	; (4c38 <USBDEP0StateTx+0xb8>)
    4bf2:	681b      	ldr	r3, [r3, #0]
    4bf4:	3330      	adds	r3, #48	; 0x30
    4bf6:	681b      	ldr	r3, [r3, #0]
    4bf8:	f44f 7285 	mov.w	r2, #266	; 0x10a
    4bfc:	2100      	movs	r1, #0
    4bfe:	480f      	ldr	r0, [pc, #60]	; (4c3c <USBDEP0StateTx+0xbc>)
    4c00:	4798      	blx	r3
        if((g_psUSBDevice[0].psInfo->sCallbacks.pfnDataSent) &&
    4c02:	4b0c      	ldr	r3, [pc, #48]	; (4c34 <USBDEP0StateTx+0xb4>)
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	695b      	ldr	r3, [r3, #20]
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d00f      	beq.n	4c2c <USBDEP0StateTx+0xac>
           (g_psUSBDevice[0].ulOUTDataSize != 0))
    4c0c:	4b09      	ldr	r3, [pc, #36]	; (4c34 <USBDEP0StateTx+0xb4>)
    4c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if((g_psUSBDevice[0].psInfo->sCallbacks.pfnDataSent) &&
    4c10:	2b00      	cmp	r3, #0
    4c12:	d00b      	beq.n	4c2c <USBDEP0StateTx+0xac>
            g_psUSBDevice[0].psInfo->sCallbacks.pfnDataSent(
    4c14:	4b07      	ldr	r3, [pc, #28]	; (4c34 <USBDEP0StateTx+0xb4>)
    4c16:	681b      	ldr	r3, [r3, #0]
    4c18:	695b      	ldr	r3, [r3, #20]
    4c1a:	4a06      	ldr	r2, [pc, #24]	; (4c34 <USBDEP0StateTx+0xb4>)
    4c1c:	6850      	ldr	r0, [r2, #4]
    4c1e:	4a05      	ldr	r2, [pc, #20]	; (4c34 <USBDEP0StateTx+0xb4>)
    4c20:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4c22:	4611      	mov	r1, r2
    4c24:	4798      	blx	r3
            g_psUSBDevice[0].ulOUTDataSize = 0;
    4c26:	4b03      	ldr	r3, [pc, #12]	; (4c34 <USBDEP0StateTx+0xb4>)
    4c28:	2200      	movs	r2, #0
    4c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
    4c2c:	bf00      	nop
    4c2e:	3714      	adds	r7, #20
    4c30:	46bd      	mov	sp, r7
    4c32:	bd90      	pop	{r4, r7, pc}
    4c34:	20001668 	.word	0x20001668
    4c38:	01000050 	.word	0x01000050
    4c3c:	40050000 	.word	0x40050000

00004c40 <USBDEP0StateTxConfig>:
// \return None.
//
//*****************************************************************************
static void
USBDEP0StateTxConfig(unsigned long ulIndex)
{
    4c40:	b590      	push	{r4, r7, lr}
    4c42:	b08d      	sub	sp, #52	; 0x34
    4c44:	af00      	add	r7, sp, #0
    4c46:	6078      	str	r0, [r7, #4]
    ASSERT(ulIndex == 0);

    //
    // In the TX state on endpoint zero.
    //
    g_psUSBDevice[0].eEP0State = USB_STATE_TX_CONFIG;
    4c48:	4b80      	ldr	r3, [pc, #512]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4c4a:	2202      	movs	r2, #2
    4c4c:	721a      	strb	r2, [r3, #8]

    //
    // Find the current configuration descriptor definition.
    //
    psConfig = g_psUSBDevice[0].psInfo->ppConfigDescriptors[
    4c4e:	4b7f      	ldr	r3, [pc, #508]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
               g_psUSBDevice[0].ucConfigIndex];
    4c54:	4b7d      	ldr	r3, [pc, #500]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4c56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
    psConfig = g_psUSBDevice[0].psInfo->ppConfigDescriptors[
    4c5a:	009b      	lsls	r3, r3, #2
    4c5c:	4413      	add	r3, r2
    4c5e:	681b      	ldr	r3, [r3, #0]
    4c60:	623b      	str	r3, [r7, #32]

    //
    // Set the number of bytes to send this iteration.
    //
    ulNumBytes = g_psUSBDevice[0].ulEP0DataRemain;
    4c62:	4b7a      	ldr	r3, [pc, #488]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4c66:	62fb      	str	r3, [r7, #44]	; 0x2c

    //
    // Limit individual transfers to 64 bytes.
    //
    if(ulNumBytes > EP0_MAX_PACKET_SIZE)
    4c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c6a:	2b40      	cmp	r3, #64	; 0x40
    4c6c:	d901      	bls.n	4c72 <USBDEP0StateTxConfig+0x32>
    {
        ulNumBytes = EP0_MAX_PACKET_SIZE;
    4c6e:	2340      	movs	r3, #64	; 0x40
    4c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    //
    // If this is the first call, we need to fix up the total length of the
    // configuration descriptor.  This has already been determined and set in
    // g_sUSBDeviceState.ulEP0DataRemain.
    //
    if((g_psUSBDevice[0].ucSectionOffset == 0) &&
    4c72:	4b76      	ldr	r3, [pc, #472]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4c74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d13e      	bne.n	4cfa <USBDEP0StateTxConfig+0xba>
       (g_psUSBDevice[0].ucConfigSection == 0))
    4c7c:	4b73      	ldr	r3, [pc, #460]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4c7e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    if((g_psUSBDevice[0].ucSectionOffset == 0) &&
    4c82:	2b00      	cmp	r3, #0
    4c84:	d139      	bne.n	4cfa <USBDEP0StateTxConfig+0xba>
    {
        //
        // Copy the USB configuration descriptor from the beginning of the
        // first section of the current configuration.
        //
        sConfDesc = *(tConfigDescriptor *)g_psUSBDevice[0].pEP0Data;
    4c86:	4b71      	ldr	r3, [pc, #452]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4c88:	6a1a      	ldr	r2, [r3, #32]
    4c8a:	f107 030c 	add.w	r3, r7, #12
    4c8e:	6810      	ldr	r0, [r2, #0]
    4c90:	6851      	ldr	r1, [r2, #4]
    4c92:	c303      	stmia	r3!, {r0, r1}
    4c94:	7a12      	ldrb	r2, [r2, #8]
    4c96:	701a      	strb	r2, [r3, #0]

        //
        // Update the total size.
        //
        sConfDesc.wTotalLength = (unsigned short)USBDCDConfigDescGetSize(
    4c98:	6a38      	ldr	r0, [r7, #32]
    4c9a:	f000 fde4 	bl	5866 <USBDCDConfigDescGetSize>
    4c9e:	4603      	mov	r3, r0
    4ca0:	b29b      	uxth	r3, r3
    4ca2:	81fb      	strh	r3, [r7, #14]
                                                                   psConfig);

        //
        // Write the descriptor to the USB FIFO.
        //
        ulToSend = (ulNumBytes < sizeof(tConfigDescriptor)) ? ulNumBytes :
    4ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4ca6:	2b09      	cmp	r3, #9
    4ca8:	bf28      	it	cs
    4caa:	2309      	movcs	r3, #9
    4cac:	627b      	str	r3, [r7, #36]	; 0x24
                        sizeof(tConfigDescriptor);
        MAP_USBEndpointDataPut(USB0_BASE, USB_EP_0, (unsigned char *)&sConfDesc,
    4cae:	4b68      	ldr	r3, [pc, #416]	; (4e50 <USBDEP0StateTxConfig+0x210>)
    4cb0:	681b      	ldr	r3, [r3, #0]
    4cb2:	332c      	adds	r3, #44	; 0x2c
    4cb4:	681b      	ldr	r3, [r3, #0]
    4cb6:	461c      	mov	r4, r3
    4cb8:	f107 020c 	add.w	r2, r7, #12
    4cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4cbe:	2100      	movs	r1, #0
    4cc0:	4864      	ldr	r0, [pc, #400]	; (4e54 <USBDEP0StateTxConfig+0x214>)
    4cc2:	47a0      	blx	r4
                           ulToSend);

        //
        // Did we reach the end of the first section?
        //
        if(psConfig->psSections[0]->usSize == ulToSend)
    4cc4:	6a3b      	ldr	r3, [r7, #32]
    4cc6:	685b      	ldr	r3, [r3, #4]
    4cc8:	681b      	ldr	r3, [r3, #0]
    4cca:	881b      	ldrh	r3, [r3, #0]
    4ccc:	461a      	mov	r2, r3
    4cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4cd0:	4293      	cmp	r3, r2
    4cd2:	d108      	bne.n	4ce6 <USBDEP0StateTxConfig+0xa6>
        {
            //
            // Update our tracking indices to point to the start of the next
            // section.
            //
            g_psUSBDevice[0].ucSectionOffset = 0;
    4cd4:	4b5d      	ldr	r3, [pc, #372]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4cd6:	2200      	movs	r2, #0
    4cd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            g_psUSBDevice[0].ucConfigSection = 1;
    4cdc:	4b5b      	ldr	r3, [pc, #364]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4cde:	2201      	movs	r2, #1
    4ce0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    4ce4:	e004      	b.n	4cf0 <USBDEP0StateTxConfig+0xb0>
        else
        {
            //
            // Note that we have sent the first few bytes of the descriptor.
            //
            g_psUSBDevice[0].ucSectionOffset = (unsigned char)ulToSend;
    4ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ce8:	b2da      	uxtb	r2, r3
    4cea:	4b58      	ldr	r3, [pc, #352]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4cec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        }

        //
        // How many bytes do we have remaining to send on this iteration?
        //
        ulToSend = ulNumBytes - ulToSend;
    4cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4cf4:	1ad3      	subs	r3, r2, r3
    4cf6:	627b      	str	r3, [r7, #36]	; 0x24
    4cf8:	e001      	b.n	4cfe <USBDEP0StateTxConfig+0xbe>
    else
    {
        //
        // Set the number of bytes we still have to send on this call.
        //
        ulToSend = ulNumBytes;
    4cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4cfc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    //
    // Add the relevant number of bytes to the USB FIFO
    //
    while(ulToSend)
    4cfe:	e049      	b.n	4d94 <USBDEP0StateTxConfig+0x154>
    {
        //
        // Get a pointer to the current configuration section.
        //
        psSection = psConfig->psSections[g_psUSBDevice[0].ucConfigSection];
    4d00:	6a3b      	ldr	r3, [r7, #32]
    4d02:	685a      	ldr	r2, [r3, #4]
    4d04:	4b51      	ldr	r3, [pc, #324]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d06:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    4d0a:	009b      	lsls	r3, r3, #2
    4d0c:	4413      	add	r3, r2
    4d0e:	681b      	ldr	r3, [r3, #0]
    4d10:	61bb      	str	r3, [r7, #24]

        //
        // Calculate bytes are available in the current configuration section.
        //
        ulSecBytes = (unsigned long)(psSection->usSize -
    4d12:	69bb      	ldr	r3, [r7, #24]
    4d14:	881b      	ldrh	r3, [r3, #0]
    4d16:	461a      	mov	r2, r3
                     g_psUSBDevice[0].ucSectionOffset);
    4d18:	4b4c      	ldr	r3, [pc, #304]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d1a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
        ulSecBytes = (unsigned long)(psSection->usSize -
    4d1e:	1ad3      	subs	r3, r2, r3
    4d20:	62bb      	str	r3, [r7, #40]	; 0x28

        //
        // Save the pointer so that it can be passed to the
        // USBEndpointDataPut() function.
        //
        pData = (unsigned char *)psSection->pucData +
    4d22:	69bb      	ldr	r3, [r7, #24]
    4d24:	685b      	ldr	r3, [r3, #4]
                g_psUSBDevice[0].ucSectionOffset;
    4d26:	4a49      	ldr	r2, [pc, #292]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d28:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
        pData = (unsigned char *)psSection->pucData +
    4d2c:	4413      	add	r3, r2
    4d2e:	61fb      	str	r3, [r7, #28]

        //
        // Are there more bytes in this section that we still have to send?
        //
        if(ulSecBytes > ulToSend)
    4d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d34:	429a      	cmp	r2, r3
    4d36:	d901      	bls.n	4d3c <USBDEP0StateTxConfig+0xfc>
        {
            //
            // Yes - send only the remaining bytes in the transfer.
            //
            ulSecBytes = ulToSend;
    4d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d3a:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        //
        // Put the data in the correct FIFO.
        //
        MAP_USBEndpointDataPut(USB0_BASE, USB_EP_0, pData, ulSecBytes);
    4d3c:	4b44      	ldr	r3, [pc, #272]	; (4e50 <USBDEP0StateTxConfig+0x210>)
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	332c      	adds	r3, #44	; 0x2c
    4d42:	681b      	ldr	r3, [r3, #0]
    4d44:	461c      	mov	r4, r3
    4d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4d48:	69fa      	ldr	r2, [r7, #28]
    4d4a:	2100      	movs	r1, #0
    4d4c:	4841      	ldr	r0, [pc, #260]	; (4e54 <USBDEP0StateTxConfig+0x214>)
    4d4e:	47a0      	blx	r4

        //
        // Fix up our pointers for the next iteration.
        //
        ulToSend -= ulSecBytes;
    4d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4d54:	1ad3      	subs	r3, r2, r3
    4d56:	627b      	str	r3, [r7, #36]	; 0x24
        g_psUSBDevice[0].ucSectionOffset += (unsigned char)ulSecBytes;
    4d58:	4b3c      	ldr	r3, [pc, #240]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d5a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
    4d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4d60:	b2db      	uxtb	r3, r3
    4d62:	4413      	add	r3, r2
    4d64:	b2da      	uxtb	r2, r3
    4d66:	4b39      	ldr	r3, [pc, #228]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        //
        // Have we reached the end of a section?
        //
        if(g_psUSBDevice[0].ucSectionOffset == psSection->usSize)
    4d6c:	4b37      	ldr	r3, [pc, #220]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d6e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    4d72:	b29a      	uxth	r2, r3
    4d74:	69bb      	ldr	r3, [r7, #24]
    4d76:	881b      	ldrh	r3, [r3, #0]
    4d78:	429a      	cmp	r2, r3
    4d7a:	d10b      	bne.n	4d94 <USBDEP0StateTxConfig+0x154>
        {
            //
            // Yes - move to the next one.
            //
            g_psUSBDevice[0].ucConfigSection++;
    4d7c:	4b33      	ldr	r3, [pc, #204]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d7e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    4d82:	3301      	adds	r3, #1
    4d84:	b2da      	uxtb	r2, r3
    4d86:	4b31      	ldr	r3, [pc, #196]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d88:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            g_psUSBDevice[0].ucSectionOffset = 0;
    4d8c:	4b2f      	ldr	r3, [pc, #188]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d8e:	2200      	movs	r2, #0
    4d90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    while(ulToSend)
    4d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d96:	2b00      	cmp	r3, #0
    4d98:	d1b2      	bne.n	4d00 <USBDEP0StateTxConfig+0xc0>
    }

    //
    // Fix up the number of bytes remaining to be sent and the start pointer.
    //
    g_psUSBDevice[0].ulEP0DataRemain -= ulNumBytes;
    4d9a:	4b2c      	ldr	r3, [pc, #176]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4da0:	1ad3      	subs	r3, r2, r3
    4da2:	4a2a      	ldr	r2, [pc, #168]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4da4:	6253      	str	r3, [r2, #36]	; 0x24

    //
    // If we ran out of bytes in the configuration section, bail and just
    // send out what we have.
    //
    if(psConfig->ucNumSections <= g_psUSBDevice[0].ucConfigSection)
    4da6:	6a3b      	ldr	r3, [r7, #32]
    4da8:	781a      	ldrb	r2, [r3, #0]
    4daa:	4b28      	ldr	r3, [pc, #160]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4dac:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    4db0:	429a      	cmp	r2, r3
    4db2:	d802      	bhi.n	4dba <USBDEP0StateTxConfig+0x17a>
    {
        g_psUSBDevice[0].ulEP0DataRemain = 0;
    4db4:	4b25      	ldr	r3, [pc, #148]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4db6:	2200      	movs	r2, #0
    4db8:	625a      	str	r2, [r3, #36]	; 0x24

    //
    // If there is no more data don't keep looking or ucConfigSection might
    // overrun the available space.
    //
    if(g_psUSBDevice[0].ulEP0DataRemain != 0)
    4dba:	4b24      	ldr	r3, [pc, #144]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d012      	beq.n	4de8 <USBDEP0StateTxConfig+0x1a8>
    {
        pData =(unsigned char *)
            psConfig->psSections[g_psUSBDevice[0].ucConfigSection]->pucData;
    4dc2:	6a3b      	ldr	r3, [r7, #32]
    4dc4:	685a      	ldr	r2, [r3, #4]
    4dc6:	4b21      	ldr	r3, [pc, #132]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4dc8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    4dcc:	009b      	lsls	r3, r3, #2
    4dce:	4413      	add	r3, r2
    4dd0:	681b      	ldr	r3, [r3, #0]
        pData =(unsigned char *)
    4dd2:	685b      	ldr	r3, [r3, #4]
    4dd4:	61fb      	str	r3, [r7, #28]
        ulToSend = g_psUSBDevice[0].ucSectionOffset;
    4dd6:	4b1d      	ldr	r3, [pc, #116]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4dd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    4ddc:	627b      	str	r3, [r7, #36]	; 0x24
        g_psUSBDevice[0].pEP0Data = (pData + ulToSend);
    4dde:	69fa      	ldr	r2, [r7, #28]
    4de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4de2:	4413      	add	r3, r2
    4de4:	4a19      	ldr	r2, [pc, #100]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4de6:	6213      	str	r3, [r2, #32]
    }

    //
    // If this is exactly 64 then don't set the last packet yet.
    //
    if(ulNumBytes == EP0_MAX_PACKET_SIZE)
    4de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4dea:	2b40      	cmp	r3, #64	; 0x40
    4dec:	d109      	bne.n	4e02 <USBDEP0StateTxConfig+0x1c2>
        //
        // There is more data to send or exactly 64 bytes were sent, this
        // means that there is either more data coming or a null packet needs
        // to be sent to complete the transaction.
        //
        MAP_USBEndpointDataSend(USB0_BASE, USB_EP_0, USB_TRANS_IN);
    4dee:	4b18      	ldr	r3, [pc, #96]	; (4e50 <USBDEP0StateTxConfig+0x210>)
    4df0:	681b      	ldr	r3, [r3, #0]
    4df2:	3330      	adds	r3, #48	; 0x30
    4df4:	681b      	ldr	r3, [r3, #0]
    4df6:	f44f 7281 	mov.w	r2, #258	; 0x102
    4dfa:	2100      	movs	r1, #0
    4dfc:	4815      	ldr	r0, [pc, #84]	; (4e54 <USBDEP0StateTxConfig+0x214>)
    4dfe:	4798      	blx	r3
        //
        // Now go to the status state and wait for the transmit to complete.
        //
        g_psUSBDevice[0].eEP0State = USB_STATE_STATUS;
    }
}
    4e00:	e020      	b.n	4e44 <USBDEP0StateTxConfig+0x204>
        MAP_USBEndpointDataSend(USB0_BASE, USB_EP_0, USB_TRANS_IN_LAST);
    4e02:	4b13      	ldr	r3, [pc, #76]	; (4e50 <USBDEP0StateTxConfig+0x210>)
    4e04:	681b      	ldr	r3, [r3, #0]
    4e06:	3330      	adds	r3, #48	; 0x30
    4e08:	681b      	ldr	r3, [r3, #0]
    4e0a:	f44f 7285 	mov.w	r2, #266	; 0x10a
    4e0e:	2100      	movs	r1, #0
    4e10:	4810      	ldr	r0, [pc, #64]	; (4e54 <USBDEP0StateTxConfig+0x214>)
    4e12:	4798      	blx	r3
        if((g_psUSBDevice[0].psInfo->sCallbacks.pfnDataSent) &&
    4e14:	4b0d      	ldr	r3, [pc, #52]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4e16:	681b      	ldr	r3, [r3, #0]
    4e18:	695b      	ldr	r3, [r3, #20]
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d00f      	beq.n	4e3e <USBDEP0StateTxConfig+0x1fe>
           (g_psUSBDevice[0].ulOUTDataSize != 0))
    4e1e:	4b0b      	ldr	r3, [pc, #44]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if((g_psUSBDevice[0].psInfo->sCallbacks.pfnDataSent) &&
    4e22:	2b00      	cmp	r3, #0
    4e24:	d00b      	beq.n	4e3e <USBDEP0StateTxConfig+0x1fe>
            g_psUSBDevice[0].psInfo->sCallbacks.pfnDataSent(
    4e26:	4b09      	ldr	r3, [pc, #36]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	695b      	ldr	r3, [r3, #20]
    4e2c:	4a07      	ldr	r2, [pc, #28]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4e2e:	6850      	ldr	r0, [r2, #4]
    4e30:	4a06      	ldr	r2, [pc, #24]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4e32:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4e34:	4611      	mov	r1, r2
    4e36:	4798      	blx	r3
            g_psUSBDevice[0].ulOUTDataSize = 0;
    4e38:	4b04      	ldr	r3, [pc, #16]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4e3a:	2200      	movs	r2, #0
    4e3c:	629a      	str	r2, [r3, #40]	; 0x28
        g_psUSBDevice[0].eEP0State = USB_STATE_STATUS;
    4e3e:	4b03      	ldr	r3, [pc, #12]	; (4e4c <USBDEP0StateTxConfig+0x20c>)
    4e40:	2204      	movs	r2, #4
    4e42:	721a      	strb	r2, [r3, #8]
}
    4e44:	bf00      	nop
    4e46:	3734      	adds	r7, #52	; 0x34
    4e48:	46bd      	mov	sp, r7
    4e4a:	bd90      	pop	{r4, r7, pc}
    4e4c:	20001668 	.word	0x20001668
    4e50:	01000050 	.word	0x01000050
    4e54:	40050000 	.word	0x40050000

00004e58 <USBDeviceIntHandlerInternal>:
// \return None.
//
//*****************************************************************************
void
USBDeviceIntHandlerInternal(unsigned long ulIndex, unsigned long ulStatus)
{
    4e58:	b580      	push	{r7, lr}
    4e5a:	b084      	sub	sp, #16
    4e5c:	af00      	add	r7, sp, #0
    4e5e:	6078      	str	r0, [r7, #4]
    4e60:	6039      	str	r1, [r7, #0]

    //
    // If device initialization has not been performed then just disconnect
    // from the USB bus and return from the handler.
    //
    if(g_psUSBDevice[0].psInfo == 0)
    4e62:	4b3b      	ldr	r3, [pc, #236]	; (4f50 <USBDeviceIntHandlerInternal+0xf8>)
    4e64:	681b      	ldr	r3, [r3, #0]
    4e66:	2b00      	cmp	r3, #0
    4e68:	d106      	bne.n	4e78 <USBDeviceIntHandlerInternal+0x20>
    {
        MAP_USBDevDisconnect(USB0_BASE);
    4e6a:	4b3a      	ldr	r3, [pc, #232]	; (4f54 <USBDeviceIntHandlerInternal+0xfc>)
    4e6c:	681b      	ldr	r3, [r3, #0]
    4e6e:	3310      	adds	r3, #16
    4e70:	681b      	ldr	r3, [r3, #0]
    4e72:	4839      	ldr	r0, [pc, #228]	; (4f58 <USBDeviceIntHandlerInternal+0x100>)
    4e74:	4798      	blx	r3
        return;
    4e76:	e068      	b.n	4f4a <USBDeviceIntHandlerInternal+0xf2>
    }

    psInfo = g_psUSBDevice[0].psInfo;
    4e78:	4b35      	ldr	r3, [pc, #212]	; (4f50 <USBDeviceIntHandlerInternal+0xf8>)
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	60fb      	str	r3, [r7, #12]
    pvInstance = g_psUSBDevice[0].pvInstance;
    4e7e:	4b34      	ldr	r3, [pc, #208]	; (4f50 <USBDeviceIntHandlerInternal+0xf8>)
    4e80:	685b      	ldr	r3, [r3, #4]
    4e82:	60bb      	str	r3, [r7, #8]

    //
    // Received a reset from the host.
    //
    if(ulStatus & USB_INTCTRL_RESET)
    4e84:	683b      	ldr	r3, [r7, #0]
    4e86:	f003 0304 	and.w	r3, r3, #4
    4e8a:	2b00      	cmp	r3, #0
    4e8c:	d002      	beq.n	4e94 <USBDeviceIntHandlerInternal+0x3c>
    {
        USBDeviceEnumResetHandler(&g_psUSBDevice[0]);
    4e8e:	4830      	ldr	r0, [pc, #192]	; (4f50 <USBDeviceIntHandlerInternal+0xf8>)
    4e90:	f7ff fa1e 	bl	42d0 <USBDeviceEnumResetHandler>
    }

    //
    // Suspend was signaled on the bus.
    //
    if(ulStatus & USB_INTCTRL_SUSPEND)
    4e94:	683b      	ldr	r3, [r7, #0]
    4e96:	f003 0301 	and.w	r3, r3, #1
    4e9a:	2b00      	cmp	r3, #0
    4e9c:	d007      	beq.n	4eae <USBDeviceIntHandlerInternal+0x56>
    {
        //
        // Call the SuspendHandler() if it was specified.
        //
        if(psInfo->sCallbacks.pfnSuspendHandler)
    4e9e:	68fb      	ldr	r3, [r7, #12]
    4ea0:	69db      	ldr	r3, [r3, #28]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d003      	beq.n	4eae <USBDeviceIntHandlerInternal+0x56>
        {
            psInfo->sCallbacks.pfnSuspendHandler(pvInstance);
    4ea6:	68fb      	ldr	r3, [r7, #12]
    4ea8:	69db      	ldr	r3, [r3, #28]
    4eaa:	68b8      	ldr	r0, [r7, #8]
    4eac:	4798      	blx	r3
    }

    //
    // Resume was signaled on the bus.
    //
    if(ulStatus & USB_INTCTRL_RESUME)
    4eae:	683b      	ldr	r3, [r7, #0]
    4eb0:	f003 0302 	and.w	r3, r3, #2
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d007      	beq.n	4ec8 <USBDeviceIntHandlerInternal+0x70>
    {
        //
        // Call the ResumeHandler() if it was specified.
        //
        if(psInfo->sCallbacks.pfnResumeHandler)
    4eb8:	68fb      	ldr	r3, [r7, #12]
    4eba:	6a1b      	ldr	r3, [r3, #32]
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	d003      	beq.n	4ec8 <USBDeviceIntHandlerInternal+0x70>
        {
            psInfo->sCallbacks.pfnResumeHandler(pvInstance);
    4ec0:	68fb      	ldr	r3, [r7, #12]
    4ec2:	6a1b      	ldr	r3, [r3, #32]
    4ec4:	68b8      	ldr	r0, [r7, #8]
    4ec6:	4798      	blx	r3
    }

    //
    // USB device was disconnected.
    //
    if(ulStatus & USB_INTCTRL_DISCONNECT)
    4ec8:	683b      	ldr	r3, [r7, #0]
    4eca:	f003 0320 	and.w	r3, r3, #32
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d007      	beq.n	4ee2 <USBDeviceIntHandlerInternal+0x8a>
    {
        //
        // Call the DisconnectHandler() if it was specified.
        //
        if(psInfo->sCallbacks.pfnDisconnectHandler)
    4ed2:	68fb      	ldr	r3, [r7, #12]
    4ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d003      	beq.n	4ee2 <USBDeviceIntHandlerInternal+0x8a>
        {
            psInfo->sCallbacks.pfnDisconnectHandler(pvInstance);
    4eda:	68fb      	ldr	r3, [r7, #12]
    4edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ede:	68b8      	ldr	r0, [r7, #8]
    4ee0:	4798      	blx	r3
    }

    //
    // Start of Frame was received.
    //
    if(ulStatus & USB_INTCTRL_SOF)
    4ee2:	683b      	ldr	r3, [r7, #0]
    4ee4:	f003 0308 	and.w	r3, r3, #8
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d016      	beq.n	4f1a <USBDeviceIntHandlerInternal+0xc2>
    {
        //
        // Increment the global Start of Frame counter.
        //
        g_ulUSBSOFCount++;
    4eec:	4b1b      	ldr	r3, [pc, #108]	; (4f5c <USBDeviceIntHandlerInternal+0x104>)
    4eee:	681b      	ldr	r3, [r3, #0]
    4ef0:	3301      	adds	r3, #1
    4ef2:	4a1a      	ldr	r2, [pc, #104]	; (4f5c <USBDeviceIntHandlerInternal+0x104>)
    4ef4:	6013      	str	r3, [r2, #0]

        //
        // Increment our SOF divider.
        //
        ulSOFDivide++;
    4ef6:	4b1a      	ldr	r3, [pc, #104]	; (4f60 <USBDeviceIntHandlerInternal+0x108>)
    4ef8:	681b      	ldr	r3, [r3, #0]
    4efa:	3301      	adds	r3, #1
    4efc:	4a18      	ldr	r2, [pc, #96]	; (4f60 <USBDeviceIntHandlerInternal+0x108>)
    4efe:	6013      	str	r3, [r2, #0]

        //
        // Handle resume signaling if required.
        //
        USBDeviceResumeTickHandler(&g_psUSBDevice[0]);
    4f00:	4813      	ldr	r0, [pc, #76]	; (4f50 <USBDeviceIntHandlerInternal+0xf8>)
    4f02:	f7ff f891 	bl	4028 <USBDeviceResumeTickHandler>

        //
        // Have we counted enough SOFs to allow us to call the tick function?
        //
        if(ulSOFDivide == USB_SOF_TICK_DIVIDE)
    4f06:	4b16      	ldr	r3, [pc, #88]	; (4f60 <USBDeviceIntHandlerInternal+0x108>)
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	2b05      	cmp	r3, #5
    4f0c:	d105      	bne.n	4f1a <USBDeviceIntHandlerInternal+0xc2>
        {
            //
            // Yes - reset the divider and call the SOF tick handler.
            //
            ulSOFDivide = 0;
    4f0e:	4b14      	ldr	r3, [pc, #80]	; (4f60 <USBDeviceIntHandlerInternal+0x108>)
    4f10:	2200      	movs	r2, #0
    4f12:	601a      	str	r2, [r3, #0]
            InternalUSBStartOfFrameTick(USB_SOF_TICK_DIVIDE);
    4f14:	2005      	movs	r0, #5
    4f16:	f000 fc03 	bl	5720 <InternalUSBStartOfFrameTick>
    }

    //
    // Get the controller interrupt status.
    //
    ulStatus = MAP_USBIntStatusEndpoint(USB0_BASE);
    4f1a:	4b0e      	ldr	r3, [pc, #56]	; (4f54 <USBDeviceIntHandlerInternal+0xfc>)
    4f1c:	681b      	ldr	r3, [r3, #0]
    4f1e:	33d4      	adds	r3, #212	; 0xd4
    4f20:	681b      	ldr	r3, [r3, #0]
    4f22:	480d      	ldr	r0, [pc, #52]	; (4f58 <USBDeviceIntHandlerInternal+0x100>)
    4f24:	4798      	blx	r3
    4f26:	6038      	str	r0, [r7, #0]

    //
    // Handle end point 0 interrupts.
    //
    if(ulStatus & USB_INTEP_0)
    4f28:	683b      	ldr	r3, [r7, #0]
    4f2a:	f003 0301 	and.w	r3, r3, #1
    4f2e:	2b00      	cmp	r3, #0
    4f30:	d002      	beq.n	4f38 <USBDeviceIntHandlerInternal+0xe0>
    {
        USBDeviceEnumHandler(&g_psUSBDevice[0]);
    4f32:	4807      	ldr	r0, [pc, #28]	; (4f50 <USBDeviceIntHandlerInternal+0xf8>)
    4f34:	f7ff f90a 	bl	414c <USBDeviceEnumHandler>

    //
    // Because there is no way to detect if a uDMA interrupt has occurred,
    // check for an endpoint callback and call it if it is available.
    //
    if(psInfo->sCallbacks.pfnEndpointHandler)
    4f38:	68fb      	ldr	r3, [r7, #12]
    4f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f3c:	2b00      	cmp	r3, #0
    4f3e:	d004      	beq.n	4f4a <USBDeviceIntHandlerInternal+0xf2>
    {
        psInfo->sCallbacks.pfnEndpointHandler(pvInstance, ulStatus);
    4f40:	68fb      	ldr	r3, [r7, #12]
    4f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f44:	6839      	ldr	r1, [r7, #0]
    4f46:	68b8      	ldr	r0, [r7, #8]
    4f48:	4798      	blx	r3
    }
}
    4f4a:	3710      	adds	r7, #16
    4f4c:	46bd      	mov	sp, r7
    4f4e:	bd80      	pop	{r7, pc}
    4f50:	20001668 	.word	0x20001668
    4f54:	01000050 	.word	0x01000050
    4f58:	40050000 	.word	0x40050000
    4f5c:	200013f4 	.word	0x200013f4
    4f60:	200013e4 	.word	0x200013e4

00004f64 <ScheduleNextTransmission>:
// \return None.
//
//*****************************************************************************
static void
ScheduleNextTransmission(const tUSBBuffer *psBuffer)
{
    4f64:	b590      	push	{r4, r7, lr}
    4f66:	b089      	sub	sp, #36	; 0x24
    4f68:	af00      	add	r7, sp, #0
    4f6a:	6078      	str	r0, [r7, #4]
    unsigned long ulPacket, ulSpace, ulTotal, ulSent;

    //
    // Get a pointer to our workspace variables.
    //
    psVars = psBuffer->pvWorkspace;
    4f6c:	687b      	ldr	r3, [r7, #4]
    4f6e:	6a1b      	ldr	r3, [r3, #32]
    4f70:	61fb      	str	r3, [r7, #28]

    //
    // Ask the lower layer if it has space to accept another packet of data.
    //
    ulPacket = psBuffer->pfnAvailable(psBuffer->pvHandle);
    4f72:	687b      	ldr	r3, [r7, #4]
    4f74:	691b      	ldr	r3, [r3, #16]
    4f76:	687a      	ldr	r2, [r7, #4]
    4f78:	6952      	ldr	r2, [r2, #20]
    4f7a:	4610      	mov	r0, r2
    4f7c:	4798      	blx	r3
    4f7e:	61b8      	str	r0, [r7, #24]

    //
    // If we were returned something other than zero, we can write that number
    // of bytes to the lower layer.
    //
    if(ulPacket)
    4f80:	69bb      	ldr	r3, [r7, #24]
    4f82:	2b00      	cmp	r3, #0
    4f84:	d069      	beq.n	505a <ScheduleNextTransmission+0xf6>
    {
        //
        // How much contiguous data do we have in the buffer?
        //
        ulSpace = USBRingBufContigUsed(&psVars->sRingBuf);
    4f86:	69fb      	ldr	r3, [r7, #28]
    4f88:	4618      	mov	r0, r3
    4f8a:	f000 fa91 	bl	54b0 <USBRingBufContigUsed>
    4f8e:	6178      	str	r0, [r7, #20]

        //
        // How much total data do we have in the buffer?
        //
        ulTotal = USBRingBufUsed(&psVars->sRingBuf);
    4f90:	69fb      	ldr	r3, [r7, #28]
    4f92:	4618      	mov	r0, r3
    4f94:	f000 fa5e 	bl	5454 <USBRingBufUsed>
    4f98:	6138      	str	r0, [r7, #16]

        //
        // How much data will we be sending as a result of this call?
        //
        ulSent = (ulPacket < ulTotal) ? ulPacket : ulTotal;
    4f9a:	693a      	ldr	r2, [r7, #16]
    4f9c:	69bb      	ldr	r3, [r7, #24]
    4f9e:	4293      	cmp	r3, r2
    4fa0:	bf28      	it	cs
    4fa2:	4613      	movcs	r3, r2
    4fa4:	60fb      	str	r3, [r7, #12]

        //
        // Write the contiguous bytes to the lower layer assuming there is
        // something to send.
        //
        if(ulSpace)
    4fa6:	697b      	ldr	r3, [r7, #20]
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d03f      	beq.n	502c <ScheduleNextTransmission+0xc8>
        {
            //
            // There is data available to send.  Update our state to indicate
            // the amount we will be sending in this packet.
            //
            psVars->ulLastSent = ulSent;
    4fac:	69fb      	ldr	r3, [r7, #28]
    4fae:	68fa      	ldr	r2, [r7, #12]
    4fb0:	611a      	str	r2, [r3, #16]

            //
            // Determine the maximum sized block we can send in this transfer.
            //
            ulSpace = (ulSpace < ulPacket) ? ulSpace : ulPacket;
    4fb2:	697a      	ldr	r2, [r7, #20]
    4fb4:	69bb      	ldr	r3, [r7, #24]
    4fb6:	4293      	cmp	r3, r2
    4fb8:	bf28      	it	cs
    4fba:	4613      	movcs	r3, r2
    4fbc:	617b      	str	r3, [r7, #20]
            // Call the lower layer to send the new packet.  If the current
            // data spans the buffer wrap, tell the lower layer that it can
            // expect a second call to fill the whole packet before it
            // transmits it.
            //
            psBuffer->pfnTransfer(psBuffer->pvHandle,
    4fbe:	687b      	ldr	r3, [r7, #4]
    4fc0:	68dc      	ldr	r4, [r3, #12]
    4fc2:	687b      	ldr	r3, [r7, #4]
    4fc4:	6958      	ldr	r0, [r3, #20]
                                 (psVars->sRingBuf.pucBuf +
    4fc6:	69fb      	ldr	r3, [r7, #28]
    4fc8:	68da      	ldr	r2, [r3, #12]
                                  psVars->sRingBuf.ulReadIndex), ulSpace,
    4fca:	69fb      	ldr	r3, [r7, #28]
    4fcc:	689b      	ldr	r3, [r3, #8]
            psBuffer->pfnTransfer(psBuffer->pvHandle,
    4fce:	18d1      	adds	r1, r2, r3
                                  (((ulSpace < ulPacket) &&
                                    (ulSpace < ulTotal)) ? false : true));
    4fd0:	697a      	ldr	r2, [r7, #20]
    4fd2:	69bb      	ldr	r3, [r7, #24]
    4fd4:	429a      	cmp	r2, r3
    4fd6:	d203      	bcs.n	4fe0 <ScheduleNextTransmission+0x7c>
    4fd8:	697a      	ldr	r2, [r7, #20]
    4fda:	693b      	ldr	r3, [r7, #16]
    4fdc:	429a      	cmp	r2, r3
    4fde:	d301      	bcc.n	4fe4 <ScheduleNextTransmission+0x80>
    4fe0:	2301      	movs	r3, #1
    4fe2:	e000      	b.n	4fe6 <ScheduleNextTransmission+0x82>
    4fe4:	2300      	movs	r3, #0
            psBuffer->pfnTransfer(psBuffer->pvHandle,
    4fe6:	b2db      	uxtb	r3, r3
    4fe8:	697a      	ldr	r2, [r7, #20]
    4fea:	47a0      	blx	r4

            //
            // Do we need to send a second part to fill out the packet?  This
            // will occur if the current packet spans the buffer wrap.
            //
            if((ulSpace < ulPacket) && (ulSpace < ulTotal))
    4fec:	697a      	ldr	r2, [r7, #20]
    4fee:	69bb      	ldr	r3, [r7, #24]
    4ff0:	429a      	cmp	r2, r3
    4ff2:	d232      	bcs.n	505a <ScheduleNextTransmission+0xf6>
    4ff4:	697a      	ldr	r2, [r7, #20]
    4ff6:	693b      	ldr	r3, [r7, #16]
    4ff8:	429a      	cmp	r2, r3
    4ffa:	d22e      	bcs.n	505a <ScheduleNextTransmission+0xf6>
            {
                //
                // The packet straddled the wrap.  How much space remains in
                // the packet?
                //
                ulPacket -= ulSpace;
    4ffc:	69ba      	ldr	r2, [r7, #24]
    4ffe:	697b      	ldr	r3, [r7, #20]
    5000:	1ad3      	subs	r3, r2, r3
    5002:	61bb      	str	r3, [r7, #24]

                //
                // How much data can we actually send?
                //
                ulSpace = ulTotal - ulSpace;
    5004:	693a      	ldr	r2, [r7, #16]
    5006:	697b      	ldr	r3, [r7, #20]
    5008:	1ad3      	subs	r3, r2, r3
    500a:	617b      	str	r3, [r7, #20]
                ulSpace = (ulSpace > ulPacket) ? ulPacket : ulSpace;
    500c:	697a      	ldr	r2, [r7, #20]
    500e:	69bb      	ldr	r3, [r7, #24]
    5010:	4293      	cmp	r3, r2
    5012:	bf28      	it	cs
    5014:	4613      	movcs	r3, r2
    5016:	617b      	str	r3, [r7, #20]

                psBuffer->pfnTransfer(psBuffer->pvHandle,
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	68dc      	ldr	r4, [r3, #12]
    501c:	687b      	ldr	r3, [r7, #4]
    501e:	6958      	ldr	r0, [r3, #20]
    5020:	69fb      	ldr	r3, [r7, #28]
    5022:	68d9      	ldr	r1, [r3, #12]
    5024:	2301      	movs	r3, #1
    5026:	697a      	ldr	r2, [r7, #20]
    5028:	47a0      	blx	r4
        //
        // Don't update the ring buffer read index yet.  We do this once we are
        // sure the packet was correctly transmitted.
        //
    }
}
    502a:	e016      	b.n	505a <ScheduleNextTransmission+0xf6>
            if(psVars->ulLastSent == ulPacket)
    502c:	69fb      	ldr	r3, [r7, #28]
    502e:	691b      	ldr	r3, [r3, #16]
    5030:	69ba      	ldr	r2, [r7, #24]
    5032:	429a      	cmp	r2, r3
    5034:	d111      	bne.n	505a <ScheduleNextTransmission+0xf6>
                if(psVars->ulFlags & USB_BUFFER_FLAG_SEND_ZLP)
    5036:	69fb      	ldr	r3, [r7, #28]
    5038:	695b      	ldr	r3, [r3, #20]
    503a:	f003 0301 	and.w	r3, r3, #1
    503e:	2b00      	cmp	r3, #0
    5040:	d00b      	beq.n	505a <ScheduleNextTransmission+0xf6>
                    psVars->ulLastSent = 0;
    5042:	69fb      	ldr	r3, [r7, #28]
    5044:	2200      	movs	r2, #0
    5046:	611a      	str	r2, [r3, #16]
                    psBuffer->pfnTransfer(psBuffer->pvHandle,
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	68dc      	ldr	r4, [r3, #12]
    504c:	687b      	ldr	r3, [r7, #4]
    504e:	6958      	ldr	r0, [r3, #20]
    5050:	69fb      	ldr	r3, [r7, #28]
    5052:	68d9      	ldr	r1, [r3, #12]
    5054:	2301      	movs	r3, #1
    5056:	2200      	movs	r2, #0
    5058:	47a0      	blx	r4
}
    505a:	bf00      	nop
    505c:	3724      	adds	r7, #36	; 0x24
    505e:	46bd      	mov	sp, r7
    5060:	bd90      	pop	{r4, r7, pc}

00005062 <HandleRxAvailable>:
//
//*****************************************************************************
static unsigned long
HandleRxAvailable(tUSBBuffer *psBuffer, unsigned long ulSize,
                  unsigned char *pucData)
{
    5062:	b590      	push	{r4, r7, lr}
    5064:	b08b      	sub	sp, #44	; 0x2c
    5066:	af00      	add	r7, sp, #0
    5068:	60f8      	str	r0, [r7, #12]
    506a:	60b9      	str	r1, [r7, #8]
    506c:	607a      	str	r2, [r7, #4]
    unsigned long ulAvail, ulRead, ulPacket, ulRetCount;

    //
    // Get a pointer to our workspace variables.
    //
    psVars = psBuffer->pvWorkspace;
    506e:	68fb      	ldr	r3, [r7, #12]
    5070:	6a1b      	ldr	r3, [r3, #32]
    5072:	623b      	str	r3, [r7, #32]

    //
    // Has the data already been read into memory?
    //
    if(pucData)
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	2b00      	cmp	r3, #0
    5078:	d028      	beq.n	50cc <HandleRxAvailable+0x6a>
    {
        //
        // Yes - is it already in our ring buffer?
        //
        if((pucData >= psBuffer->pcBuffer) &&
    507a:	68fb      	ldr	r3, [r7, #12]
    507c:	699b      	ldr	r3, [r3, #24]
    507e:	687a      	ldr	r2, [r7, #4]
    5080:	429a      	cmp	r2, r3
    5082:	d30f      	bcc.n	50a4 <HandleRxAvailable+0x42>
           (pucData < psBuffer->pcBuffer + psBuffer->ulBufferSize))
    5084:	68fb      	ldr	r3, [r7, #12]
    5086:	699a      	ldr	r2, [r3, #24]
    5088:	68fb      	ldr	r3, [r7, #12]
    508a:	69db      	ldr	r3, [r3, #28]
    508c:	4413      	add	r3, r2
        if((pucData >= psBuffer->pcBuffer) &&
    508e:	687a      	ldr	r2, [r7, #4]
    5090:	429a      	cmp	r2, r3
    5092:	d207      	bcs.n	50a4 <HandleRxAvailable+0x42>
        {
            //
            // The data is already in our ring buffer so merely update the
            // write pointer to add the new data.
            //
            USBRingBufAdvanceWrite(&psVars->sRingBuf, ulSize);
    5094:	6a3b      	ldr	r3, [r7, #32]
    5096:	68b9      	ldr	r1, [r7, #8]
    5098:	4618      	mov	r0, r3
    509a:	f000 fa65 	bl	5568 <USBRingBufAdvanceWrite>

            //
            // In this case, we pass back 0 to indicate that the lower layer
            // doesn't need to make any buffer pointer updates.
            //
            ulRetCount = 0;
    509e:	2300      	movs	r3, #0
    50a0:	627b      	str	r3, [r7, #36]	; 0x24
    50a2:	e057      	b.n	5154 <HandleRxAvailable+0xf2>
            // The data is not within our buffer so we need to copy it into
            // the buffer.
            //
            // How much space does the buffer have available?
            //
            ulAvail = USBRingBufFree(&psVars->sRingBuf);
    50a4:	6a3b      	ldr	r3, [r7, #32]
    50a6:	4618      	mov	r0, r3
    50a8:	f000 f9f2 	bl	5490 <USBRingBufFree>
    50ac:	61b8      	str	r0, [r7, #24]

            //
            // How much should we copy?
            //
            ulRead = (ulAvail < ulSize) ? ulAvail : ulSize;
    50ae:	68ba      	ldr	r2, [r7, #8]
    50b0:	69bb      	ldr	r3, [r7, #24]
    50b2:	4293      	cmp	r3, r2
    50b4:	bf28      	it	cs
    50b6:	4613      	movcs	r3, r2
    50b8:	617b      	str	r3, [r7, #20]

            //
            // Copy the data into the buffer.
            //
            USBRingBufWrite(&psVars->sRingBuf, pucData, ulRead);
    50ba:	6a3b      	ldr	r3, [r7, #32]
    50bc:	697a      	ldr	r2, [r7, #20]
    50be:	6879      	ldr	r1, [r7, #4]
    50c0:	4618      	mov	r0, r3
    50c2:	f000 faa0 	bl	5606 <USBRingBufWrite>
            //
            // We need to return the number of bytes we read in this case
            // since the buffer supplied to us was owned by the lower layer and
            // it may need to update its read pointer.
            //
            ulRetCount = ulRead;
    50c6:	697b      	ldr	r3, [r7, #20]
    50c8:	627b      	str	r3, [r7, #36]	; 0x24
    50ca:	e043      	b.n	5154 <HandleRxAvailable+0xf2>
        // the data into memory yet.  We need to call the transfer function to
        // get the packet.
        //
        // How big is the packet that we need to receive?
        //
        ulPacket = psBuffer->pfnAvailable(psBuffer->pvHandle);
    50cc:	68fb      	ldr	r3, [r7, #12]
    50ce:	691b      	ldr	r3, [r3, #16]
    50d0:	68fa      	ldr	r2, [r7, #12]
    50d2:	6952      	ldr	r2, [r2, #20]
    50d4:	4610      	mov	r0, r2
    50d6:	4798      	blx	r3
    50d8:	61f8      	str	r0, [r7, #28]

        //
        // How much contiguous space do we have in the buffer?
        //
        ulAvail = USBRingBufContigFree(&psVars->sRingBuf);
    50da:	6a3b      	ldr	r3, [r7, #32]
    50dc:	4618      	mov	r0, r3
    50de:	f000 fa03 	bl	54e8 <USBRingBufContigFree>
    50e2:	61b8      	str	r0, [r7, #24]

        //
        // Get as much of the packet as we can in the available space.
        //
        ulRead = psBuffer->pfnTransfer(psBuffer->pvHandle,
    50e4:	68fb      	ldr	r3, [r7, #12]
    50e6:	68dc      	ldr	r4, [r3, #12]
    50e8:	68fb      	ldr	r3, [r7, #12]
    50ea:	6958      	ldr	r0, [r3, #20]
                                       (psVars->sRingBuf.pucBuf +
    50ec:	6a3b      	ldr	r3, [r7, #32]
    50ee:	68da      	ldr	r2, [r3, #12]
                                        psVars->sRingBuf.ulWriteIndex),
    50f0:	6a3b      	ldr	r3, [r7, #32]
    50f2:	685b      	ldr	r3, [r3, #4]
        ulRead = psBuffer->pfnTransfer(psBuffer->pvHandle,
    50f4:	18d1      	adds	r1, r2, r3
    50f6:	2301      	movs	r3, #1
    50f8:	69ba      	ldr	r2, [r7, #24]
    50fa:	47a0      	blx	r4
    50fc:	6178      	str	r0, [r7, #20]
                                       ulAvail, true);

        //
        // Advance the ring buffer write pointer to add our new data.
        //
        if(ulRead)
    50fe:	697b      	ldr	r3, [r7, #20]
    5100:	2b00      	cmp	r3, #0
    5102:	d004      	beq.n	510e <HandleRxAvailable+0xac>
        {
            USBRingBufAdvanceWrite(&psVars->sRingBuf, ulRead);
    5104:	6a3b      	ldr	r3, [r7, #32]
    5106:	6979      	ldr	r1, [r7, #20]
    5108:	4618      	mov	r0, r3
    510a:	f000 fa2d 	bl	5568 <USBRingBufAdvanceWrite>
        }

        //
        // Did we get the whole packet?
        //
        if(ulRead < ulPacket)
    510e:	697a      	ldr	r2, [r7, #20]
    5110:	69fb      	ldr	r3, [r7, #28]
    5112:	429a      	cmp	r2, r3
    5114:	d21c      	bcs.n	5150 <HandleRxAvailable+0xee>
        {
            //
            // No - how much space do we have in the buffer?
            //
            ulAvail = USBRingBufContigFree(&psVars->sRingBuf);
    5116:	6a3b      	ldr	r3, [r7, #32]
    5118:	4618      	mov	r0, r3
    511a:	f000 f9e5 	bl	54e8 <USBRingBufContigFree>
    511e:	61b8      	str	r0, [r7, #24]

            //
            // If there is any space left, read as much of the remainder of
            // the packet as we can.
            //
            if(ulAvail)
    5120:	69bb      	ldr	r3, [r7, #24]
    5122:	2b00      	cmp	r3, #0
    5124:	d014      	beq.n	5150 <HandleRxAvailable+0xee>
            {
                ulPacket =
                    psBuffer->pfnTransfer(psBuffer->pvHandle,
    5126:	68fb      	ldr	r3, [r7, #12]
    5128:	68dc      	ldr	r4, [r3, #12]
    512a:	68fb      	ldr	r3, [r7, #12]
    512c:	6958      	ldr	r0, [r3, #20]
                                          (psVars->sRingBuf.pucBuf +
    512e:	6a3b      	ldr	r3, [r7, #32]
    5130:	68da      	ldr	r2, [r3, #12]
                                           psVars->sRingBuf.ulWriteIndex),
    5132:	6a3b      	ldr	r3, [r7, #32]
    5134:	685b      	ldr	r3, [r3, #4]
                    psBuffer->pfnTransfer(psBuffer->pvHandle,
    5136:	18d1      	adds	r1, r2, r3
                ulPacket =
    5138:	2301      	movs	r3, #1
    513a:	69ba      	ldr	r2, [r7, #24]
    513c:	47a0      	blx	r4
    513e:	61f8      	str	r0, [r7, #28]

                //
                // Update the write pointer after we read more data into the
                // buffer.
                //
                if(ulPacket)
    5140:	69fb      	ldr	r3, [r7, #28]
    5142:	2b00      	cmp	r3, #0
    5144:	d004      	beq.n	5150 <HandleRxAvailable+0xee>
                {
                    USBRingBufAdvanceWrite(&psVars->sRingBuf, ulPacket);
    5146:	6a3b      	ldr	r3, [r7, #32]
    5148:	69f9      	ldr	r1, [r7, #28]
    514a:	4618      	mov	r0, r3
    514c:	f000 fa0c 	bl	5568 <USBRingBufAdvanceWrite>

        //
        // We need to return 0 in this case to indicate that the lower layer
        // need not perform any buffer maintenance as a result of the callback.
        //
        ulRetCount = 0;
    5150:	2300      	movs	r3, #0
    5152:	627b      	str	r3, [r7, #36]	; 0x24
    }

    //
    // How much data do we have in the buffer?
    //
    ulAvail = USBRingBufUsed(&psVars->sRingBuf);
    5154:	6a3b      	ldr	r3, [r7, #32]
    5156:	4618      	mov	r0, r3
    5158:	f000 f97c 	bl	5454 <USBRingBufUsed>
    515c:	61b8      	str	r0, [r7, #24]
    // Pass the event on to the client with the current read pointer and
    // available data size.  The client is expected to understand the ring
    // structure and be able to deal with wrap if it wants to read the data
    // directly from the buffer.
    //
    ulRead = psBuffer->pfnCallback(psBuffer->pvCBData,
    515e:	68fb      	ldr	r3, [r7, #12]
    5160:	685c      	ldr	r4, [r3, #4]
    5162:	68fb      	ldr	r3, [r7, #12]
    5164:	6898      	ldr	r0, [r3, #8]
                                   USB_EVENT_RX_AVAILABLE,
                                   ulAvail,
                                   (psVars->sRingBuf.pucBuf +
    5166:	6a3b      	ldr	r3, [r7, #32]
    5168:	68da      	ldr	r2, [r3, #12]
                                    psVars->sRingBuf.ulReadIndex));
    516a:	6a3b      	ldr	r3, [r7, #32]
    516c:	689b      	ldr	r3, [r3, #8]
                                   (psVars->sRingBuf.pucBuf +
    516e:	4413      	add	r3, r2
    ulRead = psBuffer->pfnCallback(psBuffer->pvCBData,
    5170:	69ba      	ldr	r2, [r7, #24]
    5172:	2102      	movs	r1, #2
    5174:	47a0      	blx	r4
    5176:	6178      	str	r0, [r7, #20]

    //
    // If the client read anything from the buffer, update the read pointer.
    //
    USBRingBufAdvanceRead(&psVars->sRingBuf, ulRead);
    5178:	6a3b      	ldr	r3, [r7, #32]
    517a:	6979      	ldr	r1, [r7, #20]
    517c:	4618      	mov	r0, r3
    517e:	f000 f9d7 	bl	5530 <USBRingBufAdvanceRead>

    //
    // Return the correct value to the low level driver.
    //
    return(ulRetCount);
    5182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    5184:	4618      	mov	r0, r3
    5186:	372c      	adds	r7, #44	; 0x2c
    5188:	46bd      	mov	sp, r7
    518a:	bd90      	pop	{r4, r7, pc}

0000518c <HandleDataRemaining>:
// \return Returns the number of bytes remaining to be processed.
//
//*****************************************************************************
static unsigned long
HandleDataRemaining(tUSBBuffer *psBuffer)
{
    518c:	b590      	push	{r4, r7, lr}
    518e:	b087      	sub	sp, #28
    5190:	af00      	add	r7, sp, #0
    5192:	6078      	str	r0, [r7, #4]
    tUSBBufferVars *psVars;

    //
    // Get a pointer to our workspace variables.
    //
    psVars = psBuffer->pvWorkspace;
    5194:	687b      	ldr	r3, [r7, #4]
    5196:	6a1b      	ldr	r3, [r3, #32]
    5198:	617b      	str	r3, [r7, #20]

    //
    // How much data does the client currently have buffered?
    //
    ulClientData = psBuffer->pfnCallback(psBuffer->pvCBData,
    519a:	687b      	ldr	r3, [r7, #4]
    519c:	685c      	ldr	r4, [r3, #4]
    519e:	687b      	ldr	r3, [r7, #4]
    51a0:	6898      	ldr	r0, [r3, #8]
    51a2:	2300      	movs	r3, #0
    51a4:	2200      	movs	r2, #0
    51a6:	2103      	movs	r1, #3
    51a8:	47a0      	blx	r4
    51aa:	6138      	str	r0, [r7, #16]
                                         (void *)0);

    //
    // How much data do we have in the buffer?
    //
    ulBufData = USBRingBufUsed(&psVars->sRingBuf);
    51ac:	697b      	ldr	r3, [r7, #20]
    51ae:	4618      	mov	r0, r3
    51b0:	f000 f950 	bl	5454 <USBRingBufUsed>
    51b4:	60f8      	str	r0, [r7, #12]

    //
    // Return the total number of bytes of unprocessed data to the lower layer.
    //
    return(ulBufData + ulClientData);
    51b6:	68fa      	ldr	r2, [r7, #12]
    51b8:	693b      	ldr	r3, [r7, #16]
    51ba:	4413      	add	r3, r2
}
    51bc:	4618      	mov	r0, r3
    51be:	371c      	adds	r7, #28
    51c0:	46bd      	mov	sp, r7
    51c2:	bd90      	pop	{r4, r7, pc}

000051c4 <HandleTxComplete>:
// \return Returns the number of bytes remaining to be processed.
//
//*****************************************************************************
static unsigned long
HandleTxComplete(tUSBBuffer *psBuffer, unsigned long ulSize)
{
    51c4:	b580      	push	{r7, lr}
    51c6:	b084      	sub	sp, #16
    51c8:	af00      	add	r7, sp, #0
    51ca:	6078      	str	r0, [r7, #4]
    51cc:	6039      	str	r1, [r7, #0]
    tUSBBufferVars *psVars;

    //
    // Get a pointer to our workspace variables.
    //
    psVars = psBuffer->pvWorkspace;
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	6a1b      	ldr	r3, [r3, #32]
    51d2:	60fb      	str	r3, [r7, #12]

    //
    // Update the transmit buffer read pointer to remove the data that has
    // now been transmitted.
    //
    USBRingBufAdvanceRead(&psVars->sRingBuf, ulSize);
    51d4:	68fb      	ldr	r3, [r7, #12]
    51d6:	6839      	ldr	r1, [r7, #0]
    51d8:	4618      	mov	r0, r3
    51da:	f000 f9a9 	bl	5530 <USBRingBufAdvanceRead>

    //
    // Try to schedule the next packet transmission if data remains to be
    // sent.
    //
    ScheduleNextTransmission(psBuffer);
    51de:	6878      	ldr	r0, [r7, #4]
    51e0:	f7ff fec0 	bl	4f64 <ScheduleNextTransmission>

    //
    // The return code from this event is ignored.
    //
    return(0);
    51e4:	2300      	movs	r3, #0
}
    51e6:	4618      	mov	r0, r3
    51e8:	3710      	adds	r7, #16
    51ea:	46bd      	mov	sp, r7
    51ec:	bd80      	pop	{r7, pc}

000051ee <HandleRequestBuffer>:
//
//*****************************************************************************
static unsigned long
HandleRequestBuffer(tUSBBuffer *psBuffer, unsigned long ulSize,
                    unsigned char **ppucBuffer)
{
    51ee:	b580      	push	{r7, lr}
    51f0:	b086      	sub	sp, #24
    51f2:	af00      	add	r7, sp, #0
    51f4:	60f8      	str	r0, [r7, #12]
    51f6:	60b9      	str	r1, [r7, #8]
    51f8:	607a      	str	r2, [r7, #4]
    unsigned long ulSpace;

    //
    // Get a pointer to our workspace variables.
    //
    psVars = psBuffer->pvWorkspace;
    51fa:	68fb      	ldr	r3, [r7, #12]
    51fc:	6a1b      	ldr	r3, [r3, #32]
    51fe:	617b      	str	r3, [r7, #20]

    //
    // How much contiguous space do we have available?
    //
    ulSpace = USBRingBufContigFree(&psVars->sRingBuf);
    5200:	697b      	ldr	r3, [r7, #20]
    5202:	4618      	mov	r0, r3
    5204:	f000 f970 	bl	54e8 <USBRingBufContigFree>
    5208:	6138      	str	r0, [r7, #16]

    //
    // Is there enough space available to satisfy the request?
    //
    if(ulSpace >= ulSize)
    520a:	693a      	ldr	r2, [r7, #16]
    520c:	68bb      	ldr	r3, [r7, #8]
    520e:	429a      	cmp	r2, r3
    5210:	d308      	bcc.n	5224 <HandleRequestBuffer+0x36>
    {
        //
        // Yes - return the current write pointer
        //
        *ppucBuffer = psVars->sRingBuf.pucBuf + psVars->sRingBuf.ulWriteIndex;
    5212:	697b      	ldr	r3, [r7, #20]
    5214:	68da      	ldr	r2, [r3, #12]
    5216:	697b      	ldr	r3, [r7, #20]
    5218:	685b      	ldr	r3, [r3, #4]
    521a:	441a      	add	r2, r3
    521c:	687b      	ldr	r3, [r7, #4]
    521e:	601a      	str	r2, [r3, #0]
        return(ulSize);
    5220:	68bb      	ldr	r3, [r7, #8]
    5222:	e003      	b.n	522c <HandleRequestBuffer+0x3e>
    {
        //
        // We do not have enough contiguous space following the current write
        // pointer to satisfy the request so do not provide a buffer.
        //
        *ppucBuffer = (unsigned char *)0;
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	2200      	movs	r2, #0
    5228:	601a      	str	r2, [r3, #0]
        return(0);
    522a:	2300      	movs	r3, #0
    }
}
    522c:	4618      	mov	r0, r3
    522e:	3718      	adds	r7, #24
    5230:	46bd      	mov	sp, r7
    5232:	bd80      	pop	{r7, pc}

00005234 <USBBufferInit>:
//! NULL if an error is detected.
//
//*****************************************************************************
const tUSBBuffer *
USBBufferInit(const tUSBBuffer *psBuffer)
{
    5234:	b580      	push	{r7, lr}
    5236:	b084      	sub	sp, #16
    5238:	af00      	add	r7, sp, #0
    523a:	6078      	str	r0, [r7, #4]

    //
    // Get a pointer to the buffer workspace and initialize the variables it
    // contains.
    //
    psVars = psBuffer->pvWorkspace;
    523c:	687b      	ldr	r3, [r7, #4]
    523e:	6a1b      	ldr	r3, [r3, #32]
    5240:	60fb      	str	r3, [r7, #12]
    psVars->ulFlags = 0;
    5242:	68fb      	ldr	r3, [r7, #12]
    5244:	2200      	movs	r2, #0
    5246:	615a      	str	r2, [r3, #20]
    USBRingBufInit(&psVars->sRingBuf, psBuffer->pcBuffer,
    5248:	68f8      	ldr	r0, [r7, #12]
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	6999      	ldr	r1, [r3, #24]
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	69db      	ldr	r3, [r3, #28]
    5252:	461a      	mov	r2, r3
    5254:	f000 f9f3 	bl	563e <USBRingBufInit>
                   psBuffer->ulBufferSize);

    //
    // If all is well, return the same pointer we were originally passed.
    //
    return(psBuffer);
    5258:	687b      	ldr	r3, [r7, #4]
}
    525a:	4618      	mov	r0, r3
    525c:	3710      	adds	r7, #16
    525e:	46bd      	mov	sp, r7
    5260:	bd80      	pop	{r7, pc}

00005262 <USBBufferInfoGet>:
//! \return None.
//
//*****************************************************************************
void
USBBufferInfoGet(const tUSBBuffer *psBuffer, tUSBRingBufObject *psRingBuf)
{
    5262:	b490      	push	{r4, r7}
    5264:	b084      	sub	sp, #16
    5266:	af00      	add	r7, sp, #0
    5268:	6078      	str	r0, [r7, #4]
    526a:	6039      	str	r1, [r7, #0]
    ASSERT(psBuffer && psRingBuf);

    //
    // Get our workspace variables.
    //
    psVars = psBuffer->pvWorkspace;
    526c:	687b      	ldr	r3, [r7, #4]
    526e:	6a1b      	ldr	r3, [r3, #32]
    5270:	60fb      	str	r3, [r7, #12]

    //
    // Copy the current ring buffer settings to the clients storage.
    //
    *psRingBuf = psVars->sRingBuf;
    5272:	683a      	ldr	r2, [r7, #0]
    5274:	68fb      	ldr	r3, [r7, #12]
    5276:	4614      	mov	r4, r2
    5278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    527a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    527e:	bf00      	nop
    5280:	3710      	adds	r7, #16
    5282:	46bd      	mov	sp, r7
    5284:	bc90      	pop	{r4, r7}
    5286:	4770      	bx	lr

00005288 <USBBufferDataWritten>:
//! \return None.
//
//*****************************************************************************
void
USBBufferDataWritten(const tUSBBuffer *psBuffer, unsigned long ulLength)
{
    5288:	b580      	push	{r7, lr}
    528a:	b084      	sub	sp, #16
    528c:	af00      	add	r7, sp, #0
    528e:	6078      	str	r0, [r7, #4]
    5290:	6039      	str	r1, [r7, #0]
    ASSERT(psBuffer);

    //
    // Get our workspace variables.
    //
    psVars = psBuffer->pvWorkspace;
    5292:	687b      	ldr	r3, [r7, #4]
    5294:	6a1b      	ldr	r3, [r3, #32]
    5296:	60fb      	str	r3, [r7, #12]

    //
    // Advance the ring buffer write pointer to include the newly written
    // data.
    //
    if(ulLength)
    5298:	683b      	ldr	r3, [r7, #0]
    529a:	2b00      	cmp	r3, #0
    529c:	d004      	beq.n	52a8 <USBBufferDataWritten+0x20>
    {
        USBRingBufAdvanceWrite(&psVars->sRingBuf, ulLength);
    529e:	68fb      	ldr	r3, [r7, #12]
    52a0:	6839      	ldr	r1, [r7, #0]
    52a2:	4618      	mov	r0, r3
    52a4:	f000 f960 	bl	5568 <USBRingBufAdvanceWrite>
    }

    //
    // Try to schedule a new packet transmission.
    //
    ScheduleNextTransmission(psBuffer);
    52a8:	6878      	ldr	r0, [r7, #4]
    52aa:	f7ff fe5b 	bl	4f64 <ScheduleNextTransmission>
}
    52ae:	bf00      	nop
    52b0:	3710      	adds	r7, #16
    52b2:	46bd      	mov	sp, r7
    52b4:	bd80      	pop	{r7, pc}

000052b6 <USBBufferFlush>:
//! \return None.
//
//*****************************************************************************
void
USBBufferFlush(const tUSBBuffer *psBuffer)
{
    52b6:	b580      	push	{r7, lr}
    52b8:	b084      	sub	sp, #16
    52ba:	af00      	add	r7, sp, #0
    52bc:	6078      	str	r0, [r7, #4]
    ASSERT(psBuffer);

    //
    // Get our workspace variables.
    //
    psVars = psBuffer->pvWorkspace;
    52be:	687b      	ldr	r3, [r7, #4]
    52c0:	6a1b      	ldr	r3, [r3, #32]
    52c2:	60fb      	str	r3, [r7, #12]

    //
    // Flush the ring buffer.
    //
    USBRingBufFlush(&psVars->sRingBuf);
    52c4:	68fb      	ldr	r3, [r7, #12]
    52c6:	4618      	mov	r0, r3
    52c8:	f000 f8af 	bl	542a <USBRingBufFlush>
}
    52cc:	bf00      	nop
    52ce:	3710      	adds	r7, #16
    52d0:	46bd      	mov	sp, r7
    52d2:	bd80      	pop	{r7, pc}

000052d4 <USBBufferSpaceAvailable>:
//! \return Returns the number of free bytes in the buffer.
//
//*****************************************************************************
unsigned long
USBBufferSpaceAvailable(const tUSBBuffer *psBuffer)
{
    52d4:	b580      	push	{r7, lr}
    52d6:	b084      	sub	sp, #16
    52d8:	af00      	add	r7, sp, #0
    52da:	6078      	str	r0, [r7, #4]
    ASSERT(psBuffer);

    //
    // Get our workspace variables.
    //
    psVars = psBuffer->pvWorkspace;
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	6a1b      	ldr	r3, [r3, #32]
    52e0:	60fb      	str	r3, [r7, #12]

    //
    // Return the amount of space available in the buffer.
    //
    return(USBRingBufFree(&psVars->sRingBuf));
    52e2:	68fb      	ldr	r3, [r7, #12]
    52e4:	4618      	mov	r0, r3
    52e6:	f000 f8d3 	bl	5490 <USBRingBufFree>
    52ea:	4603      	mov	r3, r0
}
    52ec:	4618      	mov	r0, r3
    52ee:	3710      	adds	r7, #16
    52f0:	46bd      	mov	sp, r7
    52f2:	bd80      	pop	{r7, pc}

000052f4 <USBBufferEventCallback>:
//
//*****************************************************************************
unsigned long
USBBufferEventCallback(void *pvCBData, unsigned long ulEvent,
                       unsigned long ulMsgValue, void *pvMsgData)
{
    52f4:	b590      	push	{r4, r7, lr}
    52f6:	b087      	sub	sp, #28
    52f8:	af00      	add	r7, sp, #0
    52fa:	60f8      	str	r0, [r7, #12]
    52fc:	60b9      	str	r1, [r7, #8]
    52fe:	607a      	str	r2, [r7, #4]
    5300:	603b      	str	r3, [r7, #0]
    tUSBBuffer *psBuffer;

    //
    // Get our instance data pointers from the callback data.
    //
    psBuffer = (tUSBBuffer *)pvCBData;
    5302:	68fb      	ldr	r3, [r7, #12]
    5304:	617b      	str	r3, [r7, #20]
    ASSERT(psBuffer);

    //
    // Which event have we been sent?
    //
    switch(ulEvent)
    5306:	68bb      	ldr	r3, [r7, #8]
    5308:	3b02      	subs	r3, #2
    530a:	2b03      	cmp	r3, #3
    530c:	d82e      	bhi.n	536c <USBBufferEventCallback+0x78>
    530e:	a201      	add	r2, pc, #4	; (adr r2, 5314 <USBBufferEventCallback+0x20>)
    5310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5314:	00005325 	.word	0x00005325
    5318:	0000533b 	.word	0x0000533b
    531c:	00005357 	.word	0x00005357
    5320:	00005345 	.word	0x00005345
        case USB_EVENT_RX_AVAILABLE:
        {
            //
            // This event is only relevant to us if we are a receive buffer.
            //
            if(!psBuffer->bTransmitBuffer)
    5324:	697b      	ldr	r3, [r7, #20]
    5326:	781b      	ldrb	r3, [r3, #0]
    5328:	2b00      	cmp	r3, #0
    532a:	d121      	bne.n	5370 <USBBufferEventCallback+0x7c>
            {
                return(HandleRxAvailable(psBuffer, ulMsgValue, pvMsgData));
    532c:	683a      	ldr	r2, [r7, #0]
    532e:	6879      	ldr	r1, [r7, #4]
    5330:	6978      	ldr	r0, [r7, #20]
    5332:	f7ff fe96 	bl	5062 <HandleRxAvailable>
    5336:	4603      	mov	r3, r0
    5338:	e028      	b.n	538c <USBBufferEventCallback+0x98>
        //
        // We are being asked how much data remains to be processed.
        //
        case USB_EVENT_DATA_REMAINING:
        {
            return(HandleDataRemaining(psBuffer));
    533a:	6978      	ldr	r0, [r7, #20]
    533c:	f7ff ff26 	bl	518c <HandleDataRemaining>
    5340:	4603      	mov	r3, r0
    5342:	e023      	b.n	538c <USBBufferEventCallback+0x98>
        case USB_EVENT_TX_COMPLETE:
        {
            //
            // This event is only relevant to us if we are a transmit buffer.
            //
            if(psBuffer->bTransmitBuffer)
    5344:	697b      	ldr	r3, [r7, #20]
    5346:	781b      	ldrb	r3, [r3, #0]
    5348:	2b00      	cmp	r3, #0
    534a:	d013      	beq.n	5374 <USBBufferEventCallback+0x80>
            {
                //
                // Handle the message then drop out of the switch so that the
                // event is echoed to the layer above.
                //
                HandleTxComplete(psBuffer, ulMsgValue);
    534c:	6879      	ldr	r1, [r7, #4]
    534e:	6978      	ldr	r0, [r7, #20]
    5350:	f7ff ff38 	bl	51c4 <HandleTxComplete>
            }
            break;
    5354:	e00e      	b.n	5374 <USBBufferEventCallback+0x80>
        case USB_EVENT_REQUEST_BUFFER:
        {
            //
            // This event is only relevant to us if we are a receive buffer.
            //
            if(!psBuffer->bTransmitBuffer)
    5356:	697b      	ldr	r3, [r7, #20]
    5358:	781b      	ldrb	r3, [r3, #0]
    535a:	2b00      	cmp	r3, #0
    535c:	d10c      	bne.n	5378 <USBBufferEventCallback+0x84>
            {
                return(HandleRequestBuffer(psBuffer, ulMsgValue, pvMsgData));
    535e:	683a      	ldr	r2, [r7, #0]
    5360:	6879      	ldr	r1, [r7, #4]
    5362:	6978      	ldr	r0, [r7, #20]
    5364:	f7ff ff43 	bl	51ee <HandleRequestBuffer>
    5368:	4603      	mov	r3, r0
    536a:	e00f      	b.n	538c <USBBufferEventCallback+0x98>
        //
        // All other events are merely passed through to the client.
        //
        default:
        {
            break;
    536c:	bf00      	nop
    536e:	e004      	b.n	537a <USBBufferEventCallback+0x86>
            break;
    5370:	bf00      	nop
    5372:	e002      	b.n	537a <USBBufferEventCallback+0x86>
            break;
    5374:	bf00      	nop
    5376:	e000      	b.n	537a <USBBufferEventCallback+0x86>
            break;
    5378:	bf00      	nop

    //
    // If we drop out of the switch, we need to pass the event on to the client
    // unmodified and return the relevant return code back to the lower layer.
    //
    return(psBuffer->pfnCallback(psBuffer->pvCBData, ulEvent, ulMsgValue,
    537a:	697b      	ldr	r3, [r7, #20]
    537c:	685c      	ldr	r4, [r3, #4]
    537e:	697b      	ldr	r3, [r7, #20]
    5380:	6898      	ldr	r0, [r3, #8]
    5382:	683b      	ldr	r3, [r7, #0]
    5384:	687a      	ldr	r2, [r7, #4]
    5386:	68b9      	ldr	r1, [r7, #8]
    5388:	47a0      	blx	r4
    538a:	4603      	mov	r3, r0
                                 pvMsgData));
}
    538c:	4618      	mov	r0, r3
    538e:	371c      	adds	r7, #28
    5390:	46bd      	mov	sp, r7
    5392:	bd90      	pop	{r4, r7, pc}

00005394 <USBStackModeSet>:
//
//*****************************************************************************
void
USBStackModeSet(unsigned long ulIndex, tUSBMode eUSBMode,
                tUSBModeCallback pfnCallback)
{
    5394:	b580      	push	{r7, lr}
    5396:	b084      	sub	sp, #16
    5398:	af00      	add	r7, sp, #0
    539a:	60f8      	str	r0, [r7, #12]
    539c:	460b      	mov	r3, r1
    539e:	607a      	str	r2, [r7, #4]
    53a0:	72fb      	strb	r3, [r7, #11]
    ASSERT(ulIndex == 0);

    //
    // Remember the mode so that we can steer the interrupts appropriately.
    //
    g_eUSBMode = eUSBMode;
    53a2:	4a0d      	ldr	r2, [pc, #52]	; (53d8 <USBStackModeSet+0x44>)
    53a4:	7afb      	ldrb	r3, [r7, #11]
    53a6:	7013      	strb	r3, [r2, #0]

    //
    // Remember the callback pointer.
    //
    g_pfnUSBModeCallback = pfnCallback;
    53a8:	4a0c      	ldr	r2, [pc, #48]	; (53dc <USBStackModeSet+0x48>)
    53aa:	687b      	ldr	r3, [r7, #4]
    53ac:	6013      	str	r3, [r2, #0]

    //
    // If we are being asked to be either a host or device, we will not be
    // trying to auto-detect the mode so make the callback immediately.
    //
    if((eUSBMode == USB_MODE_DEVICE) || (eUSBMode == USB_MODE_HOST))
    53ae:	7afb      	ldrb	r3, [r7, #11]
    53b0:	2b00      	cmp	r3, #0
    53b2:	d002      	beq.n	53ba <USBStackModeSet+0x26>
    53b4:	7afb      	ldrb	r3, [r7, #11]
    53b6:	2b01      	cmp	r3, #1
    53b8:	d109      	bne.n	53ce <USBStackModeSet+0x3a>
    {
        //
        // Make sure that a callback was provided.
        //
        if(g_pfnUSBModeCallback)
    53ba:	4b08      	ldr	r3, [pc, #32]	; (53dc <USBStackModeSet+0x48>)
    53bc:	681b      	ldr	r3, [r3, #0]
    53be:	2b00      	cmp	r3, #0
    53c0:	d005      	beq.n	53ce <USBStackModeSet+0x3a>
        {
            g_pfnUSBModeCallback(0, eUSBMode);
    53c2:	4b06      	ldr	r3, [pc, #24]	; (53dc <USBStackModeSet+0x48>)
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	7afa      	ldrb	r2, [r7, #11]
    53c8:	4611      	mov	r1, r2
    53ca:	2000      	movs	r0, #0
    53cc:	4798      	blx	r3
        }
    }
}
    53ce:	bf00      	nop
    53d0:	3710      	adds	r7, #16
    53d2:	46bd      	mov	sp, r7
    53d4:	bd80      	pop	{r7, pc}
    53d6:	bf00      	nop
    53d8:	20000a20 	.word	0x20000a20
    53dc:	200013e8 	.word	0x200013e8

000053e0 <UpdateIndexAtomic>:
//
//*****************************************************************************
static void
UpdateIndexAtomic(volatile unsigned long *pulVal, unsigned long ulDelta,
                  unsigned long ulSize)
{
    53e0:	b580      	push	{r7, lr}
    53e2:	b086      	sub	sp, #24
    53e4:	af00      	add	r7, sp, #0
    53e6:	60f8      	str	r0, [r7, #12]
    53e8:	60b9      	str	r1, [r7, #8]
    53ea:	607a      	str	r2, [r7, #4]
    tBoolean bIntsOff;

    //
    // Turn interrupts off temporarily.
    //
    bIntsOff = IntMasterDisable();
    53ec:	f000 fec6 	bl	617c <IntMasterDisable>
    53f0:	4603      	mov	r3, r0
    53f2:	75fb      	strb	r3, [r7, #23]

    //
    // Update the variable value.
    //
    *pulVal += ulDelta;
    53f4:	68fb      	ldr	r3, [r7, #12]
    53f6:	681a      	ldr	r2, [r3, #0]
    53f8:	68bb      	ldr	r3, [r7, #8]
    53fa:	441a      	add	r2, r3
    53fc:	68fb      	ldr	r3, [r7, #12]
    53fe:	601a      	str	r2, [r3, #0]
    //
    // Correct for wrap.  We use a loop here since we don't want to use a
    // modulus operation with interrupts off but we don't want to fail in
    // case ulDelta is greater than ulSize (which is extremely unlikely but...)
    //
    while(*pulVal >= ulSize)
    5400:	e005      	b.n	540e <UpdateIndexAtomic+0x2e>
    {
        *pulVal -= ulSize;
    5402:	68fb      	ldr	r3, [r7, #12]
    5404:	681a      	ldr	r2, [r3, #0]
    5406:	687b      	ldr	r3, [r7, #4]
    5408:	1ad2      	subs	r2, r2, r3
    540a:	68fb      	ldr	r3, [r7, #12]
    540c:	601a      	str	r2, [r3, #0]
    while(*pulVal >= ulSize)
    540e:	68fb      	ldr	r3, [r7, #12]
    5410:	681b      	ldr	r3, [r3, #0]
    5412:	687a      	ldr	r2, [r7, #4]
    5414:	429a      	cmp	r2, r3
    5416:	d9f4      	bls.n	5402 <UpdateIndexAtomic+0x22>
    }

    //
    // Restore the interrupt state
    //
    if(!bIntsOff)
    5418:	7dfb      	ldrb	r3, [r7, #23]
    541a:	2b00      	cmp	r3, #0
    541c:	d101      	bne.n	5422 <UpdateIndexAtomic+0x42>
    {
        IntMasterEnable();
    541e:	f000 fea5 	bl	616c <IntMasterEnable>
    }
}
    5422:	bf00      	nop
    5424:	3718      	adds	r7, #24
    5426:	46bd      	mov	sp, r7
    5428:	bd80      	pop	{r7, pc}

0000542a <USBRingBufFlush>:
//! \return None.
//
//*****************************************************************************
void
USBRingBufFlush(tUSBRingBufObject *ptUSBRingBuf)
{
    542a:	b580      	push	{r7, lr}
    542c:	b084      	sub	sp, #16
    542e:	af00      	add	r7, sp, #0
    5430:	6078      	str	r0, [r7, #4]

    //
    // Set the Read/Write pointers to be the same.  Do this with interrupts
    // disabled to prevent the possibility of corruption of the read index.
    //
    bIntsOff = IntMasterDisable();
    5432:	f000 fea3 	bl	617c <IntMasterDisable>
    5436:	4603      	mov	r3, r0
    5438:	73fb      	strb	r3, [r7, #15]
    ptUSBRingBuf->ulReadIndex = ptUSBRingBuf->ulWriteIndex;
    543a:	687b      	ldr	r3, [r7, #4]
    543c:	685a      	ldr	r2, [r3, #4]
    543e:	687b      	ldr	r3, [r7, #4]
    5440:	609a      	str	r2, [r3, #8]
    if(!bIntsOff)
    5442:	7bfb      	ldrb	r3, [r7, #15]
    5444:	2b00      	cmp	r3, #0
    5446:	d101      	bne.n	544c <USBRingBufFlush+0x22>
    {
        IntMasterEnable();
    5448:	f000 fe90 	bl	616c <IntMasterEnable>
    }
}
    544c:	bf00      	nop
    544e:	3710      	adds	r7, #16
    5450:	46bd      	mov	sp, r7
    5452:	bd80      	pop	{r7, pc}

00005454 <USBRingBufUsed>:
//! \return Returns the number of bytes stored in the ring buffer.
//
//*****************************************************************************
unsigned long
USBRingBufUsed(tUSBRingBufObject *ptUSBRingBuf)
{
    5454:	b480      	push	{r7}
    5456:	b085      	sub	sp, #20
    5458:	af00      	add	r7, sp, #0
    545a:	6078      	str	r0, [r7, #4]
    ASSERT(ptUSBRingBuf != NULL);

    //
    // Copy the Read/Write indices for calculation.
    //
    ulWrite = ptUSBRingBuf->ulWriteIndex;
    545c:	687b      	ldr	r3, [r7, #4]
    545e:	685b      	ldr	r3, [r3, #4]
    5460:	60fb      	str	r3, [r7, #12]
    ulRead = ptUSBRingBuf->ulReadIndex;
    5462:	687b      	ldr	r3, [r7, #4]
    5464:	689b      	ldr	r3, [r3, #8]
    5466:	60bb      	str	r3, [r7, #8]

    //
    // Return the number of bytes contained in the ring buffer.
    //
    return((ulWrite >= ulRead) ? (ulWrite - ulRead) :
    5468:	68fa      	ldr	r2, [r7, #12]
    546a:	68bb      	ldr	r3, [r7, #8]
    546c:	429a      	cmp	r2, r3
    546e:	d303      	bcc.n	5478 <USBRingBufUsed+0x24>
    5470:	68fa      	ldr	r2, [r7, #12]
    5472:	68bb      	ldr	r3, [r7, #8]
    5474:	1ad3      	subs	r3, r2, r3
    5476:	e005      	b.n	5484 <USBRingBufUsed+0x30>
           (ptUSBRingBuf->ulSize - (ulRead - ulWrite)));
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	681a      	ldr	r2, [r3, #0]
    547c:	68f9      	ldr	r1, [r7, #12]
    547e:	68bb      	ldr	r3, [r7, #8]
    5480:	1acb      	subs	r3, r1, r3
    return((ulWrite >= ulRead) ? (ulWrite - ulRead) :
    5482:	4413      	add	r3, r2
}
    5484:	4618      	mov	r0, r3
    5486:	3714      	adds	r7, #20
    5488:	46bd      	mov	sp, r7
    548a:	f85d 7b04 	ldr.w	r7, [sp], #4
    548e:	4770      	bx	lr

00005490 <USBRingBufFree>:
//! \return Returns the number of bytes available in the ring buffer.
//
//*****************************************************************************
unsigned long
USBRingBufFree(tUSBRingBufObject *ptUSBRingBuf)
{
    5490:	b590      	push	{r4, r7, lr}
    5492:	b083      	sub	sp, #12
    5494:	af00      	add	r7, sp, #0
    5496:	6078      	str	r0, [r7, #4]
    ASSERT(ptUSBRingBuf != NULL);

    //
    // Return the number of bytes available in the ring buffer.
    //
    return((ptUSBRingBuf->ulSize - 1) - USBRingBufUsed(ptUSBRingBuf));
    5498:	687b      	ldr	r3, [r7, #4]
    549a:	681c      	ldr	r4, [r3, #0]
    549c:	6878      	ldr	r0, [r7, #4]
    549e:	f7ff ffd9 	bl	5454 <USBRingBufUsed>
    54a2:	4603      	mov	r3, r0
    54a4:	1ae3      	subs	r3, r4, r3
    54a6:	3b01      	subs	r3, #1
}
    54a8:	4618      	mov	r0, r3
    54aa:	370c      	adds	r7, #12
    54ac:	46bd      	mov	sp, r7
    54ae:	bd90      	pop	{r4, r7, pc}

000054b0 <USBRingBufContigUsed>:
//! \return Returns the number of contiguous bytes available.
//
//*****************************************************************************
unsigned long
USBRingBufContigUsed(tUSBRingBufObject *ptUSBRingBuf)
{
    54b0:	b480      	push	{r7}
    54b2:	b085      	sub	sp, #20
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
    ASSERT(ptUSBRingBuf != NULL);

    //
    // Copy the Read/Write indices for calculation.
    //
    ulWrite = ptUSBRingBuf->ulWriteIndex;
    54b8:	687b      	ldr	r3, [r7, #4]
    54ba:	685b      	ldr	r3, [r3, #4]
    54bc:	60fb      	str	r3, [r7, #12]
    ulRead = ptUSBRingBuf->ulReadIndex;
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	689b      	ldr	r3, [r3, #8]
    54c2:	60bb      	str	r3, [r7, #8]

    //
    // Return the number of contiguous bytes available.
    //
    return((ulWrite >= ulRead) ? (ulWrite - ulRead) :
    54c4:	68fa      	ldr	r2, [r7, #12]
    54c6:	68bb      	ldr	r3, [r7, #8]
    54c8:	429a      	cmp	r2, r3
    54ca:	d303      	bcc.n	54d4 <USBRingBufContigUsed+0x24>
    54cc:	68fa      	ldr	r2, [r7, #12]
    54ce:	68bb      	ldr	r3, [r7, #8]
    54d0:	1ad3      	subs	r3, r2, r3
    54d2:	e003      	b.n	54dc <USBRingBufContigUsed+0x2c>
           (ptUSBRingBuf->ulSize - ulRead));
    54d4:	687b      	ldr	r3, [r7, #4]
    54d6:	681a      	ldr	r2, [r3, #0]
    return((ulWrite >= ulRead) ? (ulWrite - ulRead) :
    54d8:	68bb      	ldr	r3, [r7, #8]
    54da:	1ad3      	subs	r3, r2, r3
}
    54dc:	4618      	mov	r0, r3
    54de:	3714      	adds	r7, #20
    54e0:	46bd      	mov	sp, r7
    54e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    54e6:	4770      	bx	lr

000054e8 <USBRingBufContigFree>:
//! buffer.
//
//*****************************************************************************
unsigned long
USBRingBufContigFree(tUSBRingBufObject *ptUSBRingBuf)
{
    54e8:	b480      	push	{r7}
    54ea:	b085      	sub	sp, #20
    54ec:	af00      	add	r7, sp, #0
    54ee:	6078      	str	r0, [r7, #4]
    ASSERT(ptUSBRingBuf != NULL);

    //
    // Copy the Read/Write indices for calculation.
    //
    ulWrite = ptUSBRingBuf->ulWriteIndex;
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	685b      	ldr	r3, [r3, #4]
    54f4:	60fb      	str	r3, [r7, #12]
    ulRead = ptUSBRingBuf->ulReadIndex;
    54f6:	687b      	ldr	r3, [r7, #4]
    54f8:	689b      	ldr	r3, [r3, #8]
    54fa:	60bb      	str	r3, [r7, #8]

    //
    // Return the number of contiguous bytes available.
    //
    if(ulRead > ulWrite)
    54fc:	68ba      	ldr	r2, [r7, #8]
    54fe:	68fb      	ldr	r3, [r7, #12]
    5500:	429a      	cmp	r2, r3
    5502:	d904      	bls.n	550e <USBRingBufContigFree+0x26>
        //
        // The read pointer is above the write pointer so the amount of free
        // space is the difference between the two indices minus 1 to account
        // for the buffer full condition (write index one behind read index).
        //
        return((ulRead - ulWrite) - 1);
    5504:	68ba      	ldr	r2, [r7, #8]
    5506:	68fb      	ldr	r3, [r7, #12]
    5508:	1ad3      	subs	r3, r2, r3
    550a:	3b01      	subs	r3, #1
    550c:	e00a      	b.n	5524 <USBRingBufContigFree+0x3c>
        // space is the size of the buffer minus the write index.  We need to
        // add a special-case adjustment if the read index is 0 since we need
        // to leave 1 byte empty to ensure we can tell the difference between
        // the buffer being full and empty.
        //
        return(ptUSBRingBuf->ulSize - ulWrite - ((ulRead == 0) ? 1 : 0));
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	681a      	ldr	r2, [r3, #0]
    5512:	68fb      	ldr	r3, [r7, #12]
    5514:	1ad2      	subs	r2, r2, r3
    5516:	68bb      	ldr	r3, [r7, #8]
    5518:	2b00      	cmp	r3, #0
    551a:	d101      	bne.n	5520 <USBRingBufContigFree+0x38>
    551c:	2301      	movs	r3, #1
    551e:	e000      	b.n	5522 <USBRingBufContigFree+0x3a>
    5520:	2300      	movs	r3, #0
    5522:	1ad3      	subs	r3, r2, r3
    }
}
    5524:	4618      	mov	r0, r3
    5526:	3714      	adds	r7, #20
    5528:	46bd      	mov	sp, r7
    552a:	f85d 7b04 	ldr.w	r7, [sp], #4
    552e:	4770      	bx	lr

00005530 <USBRingBufAdvanceRead>:
//
//*****************************************************************************
void
USBRingBufAdvanceRead(tUSBRingBufObject *ptUSBRingBuf,
                      unsigned long ulNumBytes)
{
    5530:	b580      	push	{r7, lr}
    5532:	b084      	sub	sp, #16
    5534:	af00      	add	r7, sp, #0
    5536:	6078      	str	r0, [r7, #4]
    5538:	6039      	str	r1, [r7, #0]

    //
    // Make sure that we are not being asked to remove more data than is
    // there to be removed.
    //
    ulCount = USBRingBufUsed(ptUSBRingBuf);
    553a:	6878      	ldr	r0, [r7, #4]
    553c:	f7ff ff8a 	bl	5454 <USBRingBufUsed>
    5540:	60f8      	str	r0, [r7, #12]
    ulCount =  (ulCount < ulNumBytes) ? ulCount : ulNumBytes;
    5542:	68fa      	ldr	r2, [r7, #12]
    5544:	683b      	ldr	r3, [r7, #0]
    5546:	4293      	cmp	r3, r2
    5548:	bf28      	it	cs
    554a:	4613      	movcs	r3, r2
    554c:	60fb      	str	r3, [r7, #12]

    //
    // Advance the buffer read index by the required number of bytes.
    //
    UpdateIndexAtomic(&ptUSBRingBuf->ulReadIndex, ulCount,
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	f103 0008 	add.w	r0, r3, #8
    5554:	687b      	ldr	r3, [r7, #4]
    5556:	681b      	ldr	r3, [r3, #0]
    5558:	461a      	mov	r2, r3
    555a:	68f9      	ldr	r1, [r7, #12]
    555c:	f7ff ff40 	bl	53e0 <UpdateIndexAtomic>
                      ptUSBRingBuf->ulSize);
}
    5560:	bf00      	nop
    5562:	3710      	adds	r7, #16
    5564:	46bd      	mov	sp, r7
    5566:	bd80      	pop	{r7, pc}

00005568 <USBRingBufAdvanceWrite>:
//
//*****************************************************************************
void
USBRingBufAdvanceWrite(tUSBRingBufObject *ptUSBRingBuf,
                       unsigned long ulNumBytes)
{
    5568:	b580      	push	{r7, lr}
    556a:	b084      	sub	sp, #16
    556c:	af00      	add	r7, sp, #0
    556e:	6078      	str	r0, [r7, #4]
    5570:	6039      	str	r1, [r7, #0]
    ASSERT(ulNumBytes <= ptUSBRingBuf->ulSize);

    //
    // Determine how much free space we currently think the buffer has.
    //
    ulCount = USBRingBufFree(ptUSBRingBuf);
    5572:	6878      	ldr	r0, [r7, #4]
    5574:	f7ff ff8c 	bl	5490 <USBRingBufFree>
    5578:	60f8      	str	r0, [r7, #12]
    ASSERT(ulCount >= ulNumBytes);

    //
    // Update the write pointer.
    //
    ptUSBRingBuf->ulWriteIndex += ulNumBytes;
    557a:	687b      	ldr	r3, [r7, #4]
    557c:	685a      	ldr	r2, [r3, #4]
    557e:	683b      	ldr	r3, [r7, #0]
    5580:	441a      	add	r2, r3
    5582:	687b      	ldr	r3, [r7, #4]
    5584:	605a      	str	r2, [r3, #4]

    //
    // Check and correct for wrap.
    //
    if(ptUSBRingBuf->ulWriteIndex >= ptUSBRingBuf->ulSize)
    5586:	687b      	ldr	r3, [r7, #4]
    5588:	685a      	ldr	r2, [r3, #4]
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	681b      	ldr	r3, [r3, #0]
    558e:	429a      	cmp	r2, r3
    5590:	d306      	bcc.n	55a0 <USBRingBufAdvanceWrite+0x38>
    {
        ptUSBRingBuf->ulWriteIndex -= ptUSBRingBuf->ulSize;
    5592:	687b      	ldr	r3, [r7, #4]
    5594:	685a      	ldr	r2, [r3, #4]
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	681b      	ldr	r3, [r3, #0]
    559a:	1ad2      	subs	r2, r2, r3
    559c:	687b      	ldr	r3, [r7, #4]
    559e:	605a      	str	r2, [r3, #4]
    // the same context as the code which is reading from the buffer, writing
    // over the earliest data can cause corrupted data to be read.  The
    // ASSERT above catches this in debug builds but, in release builds, we
    // go ahead and try to fix up the read pointer appropriately.
    //
    if(ulCount < ulNumBytes)
    55a0:	68fa      	ldr	r2, [r7, #12]
    55a2:	683b      	ldr	r3, [r7, #0]
    55a4:	429a      	cmp	r2, r3
    55a6:	d211      	bcs.n	55cc <USBRingBufAdvanceWrite+0x64>
    {
        //
        // Yes - we need to advance the read pointer to ahead of the write
        // pointer to discard some of the oldest data.
        //
        ptUSBRingBuf->ulReadIndex = ptUSBRingBuf->ulWriteIndex + 1;
    55a8:	687b      	ldr	r3, [r7, #4]
    55aa:	685b      	ldr	r3, [r3, #4]
    55ac:	1c5a      	adds	r2, r3, #1
    55ae:	687b      	ldr	r3, [r7, #4]
    55b0:	609a      	str	r2, [r3, #8]

        //
        // Correct for buffer wrap if necessary.
        //
        if(ptUSBRingBuf->ulReadIndex >= ptUSBRingBuf->ulSize)
    55b2:	687b      	ldr	r3, [r7, #4]
    55b4:	689a      	ldr	r2, [r3, #8]
    55b6:	687b      	ldr	r3, [r7, #4]
    55b8:	681b      	ldr	r3, [r3, #0]
    55ba:	429a      	cmp	r2, r3
    55bc:	d306      	bcc.n	55cc <USBRingBufAdvanceWrite+0x64>
        {
            ptUSBRingBuf->ulReadIndex -= ptUSBRingBuf->ulSize;
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	689a      	ldr	r2, [r3, #8]
    55c2:	687b      	ldr	r3, [r7, #4]
    55c4:	681b      	ldr	r3, [r3, #0]
    55c6:	1ad2      	subs	r2, r2, r3
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	609a      	str	r2, [r3, #8]
        }
    }

}
    55cc:	bf00      	nop
    55ce:	3710      	adds	r7, #16
    55d0:	46bd      	mov	sp, r7
    55d2:	bd80      	pop	{r7, pc}

000055d4 <USBRingBufWriteOne>:
//! \return None.
//
//*****************************************************************************
void
USBRingBufWriteOne(tUSBRingBufObject *ptUSBRingBuf, unsigned char ucData)
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b082      	sub	sp, #8
    55d8:	af00      	add	r7, sp, #0
    55da:	6078      	str	r0, [r7, #4]
    55dc:	460b      	mov	r3, r1
    55de:	70fb      	strb	r3, [r7, #3]
    ASSERT(USBRingBufFree(ptUSBRingBuf) != 0);

    //
    // Write the data byte.
    //
    ptUSBRingBuf->pucBuf[ptUSBRingBuf->ulWriteIndex] = ucData;
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	68da      	ldr	r2, [r3, #12]
    55e4:	687b      	ldr	r3, [r7, #4]
    55e6:	685b      	ldr	r3, [r3, #4]
    55e8:	4413      	add	r3, r2
    55ea:	78fa      	ldrb	r2, [r7, #3]
    55ec:	701a      	strb	r2, [r3, #0]

    //
    // Increment the write index.
    //
    UpdateIndexAtomic(&ptUSBRingBuf->ulWriteIndex, 1, ptUSBRingBuf->ulSize);
    55ee:	687b      	ldr	r3, [r7, #4]
    55f0:	1d18      	adds	r0, r3, #4
    55f2:	687b      	ldr	r3, [r7, #4]
    55f4:	681b      	ldr	r3, [r3, #0]
    55f6:	461a      	mov	r2, r3
    55f8:	2101      	movs	r1, #1
    55fa:	f7ff fef1 	bl	53e0 <UpdateIndexAtomic>
}
    55fe:	bf00      	nop
    5600:	3708      	adds	r7, #8
    5602:	46bd      	mov	sp, r7
    5604:	bd80      	pop	{r7, pc}

00005606 <USBRingBufWrite>:
//
//*****************************************************************************
void
USBRingBufWrite(tUSBRingBufObject *ptUSBRingBuf, const unsigned char *pucData,
                unsigned long ulLength)
{
    5606:	b580      	push	{r7, lr}
    5608:	b086      	sub	sp, #24
    560a:	af00      	add	r7, sp, #0
    560c:	60f8      	str	r0, [r7, #12]
    560e:	60b9      	str	r1, [r7, #8]
    5610:	607a      	str	r2, [r7, #4]
    ASSERT(ulLength <= USBRingBufFree(ptUSBRingBuf));

    //
    // Write the data into the ring buffer.
    //
    for(ulTemp = 0; ulTemp < ulLength; ulTemp++)
    5612:	2300      	movs	r3, #0
    5614:	617b      	str	r3, [r7, #20]
    5616:	e00a      	b.n	562e <USBRingBufWrite+0x28>
    {
        USBRingBufWriteOne(ptUSBRingBuf, pucData[ulTemp]);
    5618:	68ba      	ldr	r2, [r7, #8]
    561a:	697b      	ldr	r3, [r7, #20]
    561c:	4413      	add	r3, r2
    561e:	781b      	ldrb	r3, [r3, #0]
    5620:	4619      	mov	r1, r3
    5622:	68f8      	ldr	r0, [r7, #12]
    5624:	f7ff ffd6 	bl	55d4 <USBRingBufWriteOne>
    for(ulTemp = 0; ulTemp < ulLength; ulTemp++)
    5628:	697b      	ldr	r3, [r7, #20]
    562a:	3301      	adds	r3, #1
    562c:	617b      	str	r3, [r7, #20]
    562e:	697a      	ldr	r2, [r7, #20]
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	429a      	cmp	r2, r3
    5634:	d3f0      	bcc.n	5618 <USBRingBufWrite+0x12>
    }
}
    5636:	bf00      	nop
    5638:	3718      	adds	r7, #24
    563a:	46bd      	mov	sp, r7
    563c:	bd80      	pop	{r7, pc}

0000563e <USBRingBufInit>:
//
//*****************************************************************************
void
USBRingBufInit(tUSBRingBufObject *ptUSBRingBuf, unsigned char *pucBuf,
               unsigned long ulSize)
{
    563e:	b480      	push	{r7}
    5640:	b085      	sub	sp, #20
    5642:	af00      	add	r7, sp, #0
    5644:	60f8      	str	r0, [r7, #12]
    5646:	60b9      	str	r1, [r7, #8]
    5648:	607a      	str	r2, [r7, #4]
    ASSERT(ulSize != 0);

    //
    // Initialize the ring buffer object.
    //
    ptUSBRingBuf->ulSize = ulSize;
    564a:	68fb      	ldr	r3, [r7, #12]
    564c:	687a      	ldr	r2, [r7, #4]
    564e:	601a      	str	r2, [r3, #0]
    ptUSBRingBuf->pucBuf = pucBuf;
    5650:	68fb      	ldr	r3, [r7, #12]
    5652:	68ba      	ldr	r2, [r7, #8]
    5654:	60da      	str	r2, [r3, #12]
    ptUSBRingBuf->ulWriteIndex = ptUSBRingBuf->ulReadIndex = 0;
    5656:	2300      	movs	r3, #0
    5658:	68fa      	ldr	r2, [r7, #12]
    565a:	6093      	str	r3, [r2, #8]
    565c:	68fa      	ldr	r2, [r7, #12]
    565e:	6053      	str	r3, [r2, #4]
}
    5660:	bf00      	nop
    5662:	3714      	adds	r7, #20
    5664:	46bd      	mov	sp, r7
    5666:	f85d 7b04 	ldr.w	r7, [sp], #4
    566a:	4770      	bx	lr

0000566c <InternalUSBTickInit>:
// \return None.
//
//*****************************************************************************
void
InternalUSBTickInit(void)
{
    566c:	b480      	push	{r7}
    566e:	b083      	sub	sp, #12
    5670:	af00      	add	r7, sp, #0
    unsigned long ulLoop;

    if(!g_bUSBTimerInitialized)
    5672:	4b10      	ldr	r3, [pc, #64]	; (56b4 <InternalUSBTickInit+0x48>)
    5674:	781b      	ldrb	r3, [r3, #0]
    5676:	2b00      	cmp	r3, #0
    5678:	d115      	bne.n	56a6 <InternalUSBTickInit+0x3a>
    {
        for(ulLoop = 0; ulLoop < MAX_USB_TICK_HANDLERS; ulLoop++)
    567a:	2300      	movs	r3, #0
    567c:	607b      	str	r3, [r7, #4]
    567e:	e00c      	b.n	569a <InternalUSBTickInit+0x2e>
        {
            g_pfTickHandlers[ulLoop] = (tUSBTickHandler)0;
    5680:	4a0d      	ldr	r2, [pc, #52]	; (56b8 <InternalUSBTickInit+0x4c>)
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	2100      	movs	r1, #0
    5686:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_pvTickInstance[ulLoop] = 0;
    568a:	4a0c      	ldr	r2, [pc, #48]	; (56bc <InternalUSBTickInit+0x50>)
    568c:	687b      	ldr	r3, [r7, #4]
    568e:	2100      	movs	r1, #0
    5690:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for(ulLoop = 0; ulLoop < MAX_USB_TICK_HANDLERS; ulLoop++)
    5694:	687b      	ldr	r3, [r7, #4]
    5696:	3301      	adds	r3, #1
    5698:	607b      	str	r3, [r7, #4]
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	2b05      	cmp	r3, #5
    569e:	d9ef      	bls.n	5680 <InternalUSBTickInit+0x14>
        }

        g_bUSBTimerInitialized = true;
    56a0:	4b04      	ldr	r3, [pc, #16]	; (56b4 <InternalUSBTickInit+0x48>)
    56a2:	2201      	movs	r2, #1
    56a4:	701a      	strb	r2, [r3, #0]
    }
}
    56a6:	bf00      	nop
    56a8:	370c      	adds	r7, #12
    56aa:	46bd      	mov	sp, r7
    56ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    56b0:	4770      	bx	lr
    56b2:	bf00      	nop
    56b4:	200013ec 	.word	0x200013ec
    56b8:	200016bc 	.word	0x200016bc
    56bc:	200016d4 	.word	0x200016d4

000056c0 <InternalUSBRegisterTickHandler>:
//
//*****************************************************************************
long
InternalUSBRegisterTickHandler(tUSBTickHandler pfHandler,
                               void *pvInstance)
{
    56c0:	b480      	push	{r7}
    56c2:	b085      	sub	sp, #20
    56c4:	af00      	add	r7, sp, #0
    56c6:	6078      	str	r0, [r7, #4]
    56c8:	6039      	str	r1, [r7, #0]
    long lIdx;

    for(lIdx = 0; lIdx < MAX_USB_TICK_HANDLERS; lIdx++)
    56ca:	2300      	movs	r3, #0
    56cc:	60fb      	str	r3, [r7, #12]
    56ce:	e012      	b.n	56f6 <InternalUSBRegisterTickHandler+0x36>
    {
        if(g_pfTickHandlers[lIdx] == 0)
    56d0:	4a11      	ldr	r2, [pc, #68]	; (5718 <InternalUSBRegisterTickHandler+0x58>)
    56d2:	68fb      	ldr	r3, [r7, #12]
    56d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    56d8:	2b00      	cmp	r3, #0
    56da:	d109      	bne.n	56f0 <InternalUSBRegisterTickHandler+0x30>
        {
            //
            // Save the handler.
            //
            g_pfTickHandlers[lIdx] = pfHandler;
    56dc:	490e      	ldr	r1, [pc, #56]	; (5718 <InternalUSBRegisterTickHandler+0x58>)
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	687a      	ldr	r2, [r7, #4]
    56e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            //
            // Save the instance data.
            //
            g_pvTickInstance[lIdx] = pvInstance;
    56e6:	490d      	ldr	r1, [pc, #52]	; (571c <InternalUSBRegisterTickHandler+0x5c>)
    56e8:	68fb      	ldr	r3, [r7, #12]
    56ea:	683a      	ldr	r2, [r7, #0]
    56ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(lIdx = 0; lIdx < MAX_USB_TICK_HANDLERS; lIdx++)
    56f0:	68fb      	ldr	r3, [r7, #12]
    56f2:	3301      	adds	r3, #1
    56f4:	60fb      	str	r3, [r7, #12]
    56f6:	68fb      	ldr	r3, [r7, #12]
    56f8:	2b05      	cmp	r3, #5
    56fa:	dde9      	ble.n	56d0 <InternalUSBRegisterTickHandler+0x10>
        }
    }

    if(lIdx == MAX_USB_TICK_HANDLERS)
    56fc:	68fb      	ldr	r3, [r7, #12]
    56fe:	2b06      	cmp	r3, #6
    5700:	d102      	bne.n	5708 <InternalUSBRegisterTickHandler+0x48>
    {
        return(-1);
    5702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5706:	e000      	b.n	570a <InternalUSBRegisterTickHandler+0x4a>
    }
    return(0);
    5708:	2300      	movs	r3, #0
}
    570a:	4618      	mov	r0, r3
    570c:	3714      	adds	r7, #20
    570e:	46bd      	mov	sp, r7
    5710:	f85d 7b04 	ldr.w	r7, [sp], #4
    5714:	4770      	bx	lr
    5716:	bf00      	nop
    5718:	200016bc 	.word	0x200016bc
    571c:	200016d4 	.word	0x200016d4

00005720 <InternalUSBStartOfFrameTick>:
//! \return None.
//
//*****************************************************************************
void
InternalUSBStartOfFrameTick(unsigned long ulTicksmS)
{
    5720:	b580      	push	{r7, lr}
    5722:	b084      	sub	sp, #16
    5724:	af00      	add	r7, sp, #0
    5726:	6078      	str	r0, [r7, #4]
    long lIdx;

    //
    // Advance time.
    //
    g_ulCurrentUSBTick += ulTicksmS;
    5728:	4b11      	ldr	r3, [pc, #68]	; (5770 <InternalUSBStartOfFrameTick+0x50>)
    572a:	681a      	ldr	r2, [r3, #0]
    572c:	687b      	ldr	r3, [r7, #4]
    572e:	4413      	add	r3, r2
    5730:	4a0f      	ldr	r2, [pc, #60]	; (5770 <InternalUSBStartOfFrameTick+0x50>)
    5732:	6013      	str	r3, [r2, #0]

    //
    // Call any registered SOF tick handlers.
    //
    for(lIdx = 0; lIdx < MAX_USB_TICK_HANDLERS; lIdx++)
    5734:	2300      	movs	r3, #0
    5736:	60fb      	str	r3, [r7, #12]
    5738:	e013      	b.n	5762 <InternalUSBStartOfFrameTick+0x42>
    {
        if(g_pfTickHandlers[lIdx])
    573a:	4a0e      	ldr	r2, [pc, #56]	; (5774 <InternalUSBStartOfFrameTick+0x54>)
    573c:	68fb      	ldr	r3, [r7, #12]
    573e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5742:	2b00      	cmp	r3, #0
    5744:	d00a      	beq.n	575c <InternalUSBStartOfFrameTick+0x3c>
        {
            g_pfTickHandlers[lIdx](g_pvTickInstance[lIdx], ulTicksmS);
    5746:	4a0b      	ldr	r2, [pc, #44]	; (5774 <InternalUSBStartOfFrameTick+0x54>)
    5748:	68fb      	ldr	r3, [r7, #12]
    574a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    574e:	490a      	ldr	r1, [pc, #40]	; (5778 <InternalUSBStartOfFrameTick+0x58>)
    5750:	68fa      	ldr	r2, [r7, #12]
    5752:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    5756:	6879      	ldr	r1, [r7, #4]
    5758:	4610      	mov	r0, r2
    575a:	4798      	blx	r3
    for(lIdx = 0; lIdx < MAX_USB_TICK_HANDLERS; lIdx++)
    575c:	68fb      	ldr	r3, [r7, #12]
    575e:	3301      	adds	r3, #1
    5760:	60fb      	str	r3, [r7, #12]
    5762:	68fb      	ldr	r3, [r7, #12]
    5764:	2b05      	cmp	r3, #5
    5766:	dde8      	ble.n	573a <InternalUSBStartOfFrameTick+0x1a>
        }
    }
}
    5768:	bf00      	nop
    576a:	3710      	adds	r7, #16
    576c:	46bd      	mov	sp, r7
    576e:	bd80      	pop	{r7, pc}
    5770:	200013f0 	.word	0x200013f0
    5774:	200016bc 	.word	0x200016bc
    5778:	200016d4 	.word	0x200016d4

0000577c <NextConfigDescGet>:
//
//*****************************************************************************
static tDescriptorHeader *
NextConfigDescGet(const tConfigHeader *psConfig, unsigned long *pulSec,
                  tDescriptorHeader *psDesc)
{
    577c:	b480      	push	{r7}
    577e:	b085      	sub	sp, #20
    5780:	af00      	add	r7, sp, #0
    5782:	60f8      	str	r0, [r7, #12]
    5784:	60b9      	str	r1, [r7, #8]
    5786:	607a      	str	r2, [r7, #4]
    //
    // Determine where the next descriptor after the supplied one should be
    // assuming it is within the current section.
    //
    psDesc = NEXT_USB_DESCRIPTOR(psDesc);
    5788:	687b      	ldr	r3, [r7, #4]
    578a:	781b      	ldrb	r3, [r3, #0]
    578c:	461a      	mov	r2, r3
    578e:	687b      	ldr	r3, [r7, #4]
    5790:	4413      	add	r3, r2
    5792:	607b      	str	r3, [r7, #4]

    //
    // Did we run off the end of the section?
    //
    if((unsigned char *)psDesc >= (psConfig->psSections[*pulSec]->pucData +
    5794:	68fb      	ldr	r3, [r7, #12]
    5796:	685a      	ldr	r2, [r3, #4]
    5798:	68bb      	ldr	r3, [r7, #8]
    579a:	681b      	ldr	r3, [r3, #0]
    579c:	009b      	lsls	r3, r3, #2
    579e:	4413      	add	r3, r2
    57a0:	681b      	ldr	r3, [r3, #0]
    57a2:	685b      	ldr	r3, [r3, #4]
                                   psConfig->psSections[*pulSec]->usSize))
    57a4:	68fa      	ldr	r2, [r7, #12]
    57a6:	6851      	ldr	r1, [r2, #4]
    57a8:	68ba      	ldr	r2, [r7, #8]
    57aa:	6812      	ldr	r2, [r2, #0]
    57ac:	0092      	lsls	r2, r2, #2
    57ae:	440a      	add	r2, r1
    57b0:	6812      	ldr	r2, [r2, #0]
    57b2:	8812      	ldrh	r2, [r2, #0]
    if((unsigned char *)psDesc >= (psConfig->psSections[*pulSec]->pucData +
    57b4:	4413      	add	r3, r2
    57b6:	687a      	ldr	r2, [r7, #4]
    57b8:	429a      	cmp	r2, r3
    57ba:	d316      	bcc.n	57ea <NextConfigDescGet+0x6e>
    {
        //
        // Yes - move to the next section.
        //
        (*pulSec)++;
    57bc:	68bb      	ldr	r3, [r7, #8]
    57be:	681b      	ldr	r3, [r3, #0]
    57c0:	1c5a      	adds	r2, r3, #1
    57c2:	68bb      	ldr	r3, [r7, #8]
    57c4:	601a      	str	r2, [r3, #0]

        //
        // Are we still within the config descriptor?
        //
        if(*pulSec < psConfig->ucNumSections)
    57c6:	68bb      	ldr	r3, [r7, #8]
    57c8:	681b      	ldr	r3, [r3, #0]
    57ca:	68fa      	ldr	r2, [r7, #12]
    57cc:	7812      	ldrb	r2, [r2, #0]
    57ce:	4293      	cmp	r3, r2
    57d0:	d209      	bcs.n	57e6 <NextConfigDescGet+0x6a>
        {
            //
            // Yes - the new descriptor is at the start of the new section.
            //
            psDesc =
                (tDescriptorHeader *)psConfig->psSections[*pulSec]->pucData;
    57d2:	68fb      	ldr	r3, [r7, #12]
    57d4:	685a      	ldr	r2, [r3, #4]
    57d6:	68bb      	ldr	r3, [r7, #8]
    57d8:	681b      	ldr	r3, [r3, #0]
    57da:	009b      	lsls	r3, r3, #2
    57dc:	4413      	add	r3, r2
    57de:	681b      	ldr	r3, [r3, #0]
            psDesc =
    57e0:	685b      	ldr	r3, [r3, #4]
    57e2:	607b      	str	r3, [r7, #4]
    57e4:	e001      	b.n	57ea <NextConfigDescGet+0x6e>
        else
        {
            //
            // No - we ran off the end of the descriptor so return NULL.
            //
            psDesc = (tDescriptorHeader *)0;
    57e6:	2300      	movs	r3, #0
    57e8:	607b      	str	r3, [r7, #4]
    }

    //
    // Return the new descriptor pointer.
    //
    return(psDesc);
    57ea:	687b      	ldr	r3, [r7, #4]
}
    57ec:	4618      	mov	r0, r3
    57ee:	3714      	adds	r7, #20
    57f0:	46bd      	mov	sp, r7
    57f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f6:	4770      	bx	lr

000057f8 <ConfigAlternateInterfaceGet>:
static tInterfaceDescriptor *
ConfigAlternateInterfaceGet(const tConfigHeader *psConfig,
                            unsigned char ucInterfaceNumber,
                            unsigned long ulIndex,
                            unsigned long *pulSection)
{
    57f8:	b580      	push	{r7, lr}
    57fa:	b088      	sub	sp, #32
    57fc:	af00      	add	r7, sp, #0
    57fe:	60f8      	str	r0, [r7, #12]
    5800:	607a      	str	r2, [r7, #4]
    5802:	603b      	str	r3, [r7, #0]
    5804:	460b      	mov	r3, r1
    5806:	72fb      	strb	r3, [r7, #11]
    unsigned long ulSec;

    //
    // Set up for our descriptor counting loop.
    //
    psDescCheck = (tDescriptorHeader *)psConfig->psSections[0]->pucData;
    5808:	68fb      	ldr	r3, [r7, #12]
    580a:	685b      	ldr	r3, [r3, #4]
    580c:	681b      	ldr	r3, [r3, #0]
    580e:	685b      	ldr	r3, [r3, #4]
    5810:	61fb      	str	r3, [r7, #28]
    ulCount = 0;
    5812:	2300      	movs	r3, #0
    5814:	61bb      	str	r3, [r7, #24]
    ulSec = 0;
    5816:	2300      	movs	r3, #0
    5818:	617b      	str	r3, [r7, #20]

    //
    // Keep looking through the supplied data until we reach the end.
    //
    while(psDescCheck)
    581a:	e01c      	b.n	5856 <ConfigAlternateInterfaceGet+0x5e>
    {
        //
        // Does this descriptor match the type passed (if a specific type
        // has been specified)?
        //
        if((psDescCheck->bDescriptorType == USB_DTYPE_INTERFACE) &&
    581c:	69fb      	ldr	r3, [r7, #28]
    581e:	785b      	ldrb	r3, [r3, #1]
    5820:	2b04      	cmp	r3, #4
    5822:	d110      	bne.n	5846 <ConfigAlternateInterfaceGet+0x4e>
            (((tInterfaceDescriptor *)psDescCheck)->bInterfaceNumber ==
    5824:	69fb      	ldr	r3, [r7, #28]
    5826:	789b      	ldrb	r3, [r3, #2]
        if((psDescCheck->bDescriptorType == USB_DTYPE_INTERFACE) &&
    5828:	7afa      	ldrb	r2, [r7, #11]
    582a:	429a      	cmp	r2, r3
    582c:	d10b      	bne.n	5846 <ConfigAlternateInterfaceGet+0x4e>
            //
            // This is an interface descriptor for interface ucInterfaceNumber.
            // Determine if this is the n-th one we have found and, if so,
            // return its pointer.
            //
            if(ulCount == ulIndex)
    582e:	69ba      	ldr	r2, [r7, #24]
    5830:	687b      	ldr	r3, [r7, #4]
    5832:	429a      	cmp	r2, r3
    5834:	d104      	bne.n	5840 <ConfigAlternateInterfaceGet+0x48>
            {
                //
                // Found it - return the pointer and section number.
                //
                *pulSection = ulSec;
    5836:	697a      	ldr	r2, [r7, #20]
    5838:	683b      	ldr	r3, [r7, #0]
    583a:	601a      	str	r2, [r3, #0]
                return((tInterfaceDescriptor *)psDescCheck);
    583c:	69fb      	ldr	r3, [r7, #28]
    583e:	e00e      	b.n	585e <ConfigAlternateInterfaceGet+0x66>
            //
            // Increment our count of matching descriptors found and go back
            // to look for another since we have not yet reached the n-th
            // match.
            //
            ulCount++;
    5840:	69bb      	ldr	r3, [r7, #24]
    5842:	3301      	adds	r3, #1
    5844:	61bb      	str	r3, [r7, #24]
        }

        //
        // Move on to the next descriptor.
        //
        psDescCheck = NextConfigDescGet(psConfig, &ulSec, psDescCheck);
    5846:	f107 0314 	add.w	r3, r7, #20
    584a:	69fa      	ldr	r2, [r7, #28]
    584c:	4619      	mov	r1, r3
    584e:	68f8      	ldr	r0, [r7, #12]
    5850:	f7ff ff94 	bl	577c <NextConfigDescGet>
    5854:	61f8      	str	r0, [r7, #28]
    while(psDescCheck)
    5856:	69fb      	ldr	r3, [r7, #28]
    5858:	2b00      	cmp	r3, #0
    585a:	d1df      	bne.n	581c <ConfigAlternateInterfaceGet+0x24>

    //
    // If we drop out the end of the loop, we did not find the requested
    // descriptor so return NULL.
    //
    return((tInterfaceDescriptor *)0);
    585c:	2300      	movs	r3, #0
}
    585e:	4618      	mov	r0, r3
    5860:	3720      	adds	r7, #32
    5862:	46bd      	mov	sp, r7
    5864:	bd80      	pop	{r7, pc}

00005866 <USBDCDConfigDescGetSize>:
//! from concatenating the required sections.
//
//*****************************************************************************
unsigned long
USBDCDConfigDescGetSize(const tConfigHeader *psConfig)
{
    5866:	b480      	push	{r7}
    5868:	b085      	sub	sp, #20
    586a:	af00      	add	r7, sp, #0
    586c:	6078      	str	r0, [r7, #4]
    unsigned long ulLoop;
    unsigned long ulLen;

    ulLen = 0;
    586e:	2300      	movs	r3, #0
    5870:	60bb      	str	r3, [r7, #8]

    //
    // Determine the size of the whole descriptor by adding the sizes of
    // each section which will be concatenated to produce it.
    //
    for(ulLoop = 0; ulLoop < psConfig->ucNumSections; ulLoop++)
    5872:	2300      	movs	r3, #0
    5874:	60fb      	str	r3, [r7, #12]
    5876:	e00d      	b.n	5894 <USBDCDConfigDescGetSize+0x2e>
    {
        ulLen += psConfig->psSections[ulLoop]->usSize;
    5878:	687b      	ldr	r3, [r7, #4]
    587a:	685a      	ldr	r2, [r3, #4]
    587c:	68fb      	ldr	r3, [r7, #12]
    587e:	009b      	lsls	r3, r3, #2
    5880:	4413      	add	r3, r2
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	881b      	ldrh	r3, [r3, #0]
    5886:	461a      	mov	r2, r3
    5888:	68bb      	ldr	r3, [r7, #8]
    588a:	4413      	add	r3, r2
    588c:	60bb      	str	r3, [r7, #8]
    for(ulLoop = 0; ulLoop < psConfig->ucNumSections; ulLoop++)
    588e:	68fb      	ldr	r3, [r7, #12]
    5890:	3301      	adds	r3, #1
    5892:	60fb      	str	r3, [r7, #12]
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	781b      	ldrb	r3, [r3, #0]
    5898:	461a      	mov	r2, r3
    589a:	68fb      	ldr	r3, [r7, #12]
    589c:	4293      	cmp	r3, r2
    589e:	d3eb      	bcc.n	5878 <USBDCDConfigDescGetSize+0x12>
    }

    return(ulLen);
    58a0:	68bb      	ldr	r3, [r7, #8]
}
    58a2:	4618      	mov	r0, r3
    58a4:	3714      	adds	r7, #20
    58a6:	46bd      	mov	sp, r7
    58a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ac:	4770      	bx	lr

000058ae <USBDCDConfigDescGetNum>:
//! data.
//
//*****************************************************************************
unsigned long
USBDCDConfigDescGetNum(const tConfigHeader *psConfig, unsigned long ulType)
{
    58ae:	b580      	push	{r7, lr}
    58b0:	b084      	sub	sp, #16
    58b2:	af00      	add	r7, sp, #0
    58b4:	6078      	str	r0, [r7, #4]
    58b6:	6039      	str	r1, [r7, #0]
    unsigned long ulNumDescs;

    //
    // Initialize our counts.
    //
    ulNumDescs = 0;
    58b8:	2300      	movs	r3, #0
    58ba:	60bb      	str	r3, [r7, #8]
    //
    // Determine the number of descriptors of the given type in each of the
    // sections comprising the config descriptor.  Note that this assumes each
    // section contains only whole descriptors!
    //
    for(ulSection = 0; ulSection < (unsigned long)psConfig->ucNumSections;
    58bc:	2300      	movs	r3, #0
    58be:	60fb      	str	r3, [r7, #12]
    58c0:	e018      	b.n	58f4 <USBDCDConfigDescGetNum+0x46>
        ulSection++)
    {
        ulNumDescs += USBDescGetNum(
                (tDescriptorHeader *)psConfig->psSections[ulSection]->pucData,
    58c2:	687b      	ldr	r3, [r7, #4]
    58c4:	685a      	ldr	r2, [r3, #4]
    58c6:	68fb      	ldr	r3, [r7, #12]
    58c8:	009b      	lsls	r3, r3, #2
    58ca:	4413      	add	r3, r2
    58cc:	681b      	ldr	r3, [r3, #0]
    58ce:	6858      	ldr	r0, [r3, #4]
                psConfig->psSections[ulSection]->usSize,
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	685a      	ldr	r2, [r3, #4]
    58d4:	68fb      	ldr	r3, [r7, #12]
    58d6:	009b      	lsls	r3, r3, #2
    58d8:	4413      	add	r3, r2
    58da:	681b      	ldr	r3, [r3, #0]
    58dc:	881b      	ldrh	r3, [r3, #0]
        ulNumDescs += USBDescGetNum(
    58de:	683a      	ldr	r2, [r7, #0]
    58e0:	4619      	mov	r1, r3
    58e2:	f000 fb81 	bl	5fe8 <USBDescGetNum>
    58e6:	4602      	mov	r2, r0
    58e8:	68bb      	ldr	r3, [r7, #8]
    58ea:	4413      	add	r3, r2
    58ec:	60bb      	str	r3, [r7, #8]
        ulSection++)
    58ee:	68fb      	ldr	r3, [r7, #12]
    58f0:	3301      	adds	r3, #1
    58f2:	60fb      	str	r3, [r7, #12]
    for(ulSection = 0; ulSection < (unsigned long)psConfig->ucNumSections;
    58f4:	687b      	ldr	r3, [r7, #4]
    58f6:	781b      	ldrb	r3, [r3, #0]
    58f8:	461a      	mov	r2, r3
    58fa:	68fb      	ldr	r3, [r7, #12]
    58fc:	4293      	cmp	r3, r2
    58fe:	d3e0      	bcc.n	58c2 <USBDCDConfigDescGetNum+0x14>
                ulType);
    }

    return(ulNumDescs);
    5900:	68bb      	ldr	r3, [r7, #8]
}
    5902:	4618      	mov	r0, r3
    5904:	3710      	adds	r7, #16
    5906:	46bd      	mov	sp, r7
    5908:	bd80      	pop	{r7, pc}

0000590a <USBDCDConfigDescGet>:
//
//*****************************************************************************
tDescriptorHeader *
USBDCDConfigDescGet(const tConfigHeader *psConfig, unsigned long ulType,
                    unsigned long ulIndex, unsigned long *pulSection)
{
    590a:	b580      	push	{r7, lr}
    590c:	b088      	sub	sp, #32
    590e:	af00      	add	r7, sp, #0
    5910:	60f8      	str	r0, [r7, #12]
    5912:	60b9      	str	r1, [r7, #8]
    5914:	607a      	str	r2, [r7, #4]
    5916:	603b      	str	r3, [r7, #0]
    unsigned long ulNumDescs;

    //
    // Initialize our counts.
    //
    ulTotalDescs = 0;
    5918:	2300      	movs	r3, #0
    591a:	61bb      	str	r3, [r7, #24]
    //
    // Determine the number of descriptors of the given type in each of the
    // sections comprising the config descriptor.  This allows us to determine
    // which section contains the descriptor we are being asked for.
    //
    for(ulSection = 0; ulSection < (unsigned long)psConfig->ucNumSections;
    591c:	2300      	movs	r3, #0
    591e:	61fb      	str	r3, [r7, #28]
    5920:	e039      	b.n	5996 <USBDCDConfigDescGet+0x8c>
    {
        //
        // How many descriptors of the requested type exist in this section?
        //
        ulNumDescs = USBDescGetNum(
                (tDescriptorHeader *)psConfig->psSections[ulSection]->pucData,
    5922:	68fb      	ldr	r3, [r7, #12]
    5924:	685a      	ldr	r2, [r3, #4]
    5926:	69fb      	ldr	r3, [r7, #28]
    5928:	009b      	lsls	r3, r3, #2
    592a:	4413      	add	r3, r2
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	6858      	ldr	r0, [r3, #4]
                psConfig->psSections[ulSection]->usSize,
    5930:	68fb      	ldr	r3, [r7, #12]
    5932:	685a      	ldr	r2, [r3, #4]
    5934:	69fb      	ldr	r3, [r7, #28]
    5936:	009b      	lsls	r3, r3, #2
    5938:	4413      	add	r3, r2
    593a:	681b      	ldr	r3, [r3, #0]
    593c:	881b      	ldrh	r3, [r3, #0]
        ulNumDescs = USBDescGetNum(
    593e:	68ba      	ldr	r2, [r7, #8]
    5940:	4619      	mov	r1, r3
    5942:	f000 fb51 	bl	5fe8 <USBDescGetNum>
    5946:	6178      	str	r0, [r7, #20]

        //
        // Does this section contain the descriptor whose index we are looking
        // for?
        //
        if((ulTotalDescs + ulNumDescs) > ulIndex)
    5948:	69ba      	ldr	r2, [r7, #24]
    594a:	697b      	ldr	r3, [r7, #20]
    594c:	4413      	add	r3, r2
    594e:	687a      	ldr	r2, [r7, #4]
    5950:	429a      	cmp	r2, r3
    5952:	d219      	bcs.n	5988 <USBDCDConfigDescGet+0x7e>
        {
            //
            // We know the requested descriptor exists in the current
            // block so write the section number to the caller's storage.
            //
            *pulSection = ulSection;
    5954:	683b      	ldr	r3, [r7, #0]
    5956:	69fa      	ldr	r2, [r7, #28]
    5958:	601a      	str	r2, [r3, #0]

            //
            // Now find the actual descriptor requested and return its pointer.
            //
            return(USBDescGet(
                 (tDescriptorHeader *)psConfig->psSections[ulSection]->pucData,
    595a:	68fb      	ldr	r3, [r7, #12]
    595c:	685a      	ldr	r2, [r3, #4]
    595e:	69fb      	ldr	r3, [r7, #28]
    5960:	009b      	lsls	r3, r3, #2
    5962:	4413      	add	r3, r2
    5964:	681b      	ldr	r3, [r3, #0]
    5966:	6858      	ldr	r0, [r3, #4]
                 psConfig->psSections[ulSection]->usSize,
    5968:	68fb      	ldr	r3, [r7, #12]
    596a:	685a      	ldr	r2, [r3, #4]
    596c:	69fb      	ldr	r3, [r7, #28]
    596e:	009b      	lsls	r3, r3, #2
    5970:	4413      	add	r3, r2
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	881b      	ldrh	r3, [r3, #0]
            return(USBDescGet(
    5976:	4619      	mov	r1, r3
    5978:	687a      	ldr	r2, [r7, #4]
    597a:	69bb      	ldr	r3, [r7, #24]
    597c:	1ad3      	subs	r3, r2, r3
    597e:	68ba      	ldr	r2, [r7, #8]
    5980:	f000 fb63 	bl	604a <USBDescGet>
    5984:	4603      	mov	r3, r0
    5986:	e00d      	b.n	59a4 <USBDCDConfigDescGet+0x9a>
        //
        // We have not found the required descriptor yet.  Update our running
        // count of the number of type matches found so far then move on to
        // the next section.
        //
        ulTotalDescs += ulNumDescs;
    5988:	69ba      	ldr	r2, [r7, #24]
    598a:	697b      	ldr	r3, [r7, #20]
    598c:	4413      	add	r3, r2
    598e:	61bb      	str	r3, [r7, #24]
        ulSection++)
    5990:	69fb      	ldr	r3, [r7, #28]
    5992:	3301      	adds	r3, #1
    5994:	61fb      	str	r3, [r7, #28]
    for(ulSection = 0; ulSection < (unsigned long)psConfig->ucNumSections;
    5996:	68fb      	ldr	r3, [r7, #12]
    5998:	781b      	ldrb	r3, [r3, #0]
    599a:	461a      	mov	r2, r3
    599c:	69fb      	ldr	r3, [r7, #28]
    599e:	4293      	cmp	r3, r2
    59a0:	d3bf      	bcc.n	5922 <USBDCDConfigDescGet+0x18>

    //
    // If we drop out of the loop, we can't find the requested descriptor
    // so return NULL.
    //
    return((tDescriptorHeader *)0);
    59a2:	2300      	movs	r3, #0
}
    59a4:	4618      	mov	r0, r3
    59a6:	3720      	adds	r7, #32
    59a8:	46bd      	mov	sp, r7
    59aa:	bd80      	pop	{r7, pc}

000059ac <USBDCDConfigGetInterface>:
//
//*****************************************************************************
tInterfaceDescriptor *
USBDCDConfigGetInterface(const tConfigHeader *psConfig, unsigned long ulIndex,
                         unsigned long ulAlt, unsigned long *pulSection)
{
    59ac:	b580      	push	{r7, lr}
    59ae:	b084      	sub	sp, #16
    59b0:	af00      	add	r7, sp, #0
    59b2:	60f8      	str	r0, [r7, #12]
    59b4:	60b9      	str	r1, [r7, #8]
    59b6:	607a      	str	r2, [r7, #4]
    59b8:	603b      	str	r3, [r7, #0]
    //
    // If we are being told to ignore the alternate configuration, this boils
    // down to a very simple query.
    //
    if(ulAlt == USB_DESC_ANY)
    59ba:	687b      	ldr	r3, [r7, #4]
    59bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    59c0:	d107      	bne.n	59d2 <USBDCDConfigGetInterface+0x26>
    {
        //
        // Return the ulIndex-th interface descriptor we find in the
        // configuration descriptor.
        //
        return((tInterfaceDescriptor *)USBDCDConfigDescGet(psConfig,
    59c2:	683b      	ldr	r3, [r7, #0]
    59c4:	68ba      	ldr	r2, [r7, #8]
    59c6:	2104      	movs	r1, #4
    59c8:	68f8      	ldr	r0, [r7, #12]
    59ca:	f7ff ff9e 	bl	590a <USBDCDConfigDescGet>
    59ce:	4603      	mov	r3, r0
    59d0:	e007      	b.n	59e2 <USBDCDConfigGetInterface+0x36>
        // Given that interface numbers are zero based indices, we can
        // pass the supplied ulIndex parameter directly as the interface
        // number to USBDescGetAlternateInterface to retrieve the requested
        // interface descriptor pointer.
        //
        return(ConfigAlternateInterfaceGet(psConfig, ulIndex, ulAlt,
    59d2:	68bb      	ldr	r3, [r7, #8]
    59d4:	b2d9      	uxtb	r1, r3
    59d6:	683b      	ldr	r3, [r7, #0]
    59d8:	687a      	ldr	r2, [r7, #4]
    59da:	68f8      	ldr	r0, [r7, #12]
    59dc:	f7ff ff0c 	bl	57f8 <ConfigAlternateInterfaceGet>
    59e0:	4603      	mov	r3, r0
                                           pulSection));
    }
}
    59e2:	4618      	mov	r0, r3
    59e4:	3710      	adds	r7, #16
    59e6:	46bd      	mov	sp, r7
    59e8:	bd80      	pop	{r7, pc}

000059ea <USBDCDConfigGetInterfaceEndpoint>:
//*****************************************************************************
tEndpointDescriptor *
USBDCDConfigGetInterfaceEndpoint(const tConfigHeader *psConfig,
                                 unsigned long ulInterfaceNumber,
                                 unsigned long ulAltCfg, unsigned long ulIndex)
{
    59ea:	b580      	push	{r7, lr}
    59ec:	b088      	sub	sp, #32
    59ee:	af00      	add	r7, sp, #0
    59f0:	60f8      	str	r0, [r7, #12]
    59f2:	60b9      	str	r1, [r7, #8]
    59f4:	607a      	str	r2, [r7, #4]
    59f6:	603b      	str	r3, [r7, #0]
    unsigned long ulCount;

    //
    // Find the requested interface descriptor.
    //
    psInterface = USBDCDConfigGetInterface(psConfig, ulInterfaceNumber,
    59f8:	f107 0310 	add.w	r3, r7, #16
    59fc:	687a      	ldr	r2, [r7, #4]
    59fe:	68b9      	ldr	r1, [r7, #8]
    5a00:	68f8      	ldr	r0, [r7, #12]
    5a02:	f7ff ffd3 	bl	59ac <USBDCDConfigGetInterface>
    5a06:	6178      	str	r0, [r7, #20]
                                           ulAltCfg, &ulSection);

    //
    // Did we find the requested interface?
    //
    if(psInterface)
    5a08:	697b      	ldr	r3, [r7, #20]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	d024      	beq.n	5a58 <USBDCDConfigGetInterfaceEndpoint+0x6e>
    {
        //
        // Is the index passed valid?
        //
        if(ulIndex >= psInterface->bNumEndpoints)
    5a0e:	697b      	ldr	r3, [r7, #20]
    5a10:	791b      	ldrb	r3, [r3, #4]
    5a12:	461a      	mov	r2, r3
    5a14:	683b      	ldr	r3, [r7, #0]
    5a16:	4293      	cmp	r3, r2
    5a18:	d301      	bcc.n	5a1e <USBDCDConfigGetInterfaceEndpoint+0x34>
        {
            //
            // It's out of bounds so return a NULL.
            //
            return((tEndpointDescriptor *)0);
    5a1a:	2300      	movs	r3, #0
    5a1c:	e01d      	b.n	5a5a <USBDCDConfigGetInterfaceEndpoint+0x70>
            //
            // Endpoint index is valid so find the descriptor.  We start from
            // the interface descriptor and look for following endpoint
            // descriptors.
            //
            ulCount = 0;
    5a1e:	2300      	movs	r3, #0
    5a20:	61bb      	str	r3, [r7, #24]
            psEndpoint = (tDescriptorHeader *)psInterface;
    5a22:	697b      	ldr	r3, [r7, #20]
    5a24:	61fb      	str	r3, [r7, #28]

            while(psEndpoint)
    5a26:	e014      	b.n	5a52 <USBDCDConfigGetInterfaceEndpoint+0x68>
            {
                if(psEndpoint->bDescriptorType == USB_DTYPE_ENDPOINT)
    5a28:	69fb      	ldr	r3, [r7, #28]
    5a2a:	785b      	ldrb	r3, [r3, #1]
    5a2c:	2b05      	cmp	r3, #5
    5a2e:	d108      	bne.n	5a42 <USBDCDConfigGetInterfaceEndpoint+0x58>
                {
                    //
                    // We found an endpoint descriptor.  Have we reached the
                    // one we want?
                    //
                    if(ulCount == ulIndex)
    5a30:	69ba      	ldr	r2, [r7, #24]
    5a32:	683b      	ldr	r3, [r7, #0]
    5a34:	429a      	cmp	r2, r3
    5a36:	d101      	bne.n	5a3c <USBDCDConfigGetInterfaceEndpoint+0x52>
                    {
                        //
                        // Yes - return the descriptor pointer to the caller.
                        //
                        return((tEndpointDescriptor *)psEndpoint);
    5a38:	69fb      	ldr	r3, [r7, #28]
    5a3a:	e00e      	b.n	5a5a <USBDCDConfigGetInterfaceEndpoint+0x70>
                    }

                    //
                    // Move on to look for the next endpoint.
                    //
                    ulCount++;
    5a3c:	69bb      	ldr	r3, [r7, #24]
    5a3e:	3301      	adds	r3, #1
    5a40:	61bb      	str	r3, [r7, #24]
                }

                //
                // Move to the next descriptor.
                //
                psEndpoint = NextConfigDescGet(psConfig, &ulSection,
    5a42:	f107 0310 	add.w	r3, r7, #16
    5a46:	69fa      	ldr	r2, [r7, #28]
    5a48:	4619      	mov	r1, r3
    5a4a:	68f8      	ldr	r0, [r7, #12]
    5a4c:	f7ff fe96 	bl	577c <NextConfigDescGet>
    5a50:	61f8      	str	r0, [r7, #28]
            while(psEndpoint)
    5a52:	69fb      	ldr	r3, [r7, #28]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d1e7      	bne.n	5a28 <USBDCDConfigGetInterfaceEndpoint+0x3e>

    //
    // We couldn't find the requested interface or we got to the end of the
    // descriptor without finding the requested endpoint.
    //
    return((tEndpointDescriptor *)0);
    5a58:	2300      	movs	r3, #0

}
    5a5a:	4618      	mov	r0, r3
    5a5c:	3720      	adds	r7, #32
    5a5e:	46bd      	mov	sp, r7
    5a60:	bd80      	pop	{r7, pc}

00005a62 <GetEndpointFIFOSize>:
//
//*****************************************************************************
static unsigned long
GetEndpointFIFOSize(unsigned long ulMaxPktSize, const tFIFOEntry *psFIFOParams,
                    unsigned long *pupBytesUsed)
{
    5a62:	b480      	push	{r7}
    5a64:	b089      	sub	sp, #36	; 0x24
    5a66:	af00      	add	r7, sp, #0
    5a68:	60f8      	str	r0, [r7, #12]
    5a6a:	60b9      	str	r1, [r7, #8]
    5a6c:	607a      	str	r2, [r7, #4]

    //
    // What is the basic size required for a single buffered FIFO entry
    // containing the required number of packets?
    //
    ulBytes = ulMaxPktSize;
    5a6e:	68fb      	ldr	r3, [r7, #12]
    5a70:	61bb      	str	r3, [r7, #24]
    //
    // Now we need to find the nearest supported size that accommodates the
    // requested size.  Step through each of the supported sizes until we
    // find one that will do.
    //
    for(ulLoop = USB_FIFO_SZ_8; ulLoop <= USB_FIFO_SZ_4096; ulLoop++)
    5a72:	2300      	movs	r3, #0
    5a74:	61fb      	str	r3, [r7, #28]
    5a76:	e027      	b.n	5ac8 <GetEndpointFIFOSize+0x66>
    {
        //
        // How many bytes does this FIFO value represent?
        //
        ulFIFOSize = USB_FIFO_SZ_TO_BYTES(ulLoop);
    5a78:	69fb      	ldr	r3, [r7, #28]
    5a7a:	f023 0310 	bic.w	r3, r3, #16
    5a7e:	2208      	movs	r2, #8
    5a80:	409a      	lsls	r2, r3
    5a82:	69fb      	ldr	r3, [r7, #28]
    5a84:	f003 0310 	and.w	r3, r3, #16
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d001      	beq.n	5a90 <GetEndpointFIFOSize+0x2e>
    5a8c:	2302      	movs	r3, #2
    5a8e:	e000      	b.n	5a92 <GetEndpointFIFOSize+0x30>
    5a90:	2301      	movs	r3, #1
    5a92:	fb02 f303 	mul.w	r3, r2, r3
    5a96:	617b      	str	r3, [r7, #20]

        //
        // Is this large enough to satisfy the request?
        //
        if(ulFIFOSize >= ulBytes)
    5a98:	697a      	ldr	r2, [r7, #20]
    5a9a:	69bb      	ldr	r3, [r7, #24]
    5a9c:	429a      	cmp	r2, r3
    5a9e:	d310      	bcc.n	5ac2 <GetEndpointFIFOSize+0x60>
        {
            //
            // Yes - are we being asked to double-buffer the FIFO for this
            // endpoint?
            //
            if(psFIFOParams->bDoubleBuffer)
    5aa0:	68bb      	ldr	r3, [r7, #8]
    5aa2:	781b      	ldrb	r3, [r3, #0]
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	d007      	beq.n	5ab8 <GetEndpointFIFOSize+0x56>
            {
                //
                // Yes - FIFO requirement is double in this case.
                //
                *pupBytesUsed = ulFIFOSize * 2;
    5aa8:	697b      	ldr	r3, [r7, #20]
    5aaa:	005a      	lsls	r2, r3, #1
    5aac:	687b      	ldr	r3, [r7, #4]
    5aae:	601a      	str	r2, [r3, #0]
                return(ulLoop | USB_FIFO_SIZE_DB_FLAG);
    5ab0:	69fb      	ldr	r3, [r7, #28]
    5ab2:	f043 0310 	orr.w	r3, r3, #16
    5ab6:	e00e      	b.n	5ad6 <GetEndpointFIFOSize+0x74>
            {
                //
                // No double buffering so just return the size and associated
                // flag.
                //
                *pupBytesUsed = ulFIFOSize;
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	697a      	ldr	r2, [r7, #20]
    5abc:	601a      	str	r2, [r3, #0]
                return(ulLoop);
    5abe:	69fb      	ldr	r3, [r7, #28]
    5ac0:	e009      	b.n	5ad6 <GetEndpointFIFOSize+0x74>
    for(ulLoop = USB_FIFO_SZ_8; ulLoop <= USB_FIFO_SZ_4096; ulLoop++)
    5ac2:	69fb      	ldr	r3, [r7, #28]
    5ac4:	3301      	adds	r3, #1
    5ac6:	61fb      	str	r3, [r7, #28]
    5ac8:	69fb      	ldr	r3, [r7, #28]
    5aca:	2b09      	cmp	r3, #9
    5acc:	d9d4      	bls.n	5a78 <GetEndpointFIFOSize+0x16>

    //
    // If we drop out, we can't support the FIFO size requested.  Signal a
    // problem by returning 0 in the pBytesUsed
    //
    *pupBytesUsed = 0;
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	2200      	movs	r2, #0
    5ad2:	601a      	str	r2, [r3, #0]

    return(USB_FIFO_SZ_8);
    5ad4:	2300      	movs	r3, #0
}
    5ad6:	4618      	mov	r0, r3
    5ad8:	3724      	adds	r7, #36	; 0x24
    5ada:	46bd      	mov	sp, r7
    5adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ae0:	4770      	bx	lr
	...

00005ae4 <GetEPDescriptorType>:
//
//*****************************************************************************
static void
GetEPDescriptorType(tEndpointDescriptor *psEndpoint, unsigned long *pulEPIndex,
                    unsigned long *pulMaxPktSize, unsigned long *pulFlags)
{
    5ae4:	b480      	push	{r7}
    5ae6:	b085      	sub	sp, #20
    5ae8:	af00      	add	r7, sp, #0
    5aea:	60f8      	str	r0, [r7, #12]
    5aec:	60b9      	str	r1, [r7, #8]
    5aee:	607a      	str	r2, [r7, #4]
    5af0:	603b      	str	r3, [r7, #0]
    //
    // Get the endpoint index.
    //
    *pulEPIndex = psEndpoint->bEndpointAddress & USB_EP_DESC_NUM_M;
    5af2:	68fb      	ldr	r3, [r7, #12]
    5af4:	789b      	ldrb	r3, [r3, #2]
    5af6:	f003 020f 	and.w	r2, r3, #15
    5afa:	68bb      	ldr	r3, [r7, #8]
    5afc:	601a      	str	r2, [r3, #0]

    //
    // Extract the maximum packet size.
    //
    *pulMaxPktSize = psEndpoint->wMaxPacketSize & USB_EP_MAX_PACKET_COUNT_M;
    5afe:	68fb      	ldr	r3, [r7, #12]
    5b00:	889b      	ldrh	r3, [r3, #4]
    5b02:	b29b      	uxth	r3, r3
    5b04:	f3c3 020a 	ubfx	r2, r3, #0, #11
    5b08:	687b      	ldr	r3, [r7, #4]
    5b0a:	601a      	str	r2, [r3, #0]

    //
    // Is this an IN or an OUT endpoint?
    //
    *pulFlags = (psEndpoint->bEndpointAddress & USB_EP_DESC_IN) ?
    5b0c:	68fb      	ldr	r3, [r7, #12]
    5b0e:	789b      	ldrb	r3, [r3, #2]
    5b10:	b25b      	sxtb	r3, r3
                 USB_EP_DEV_IN : USB_EP_DEV_OUT;
    5b12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    *pulFlags = (psEndpoint->bEndpointAddress & USB_EP_DESC_IN) ?
    5b16:	683b      	ldr	r3, [r7, #0]
    5b18:	601a      	str	r2, [r3, #0]

    //
    // Set the endpoint mode.
    //
    switch(psEndpoint->bmAttributes & USB_EP_ATTR_TYPE_M)
    5b1a:	68fb      	ldr	r3, [r7, #12]
    5b1c:	78db      	ldrb	r3, [r3, #3]
    5b1e:	f003 0303 	and.w	r3, r3, #3
    5b22:	2b03      	cmp	r3, #3
    5b24:	d824      	bhi.n	5b70 <GetEPDescriptorType+0x8c>
    5b26:	a201      	add	r2, pc, #4	; (adr r2, 5b2c <GetEPDescriptorType+0x48>)
    5b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5b2c:	00005b3d 	.word	0x00005b3d
    5b30:	00005b67 	.word	0x00005b67
    5b34:	00005b4b 	.word	0x00005b4b
    5b38:	00005b59 	.word	0x00005b59
    {
        case USB_EP_ATTR_CONTROL:
            *pulFlags |= USB_EP_MODE_CTRL;
    5b3c:	683b      	ldr	r3, [r7, #0]
    5b3e:	681b      	ldr	r3, [r3, #0]
    5b40:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    5b44:	683b      	ldr	r3, [r7, #0]
    5b46:	601a      	str	r2, [r3, #0]
            break;
    5b48:	e012      	b.n	5b70 <GetEPDescriptorType+0x8c>

        case USB_EP_ATTR_BULK:
            *pulFlags |= USB_EP_MODE_BULK;
    5b4a:	683b      	ldr	r3, [r7, #0]
    5b4c:	681b      	ldr	r3, [r3, #0]
    5b4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5b52:	683b      	ldr	r3, [r7, #0]
    5b54:	601a      	str	r2, [r3, #0]
            break;
    5b56:	e00b      	b.n	5b70 <GetEPDescriptorType+0x8c>

        case USB_EP_ATTR_INT:
            *pulFlags |= USB_EP_MODE_INT;
    5b58:	683b      	ldr	r3, [r7, #0]
    5b5a:	681b      	ldr	r3, [r3, #0]
    5b5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    5b60:	683b      	ldr	r3, [r7, #0]
    5b62:	601a      	str	r2, [r3, #0]
            break;
    5b64:	e004      	b.n	5b70 <GetEPDescriptorType+0x8c>

        case USB_EP_ATTR_ISOC:
            *pulFlags |= USB_EP_MODE_ISOC;
    5b66:	683b      	ldr	r3, [r7, #0]
    5b68:	681a      	ldr	r2, [r3, #0]
    5b6a:	683b      	ldr	r3, [r7, #0]
    5b6c:	601a      	str	r2, [r3, #0]
            break;
    5b6e:	bf00      	nop
    }
}
    5b70:	bf00      	nop
    5b72:	3714      	adds	r7, #20
    5b74:	46bd      	mov	sp, r7
    5b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b7a:	4770      	bx	lr

00005b7c <USBDeviceConfig>:
//! \return Returns \b true on success or \b false on failure.
//
//*****************************************************************************
tBoolean
USBDeviceConfig(tDeviceInstance *psDevInst, const tConfigHeader *psConfig)
{
    5b7c:	b580      	push	{r7, lr}
    5b7e:	b0b0      	sub	sp, #192	; 0xc0
    5b80:	af02      	add	r7, sp, #8
    5b82:	6078      	str	r0, [r7, #4]
    5b84:	6039      	str	r1, [r7, #0]
    //
    // Catch bad pointers in a debug build.
    //
    ASSERT(psConfig);

    psFIFOConfig = psDevInst->psInfo->psFIFOConfig;
    5b86:	687b      	ldr	r3, [r7, #4]
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    //
    // Clear out our endpoint info.
    //
    for(ulLoop = 0; ulLoop < (NUM_USB_EP - 1); ulLoop++)
    5b90:	2300      	movs	r3, #0
    5b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    5b96:	e016      	b.n	5bc6 <USBDeviceConfig+0x4a>
    {
        psEPInfo[ulLoop].ulSize[EP_INFO_IN] = 0;
    5b98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5b9c:	00db      	lsls	r3, r3, #3
    5b9e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
    5ba2:	4413      	add	r3, r2
    5ba4:	2200      	movs	r2, #0
    5ba6:	f843 2cac 	str.w	r2, [r3, #-172]
        psEPInfo[ulLoop].ulSize[EP_INFO_OUT] = 0;
    5baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5bae:	00db      	lsls	r3, r3, #3
    5bb0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
    5bb4:	4413      	add	r3, r2
    5bb6:	2200      	movs	r2, #0
    5bb8:	f843 2ca8 	str.w	r2, [r3, #-168]
    for(ulLoop = 0; ulLoop < (NUM_USB_EP - 1); ulLoop++)
    5bbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5bc0:	3301      	adds	r3, #1
    5bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    5bc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5bca:	2b0e      	cmp	r3, #14
    5bcc:	d9e4      	bls.n	5b98 <USBDeviceConfig+0x1c>
    }

    //
    // How many (total) endpoints does this configuration describe?
    //
    ulNumEndpoints = USBDCDConfigDescGetNum(psConfig,
    5bce:	2105      	movs	r1, #5
    5bd0:	6838      	ldr	r0, [r7, #0]
    5bd2:	f7ff fe6c 	bl	58ae <USBDCDConfigDescGetNum>
    5bd6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                                            USB_DTYPE_ENDPOINT);

    //
    // How many interfaces are included?
    //
    ulNumInterfaces = USBDCDConfigDescGetNum(psConfig,
    5bda:	2104      	movs	r1, #4
    5bdc:	6838      	ldr	r0, [r7, #0]
    5bde:	f7ff fe66 	bl	58ae <USBDCDConfigDescGetNum>
    5be2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

    //
    // Look at each endpoint and determine the largest max packet size for
    // each endpoint.  This will determine how we partition the USB FIFO.
    //
    for(ulLoop = 0; ulLoop < ulNumEndpoints; ulLoop++)
    5be6:	2300      	movs	r3, #0
    5be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    5bec:	e04f      	b.n	5c8e <USBDeviceConfig+0x112>
    {
        //
        // Get a pointer to the endpoint descriptor.
        //
        psEndpoint = (tEndpointDescriptor *)USBDCDConfigDescGet(
    5bee:	f107 0384 	add.w	r3, r7, #132	; 0x84
    5bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    5bf6:	2105      	movs	r1, #5
    5bf8:	6838      	ldr	r0, [r7, #0]
    5bfa:	f7ff fe86 	bl	590a <USBDCDConfigDescGet>
    5bfe:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        //
        // Extract the endpoint number and whether it is an IN or OUT
        // endpoint.
        //
        ulEpIndex = (unsigned long)
                        psEndpoint->bEndpointAddress & USB_EP_DESC_NUM_M;
    5c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    5c06:	789b      	ldrb	r3, [r3, #2]
    5c08:	f003 030f 	and.w	r3, r3, #15
        ulEpIndex = (unsigned long)
    5c0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        ulEpType =  (psEndpoint->bEndpointAddress & USB_EP_DESC_IN) ?
    5c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    5c14:	789b      	ldrb	r3, [r3, #2]
    5c16:	b25b      	sxtb	r3, r3
                     EP_INFO_IN : EP_INFO_OUT;
    5c18:	43db      	mvns	r3, r3
    5c1a:	b2db      	uxtb	r3, r3
    5c1c:	09db      	lsrs	r3, r3, #7
    5c1e:	b2db      	uxtb	r3, r3
        ulEpType =  (psEndpoint->bEndpointAddress & USB_EP_DESC_IN) ?
    5c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        //
        // Make sure the endpoint number is valid for our controller.  If not,
        // return false to indicate an error.  Note that 0 is invalid since
        // you shouldn't reference endpoint 0 in the config descriptor.
        //
        if((ulEpIndex >= NUM_USB_EP) || (ulEpIndex == 0))
    5c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    5c28:	2b0f      	cmp	r3, #15
    5c2a:	d803      	bhi.n	5c34 <USBDeviceConfig+0xb8>
    5c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    5c30:	2b00      	cmp	r3, #0
    5c32:	d101      	bne.n	5c38 <USBDeviceConfig+0xbc>
        {
            return(false);
    5c34:	2300      	movs	r3, #0
    5c36:	e148      	b.n	5eca <USBDeviceConfig+0x34e>

        //
        // Does this endpoint have a max packet size requirement larger than
        // any previous use we have seen?
        //
        if(psEndpoint->wMaxPacketSize >
    5c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    5c3c:	889b      	ldrh	r3, [r3, #4]
    5c3e:	b29b      	uxth	r3, r3
    5c40:	4619      	mov	r1, r3
           psEPInfo[ulEpIndex - 1].ulSize[ulEpType])
    5c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    5c46:	3b01      	subs	r3, #1
    5c48:	005a      	lsls	r2, r3, #1
    5c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    5c4e:	4413      	add	r3, r2
    5c50:	009b      	lsls	r3, r3, #2
    5c52:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
    5c56:	4413      	add	r3, r2
    5c58:	f853 3cac 	ldr.w	r3, [r3, #-172]
        if(psEndpoint->wMaxPacketSize >
    5c5c:	4299      	cmp	r1, r3
    5c5e:	d911      	bls.n	5c84 <USBDeviceConfig+0x108>
        {
            //
            // Yes - remember the new maximum packet size.
            //
            psEPInfo[ulEpIndex - 1].ulSize[ulEpType] =
                psEndpoint->wMaxPacketSize;
    5c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    5c64:	889b      	ldrh	r3, [r3, #4]
    5c66:	b29a      	uxth	r2, r3
            psEPInfo[ulEpIndex - 1].ulSize[ulEpType] =
    5c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    5c6c:	3b01      	subs	r3, #1
                psEndpoint->wMaxPacketSize;
    5c6e:	4611      	mov	r1, r2
            psEPInfo[ulEpIndex - 1].ulSize[ulEpType] =
    5c70:	005a      	lsls	r2, r3, #1
    5c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    5c76:	4413      	add	r3, r2
    5c78:	009b      	lsls	r3, r3, #2
    5c7a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
    5c7e:	4413      	add	r3, r2
    5c80:	f843 1cac 	str.w	r1, [r3, #-172]
    for(ulLoop = 0; ulLoop < ulNumEndpoints; ulLoop++)
    5c84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5c88:	3301      	adds	r3, #1
    5c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    5c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    5c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    5c96:	429a      	cmp	r2, r3
    5c98:	d3a9      	bcc.n	5bee <USBDeviceConfig+0x72>
    // At this point, we have determined the maximum packet size required
    // for each endpoint by any possible alternate setting of any interface
    // in this configuration.  Now determine the endpoint settings required
    // for the interface setting we are actually going to use.
    //
    for(ulLoop = 0; ulLoop < ulNumInterfaces; ulLoop++)
    5c9a:	2300      	movs	r3, #0
    5c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    5ca0:	e07d      	b.n	5d9e <USBDeviceConfig+0x222>
    {
        //
        // Get the next interface descriptor in the config descriptor.
        //
        psInterface = USBDCDConfigGetInterface(psConfig,
    5ca2:	f107 0384 	add.w	r3, r7, #132	; 0x84
    5ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5caa:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
    5cae:	6838      	ldr	r0, [r7, #0]
    5cb0:	f7ff fe7c 	bl	59ac <USBDCDConfigGetInterface>
    5cb4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                                               &ulSection);

        //
        // Is this the default interface (bAlternateSetting set to 0)?
        //
        if(psInterface && (psInterface->bAlternateSetting == 0))
    5cb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	d069      	beq.n	5d94 <USBDeviceConfig+0x218>
    5cc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    5cc4:	78db      	ldrb	r3, [r3, #3]
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	d164      	bne.n	5d94 <USBDeviceConfig+0x218>
        {
            //
            // This is an interface we are interested in so gather the
            // information on its endpoints.
            //
            ulNumEndpoints = (unsigned long)psInterface->bNumEndpoints;
    5cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    5cce:	791b      	ldrb	r3, [r3, #4]
    5cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

            //
            // Walk through each endpoint in this interface and configure
            // it appropriately.
            //
            for(ulCount = 0; ulCount < ulNumEndpoints; ulCount++)
    5cd4:	2300      	movs	r3, #0
    5cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    5cda:	e055      	b.n	5d88 <USBDeviceConfig+0x20c>
            {
                //
                // Get a pointer to the endpoint descriptor.
                //
                psEndpoint = USBDCDConfigGetInterfaceEndpoint(psConfig,
                                            psInterface->bInterfaceNumber,
    5cdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    5ce0:	789b      	ldrb	r3, [r3, #2]
                psEndpoint = USBDCDConfigGetInterfaceEndpoint(psConfig,
    5ce2:	4619      	mov	r1, r3
                                            psInterface->bAlternateSetting,
    5ce4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    5ce8:	78db      	ldrb	r3, [r3, #3]
                psEndpoint = USBDCDConfigGetInterfaceEndpoint(psConfig,
    5cea:	461a      	mov	r2, r3
    5cec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    5cf0:	6838      	ldr	r0, [r7, #0]
    5cf2:	f7ff fe7a 	bl	59ea <USBDCDConfigGetInterfaceEndpoint>
    5cf6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                                            ulCount);

                //
                // Make sure we got a good pointer.
                //
                if(psEndpoint)
    5cfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    5cfe:	2b00      	cmp	r3, #0
    5d00:	d03d      	beq.n	5d7e <USBDeviceConfig+0x202>
                {
                    //
                    // Determine maximum packet size and flags from the
                    // endpoint descriptor.
                    //
                    GetEPDescriptorType(psEndpoint, &ulEpIndex, &ulMaxPkt,
    5d02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
    5d06:	f107 0290 	add.w	r2, r7, #144	; 0x90
    5d0a:	f107 0194 	add.w	r1, r7, #148	; 0x94
    5d0e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
    5d12:	f7ff fee7 	bl	5ae4 <GetEPDescriptorType>
                                        &ulFlags);

                    //
                    // Make sure no-one is trying to configure endpoint 0.
                    //
                    if(!ulEpIndex)
    5d16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d101      	bne.n	5d22 <USBDeviceConfig+0x1a6>
                    {
                        return(false);
    5d1e:	2300      	movs	r3, #0
    5d20:	e0d3      	b.n	5eca <USBDeviceConfig+0x34e>
                    }

                    //
                    // Include any additional flags that the user wants.
                    //
                    if((ulFlags & (USB_EP_DEV_IN | USB_EP_DEV_OUT)) ==
    5d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    5d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d00e      	beq.n	5d4c <USBDeviceConfig+0x1d0>
                    {
                        //
                        // This is an IN endpoint.
                        //
                        ulFlags |= (unsigned long)(
                                  psFIFOConfig->sIn[ulEpIndex - 1].usEPFlags);
    5d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    5d32:	3b01      	subs	r3, #1
    5d34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    5d38:	009b      	lsls	r3, r3, #2
    5d3a:	4413      	add	r3, r2
    5d3c:	885b      	ldrh	r3, [r3, #2]
                        ulFlags |= (unsigned long)(
    5d3e:	461a      	mov	r2, r3
    5d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    5d44:	4313      	orrs	r3, r2
    5d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    5d4a:	e00e      	b.n	5d6a <USBDeviceConfig+0x1ee>
                    {
                        //
                        // This is an OUT endpoint.
                        //
                        ulFlags |= (unsigned long)(
                                psFIFOConfig->sOut[ulEpIndex - 1].usEPFlags);
    5d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    5d50:	3b01      	subs	r3, #1
    5d52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    5d56:	330e      	adds	r3, #14
    5d58:	009b      	lsls	r3, r3, #2
    5d5a:	4413      	add	r3, r2
    5d5c:	88db      	ldrh	r3, [r3, #6]
                        ulFlags |= (unsigned long)(
    5d5e:	461a      	mov	r2, r3
    5d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    5d64:	4313      	orrs	r3, r2
    5d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    }

                    //
                    // Set the endpoint configuration.
                    //
                    USBDevEndpointConfigSet(USB0_BASE,
    5d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    5d6e:	0119      	lsls	r1, r3, #4
    5d70:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    5d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    5d78:	4856      	ldr	r0, [pc, #344]	; (5ed4 <USBDeviceConfig+0x358>)
    5d7a:	f000 fa33 	bl	61e4 <USBDevEndpointConfigSet>
            for(ulCount = 0; ulCount < ulNumEndpoints; ulCount++)
    5d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    5d82:	3301      	adds	r3, #1
    5d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    5d88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
    5d8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    5d90:	429a      	cmp	r2, r3
    5d92:	d3a3      	bcc.n	5cdc <USBDeviceConfig+0x160>
    for(ulLoop = 0; ulLoop < ulNumInterfaces; ulLoop++)
    5d94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5d98:	3301      	adds	r3, #1
    5d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    5d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    5da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    5da6:	429a      	cmp	r2, r3
    5da8:	f4ff af7b 	bcc.w	5ca2 <USBDeviceConfig+0x126>
    // used by this configuration's alternate setting 0.  Now we go on and
    // partition the FIFO based on the maximum packet size information we
    // extracted earlier.  Endpoint 0 is automatically configured to use the
    // first MAX_PACKET_SIZE_EP0 bytes of the FIFO so we start from there.
    //
    ulCount = MAX_PACKET_SIZE_EP0;
    5dac:	2340      	movs	r3, #64	; 0x40
    5dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    for(ulLoop = 1; ulLoop < NUM_USB_EP; ulLoop++)
    5db2:	2301      	movs	r3, #1
    5db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    5db8:	e081      	b.n	5ebe <USBDeviceConfig+0x342>
    {
        //
        // Configure the IN endpoint at this index if it is referred to
        // anywhere.
        //
        if(psEPInfo[ulLoop - 1].ulSize[EP_INFO_IN])
    5dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5dbe:	3b01      	subs	r3, #1
    5dc0:	00db      	lsls	r3, r3, #3
    5dc2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
    5dc6:	4413      	add	r3, r2
    5dc8:	f853 3cac 	ldr.w	r3, [r3, #-172]
    5dcc:	2b00      	cmp	r3, #0
    5dce:	d032      	beq.n	5e36 <USBDeviceConfig+0x2ba>
        {
            //
            // What FIFO size flag do we use for this endpoint?
            //
            ulMaxPkt = GetEndpointFIFOSize(
                                     psEPInfo[ulLoop - 1].ulSize[EP_INFO_IN],
    5dd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5dd4:	3b01      	subs	r3, #1
            ulMaxPkt = GetEndpointFIFOSize(
    5dd6:	00db      	lsls	r3, r3, #3
    5dd8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
    5ddc:	4413      	add	r3, r2
    5dde:	f853 0cac 	ldr.w	r0, [r3, #-172]
                                     &(psFIFOConfig->sIn[ulLoop - 1]),
    5de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5de6:	3b01      	subs	r3, #1
            ulMaxPkt = GetEndpointFIFOSize(
    5de8:	009b      	lsls	r3, r3, #2
    5dea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    5dee:	4413      	add	r3, r2
    5df0:	f107 0288 	add.w	r2, r7, #136	; 0x88
    5df4:	4619      	mov	r1, r3
    5df6:	f7ff fe34 	bl	5a62 <GetEndpointFIFOSize>
    5dfa:	4603      	mov	r3, r0
    5dfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            //
            // If we are told that 0 bytes of FIFO will be used, this implies
            // that there is an error in psFIFOConfig or the descriptor
            // somewhere so return an error indicator to the caller.
            //
            if(!ulBytesUsed)
    5e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    5e04:	2b00      	cmp	r3, #0
    5e06:	d101      	bne.n	5e0c <USBDeviceConfig+0x290>
            {
                return(false);
    5e08:	2300      	movs	r3, #0
    5e0a:	e05e      	b.n	5eca <USBDeviceConfig+0x34e>
            }

            //
            // Now actually configure the FIFO for this endpoint.
            //
            USBFIFOConfigSet(USB0_BASE, INDEX_TO_USB_EP(ulLoop), ulCount,
    5e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5e10:	0119      	lsls	r1, r3, #4
    5e12:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    5e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5e1a:	9300      	str	r3, [sp, #0]
    5e1c:	4613      	mov	r3, r2
    5e1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
    5e22:	482c      	ldr	r0, [pc, #176]	; (5ed4 <USBDeviceConfig+0x358>)
    5e24:	f000 fa6b 	bl	62fe <USBFIFOConfigSet>
                             ulMaxPkt, USB_EP_DEV_IN);
            ulCount += ulBytesUsed;
    5e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    5e2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
    5e30:	4413      	add	r3, r2
    5e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        }

        //
        // Configure the OUT endpoint at this index.
        //
        if(psEPInfo[ulLoop - 1].ulSize[EP_INFO_OUT])
    5e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5e3a:	3b01      	subs	r3, #1
    5e3c:	00db      	lsls	r3, r3, #3
    5e3e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
    5e42:	4413      	add	r3, r2
    5e44:	f853 3ca8 	ldr.w	r3, [r3, #-168]
    5e48:	2b00      	cmp	r3, #0
    5e4a:	d033      	beq.n	5eb4 <USBDeviceConfig+0x338>
        {
            //
            // What FIFO size flag do we use for this endpoint?
            //
            ulMaxPkt = GetEndpointFIFOSize(
                                     psEPInfo[ulLoop - 1].ulSize[EP_INFO_OUT],
    5e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5e50:	3b01      	subs	r3, #1
            ulMaxPkt = GetEndpointFIFOSize(
    5e52:	00db      	lsls	r3, r3, #3
    5e54:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
    5e58:	4413      	add	r3, r2
    5e5a:	f853 0ca8 	ldr.w	r0, [r3, #-168]
                                     &(psFIFOConfig->sOut[ulLoop - 1]),
    5e5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5e62:	3b01      	subs	r3, #1
            ulMaxPkt = GetEndpointFIFOSize(
    5e64:	330e      	adds	r3, #14
    5e66:	009b      	lsls	r3, r3, #2
    5e68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    5e6c:	4413      	add	r3, r2
    5e6e:	3304      	adds	r3, #4
    5e70:	f107 0288 	add.w	r2, r7, #136	; 0x88
    5e74:	4619      	mov	r1, r3
    5e76:	f7ff fdf4 	bl	5a62 <GetEndpointFIFOSize>
    5e7a:	4603      	mov	r3, r0
    5e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            //
            // If we are told that 0 bytes of FIFO will be used, this implies
            // that there is an error in psFIFOConfig or the descriptor
            // somewhere so return an error indicator to the caller.
            //
            if(!ulBytesUsed)
    5e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    5e84:	2b00      	cmp	r3, #0
    5e86:	d101      	bne.n	5e8c <USBDeviceConfig+0x310>
            {
                return(false);
    5e88:	2300      	movs	r3, #0
    5e8a:	e01e      	b.n	5eca <USBDeviceConfig+0x34e>
            }

            //
            // Now actually configure the FIFO for this endpoint.
            //
            USBFIFOConfigSet(USB0_BASE, INDEX_TO_USB_EP(ulLoop), ulCount,
    5e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5e90:	0119      	lsls	r1, r3, #4
    5e92:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
    5e96:	2300      	movs	r3, #0
    5e98:	9300      	str	r3, [sp, #0]
    5e9a:	4613      	mov	r3, r2
    5e9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
    5ea0:	480c      	ldr	r0, [pc, #48]	; (5ed4 <USBDeviceConfig+0x358>)
    5ea2:	f000 fa2c 	bl	62fe <USBFIFOConfigSet>
                             ulMaxPkt, USB_EP_DEV_OUT);
            ulCount += ulBytesUsed;
    5ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    5eaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
    5eae:	4413      	add	r3, r2
    5eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    for(ulLoop = 1; ulLoop < NUM_USB_EP; ulLoop++)
    5eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5eb8:	3301      	adds	r3, #1
    5eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    5ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    5ec2:	2b0f      	cmp	r3, #15
    5ec4:	f67f af79 	bls.w	5dba <USBDeviceConfig+0x23e>
    }

    //
    // If we get to the end, all is well.
    //
    return(true);
    5ec8:	2301      	movs	r3, #1
}
    5eca:	4618      	mov	r0, r3
    5ecc:	37b8      	adds	r7, #184	; 0xb8
    5ece:	46bd      	mov	sp, r7
    5ed0:	bd80      	pop	{r7, pc}
    5ed2:	bf00      	nop
    5ed4:	40050000 	.word	0x40050000

00005ed8 <USBDeviceConfigAlternate>:
//*****************************************************************************
tBoolean
USBDeviceConfigAlternate(tDeviceInstance *psDevInst, const tConfigHeader *psConfig,
                         unsigned char ucInterfaceNum,
                         unsigned char ucAlternateSetting)
{
    5ed8:	b580      	push	{r7, lr}
    5eda:	b090      	sub	sp, #64	; 0x40
    5edc:	af00      	add	r7, sp, #0
    5ede:	60f8      	str	r0, [r7, #12]
    5ee0:	60b9      	str	r1, [r7, #8]
    5ee2:	4611      	mov	r1, r2
    5ee4:	461a      	mov	r2, r3
    5ee6:	460b      	mov	r3, r1
    5ee8:	71fb      	strb	r3, [r7, #7]
    5eea:	4613      	mov	r3, r2
    5eec:	71bb      	strb	r3, [r7, #6]
    tFIFOConfig const *psFIFOConfig;

    //
    // How many interfaces are included in the descriptor?
    //
    ulNumInterfaces = USBDCDConfigDescGetNum(psConfig,
    5eee:	2104      	movs	r1, #4
    5ef0:	68b8      	ldr	r0, [r7, #8]
    5ef2:	f7ff fcdc 	bl	58ae <USBDCDConfigDescGetNum>
    5ef6:	6378      	str	r0, [r7, #52]	; 0x34
                                             USB_DTYPE_INTERFACE);

    psFIFOConfig = psDevInst->psInfo->psFIFOConfig;
    5ef8:	68fb      	ldr	r3, [r7, #12]
    5efa:	681b      	ldr	r3, [r3, #0]
    5efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5efe:	633b      	str	r3, [r7, #48]	; 0x30
    //
    // Find the interface descriptor for the supplied interface and alternate
    // setting numbers.
    //

    for(ulLoop = 0; ulLoop < ulNumInterfaces; ulLoop++)
    5f00:	2300      	movs	r3, #0
    5f02:	63fb      	str	r3, [r7, #60]	; 0x3c
    5f04:	e065      	b.n	5fd2 <USBDeviceConfigAlternate+0xfa>
    {
        //
        // Get the next interface descriptor in the config descriptor.
        //
        psInterface = USBDCDConfigGetInterface(psConfig, ulLoop, USB_DESC_ANY,
    5f06:	f107 0318 	add.w	r3, r7, #24
    5f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5f0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    5f10:	68b8      	ldr	r0, [r7, #8]
    5f12:	f7ff fd4b 	bl	59ac <USBDCDConfigGetInterface>
    5f16:	62f8      	str	r0, [r7, #44]	; 0x2c
                                               &ulSection);

        //
        // Is this the default interface (bAlternateSetting set to 0)?
        //
        if(psInterface &&
    5f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d056      	beq.n	5fcc <USBDeviceConfigAlternate+0xf4>
           (psInterface->bInterfaceNumber == ucInterfaceNum) &&
    5f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f20:	789b      	ldrb	r3, [r3, #2]
        if(psInterface &&
    5f22:	79fa      	ldrb	r2, [r7, #7]
    5f24:	429a      	cmp	r2, r3
    5f26:	d151      	bne.n	5fcc <USBDeviceConfigAlternate+0xf4>
           (psInterface->bAlternateSetting == ucAlternateSetting))
    5f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f2a:	78db      	ldrb	r3, [r3, #3]
           (psInterface->bInterfaceNumber == ucInterfaceNum) &&
    5f2c:	79ba      	ldrb	r2, [r7, #6]
    5f2e:	429a      	cmp	r2, r3
    5f30:	d14c      	bne.n	5fcc <USBDeviceConfigAlternate+0xf4>
            //

            //
            // How many endpoints does this interface have?
            //
            ulNumEndpoints = (unsigned long)psInterface->bNumEndpoints;
    5f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f34:	791b      	ldrb	r3, [r3, #4]
    5f36:	62bb      	str	r3, [r7, #40]	; 0x28

            //
            // Walk through each endpoint in turn.
            //
            for(ulCount = 0; ulCount < ulNumEndpoints; ulCount++)
    5f38:	2300      	movs	r3, #0
    5f3a:	63bb      	str	r3, [r7, #56]	; 0x38
    5f3c:	e040      	b.n	5fc0 <USBDeviceConfigAlternate+0xe8>
            {
                //
                // Get a pointer to the endpoint descriptor.
                //
                psEndpoint = USBDCDConfigGetInterfaceEndpoint(psConfig,
                                              psInterface->bInterfaceNumber,
    5f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f40:	789b      	ldrb	r3, [r3, #2]
                psEndpoint = USBDCDConfigGetInterfaceEndpoint(psConfig,
    5f42:	4619      	mov	r1, r3
                                              psInterface->bAlternateSetting,
    5f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f46:	78db      	ldrb	r3, [r3, #3]
                psEndpoint = USBDCDConfigGetInterfaceEndpoint(psConfig,
    5f48:	461a      	mov	r2, r3
    5f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5f4c:	68b8      	ldr	r0, [r7, #8]
    5f4e:	f7ff fd4c 	bl	59ea <USBDCDConfigGetInterfaceEndpoint>
    5f52:	6278      	str	r0, [r7, #36]	; 0x24
                                              ulCount);

                //
                // Make sure we got a good pointer.
                //
                if(psEndpoint)
    5f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f56:	2b00      	cmp	r3, #0
    5f58:	d02f      	beq.n	5fba <USBDeviceConfigAlternate+0xe2>
                {
                    //
                    // Determine maximum packet size and flags from the
                    // endpoint descriptor.
                    //
                    GetEPDescriptorType(psEndpoint, &ulEpIndex, &ulMaxPkt,
    5f5a:	f107 031c 	add.w	r3, r7, #28
    5f5e:	f107 0220 	add.w	r2, r7, #32
    5f62:	f107 0114 	add.w	r1, r7, #20
    5f66:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5f68:	f7ff fdbc 	bl	5ae4 <GetEPDescriptorType>
                                        &ulFlags);

                    //
                    // Make sure no-one is trying to configure endpoint 0.
                    //
                    if(!ulEpIndex)
    5f6c:	697b      	ldr	r3, [r7, #20]
    5f6e:	2b00      	cmp	r3, #0
    5f70:	d101      	bne.n	5f76 <USBDeviceConfigAlternate+0x9e>
                    {
                        return(false);
    5f72:	2300      	movs	r3, #0
    5f74:	e032      	b.n	5fdc <USBDeviceConfigAlternate+0x104>
                    }

                    //
                    // Include any additional flags that the user wants.
                    //
                    if((ulFlags & (USB_EP_DEV_IN | USB_EP_DEV_OUT)) ==
    5f76:	69fb      	ldr	r3, [r7, #28]
    5f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    5f7c:	2b00      	cmp	r3, #0
    5f7e:	d00a      	beq.n	5f96 <USBDeviceConfigAlternate+0xbe>
                    {
                        //
                        // This is an IN endpoint.
                        //
                        ulFlags |= (unsigned long)(
                                psFIFOConfig->sIn[ulEpIndex - 1].usEPFlags);
    5f80:	697b      	ldr	r3, [r7, #20]
    5f82:	3b01      	subs	r3, #1
    5f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5f86:	009b      	lsls	r3, r3, #2
    5f88:	4413      	add	r3, r2
    5f8a:	885b      	ldrh	r3, [r3, #2]
                        ulFlags |= (unsigned long)(
    5f8c:	461a      	mov	r2, r3
    5f8e:	69fb      	ldr	r3, [r7, #28]
    5f90:	4313      	orrs	r3, r2
    5f92:	61fb      	str	r3, [r7, #28]
    5f94:	e00a      	b.n	5fac <USBDeviceConfigAlternate+0xd4>
                    {
                        //
                        // This is an OUT endpoint.
                        //
                        ulFlags |= (unsigned long)(
                                psFIFOConfig->sOut[ulEpIndex - 1].usEPFlags);
    5f96:	697b      	ldr	r3, [r7, #20]
    5f98:	3b01      	subs	r3, #1
    5f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5f9c:	330e      	adds	r3, #14
    5f9e:	009b      	lsls	r3, r3, #2
    5fa0:	4413      	add	r3, r2
    5fa2:	88db      	ldrh	r3, [r3, #6]
                        ulFlags |= (unsigned long)(
    5fa4:	461a      	mov	r2, r3
    5fa6:	69fb      	ldr	r3, [r7, #28]
    5fa8:	4313      	orrs	r3, r2
    5faa:	61fb      	str	r3, [r7, #28]
                    }

                    //
                    // Set the endpoint configuration.
                    //
                    USBDevEndpointConfigSet(USB0_BASE,
    5fac:	697b      	ldr	r3, [r7, #20]
    5fae:	0119      	lsls	r1, r3, #4
    5fb0:	6a3a      	ldr	r2, [r7, #32]
    5fb2:	69fb      	ldr	r3, [r7, #28]
    5fb4:	480b      	ldr	r0, [pc, #44]	; (5fe4 <USBDeviceConfigAlternate+0x10c>)
    5fb6:	f000 f915 	bl	61e4 <USBDevEndpointConfigSet>
            for(ulCount = 0; ulCount < ulNumEndpoints; ulCount++)
    5fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5fbc:	3301      	adds	r3, #1
    5fbe:	63bb      	str	r3, [r7, #56]	; 0x38
    5fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    5fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5fc4:	429a      	cmp	r2, r3
    5fc6:	d3ba      	bcc.n	5f3e <USBDeviceConfigAlternate+0x66>

            //
            // At this point, we have reconfigured the desired interface so
            // return indicating all is well.
            //
            return(true);
    5fc8:	2301      	movs	r3, #1
    5fca:	e007      	b.n	5fdc <USBDeviceConfigAlternate+0x104>
    for(ulLoop = 0; ulLoop < ulNumInterfaces; ulLoop++)
    5fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5fce:	3301      	adds	r3, #1
    5fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    5fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5fd6:	429a      	cmp	r2, r3
    5fd8:	d395      	bcc.n	5f06 <USBDeviceConfigAlternate+0x2e>
        }
    }

    return(false);
    5fda:	2300      	movs	r3, #0
}
    5fdc:	4618      	mov	r0, r3
    5fde:	3740      	adds	r7, #64	; 0x40
    5fe0:	46bd      	mov	sp, r7
    5fe2:	bd80      	pop	{r7, pc}
    5fe4:	40050000 	.word	0x40050000

00005fe8 <USBDescGetNum>:
//
//*****************************************************************************
unsigned long
USBDescGetNum(tDescriptorHeader *psDesc,  unsigned long ulSize,
              unsigned long ulType)
{
    5fe8:	b480      	push	{r7}
    5fea:	b089      	sub	sp, #36	; 0x24
    5fec:	af00      	add	r7, sp, #0
    5fee:	60f8      	str	r0, [r7, #12]
    5ff0:	60b9      	str	r1, [r7, #8]
    5ff2:	607a      	str	r2, [r7, #4]
    unsigned long ulCount;

    //
    // Set up for our descriptor counting loop.
    //
    psDescCheck = psDesc;
    5ff4:	68fb      	ldr	r3, [r7, #12]
    5ff6:	61fb      	str	r3, [r7, #28]
    ulTotLength = 0;
    5ff8:	2300      	movs	r3, #0
    5ffa:	61bb      	str	r3, [r7, #24]
    ulCount = 0;
    5ffc:	2300      	movs	r3, #0
    5ffe:	617b      	str	r3, [r7, #20]

    //
    // Keep looking through the supplied data until we reach the end.
    //
    while(ulTotLength < ulSize)
    6000:	e018      	b.n	6034 <USBDescGetNum+0x4c>
    {
        //
        // Does this descriptor match the type passed (if a specific type
        // has been specified)?
        //
        if((ulType == USB_DESC_ANY) ||
    6002:	687b      	ldr	r3, [r7, #4]
    6004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6008:	d005      	beq.n	6016 <USBDescGetNum+0x2e>
           (psDescCheck->bDescriptorType == (unsigned char)(ulType & 0xFF)))
    600a:	69fb      	ldr	r3, [r7, #28]
    600c:	785a      	ldrb	r2, [r3, #1]
    600e:	687b      	ldr	r3, [r7, #4]
    6010:	b2db      	uxtb	r3, r3
        if((ulType == USB_DESC_ANY) ||
    6012:	429a      	cmp	r2, r3
    6014:	d102      	bne.n	601c <USBDescGetNum+0x34>
        {
            ulCount++;
    6016:	697b      	ldr	r3, [r7, #20]
    6018:	3301      	adds	r3, #1
    601a:	617b      	str	r3, [r7, #20]
        }

        //
        // Move on to the next descriptor.
        //
        ulTotLength += (unsigned long)psDescCheck->bLength;
    601c:	69fb      	ldr	r3, [r7, #28]
    601e:	781b      	ldrb	r3, [r3, #0]
    6020:	461a      	mov	r2, r3
    6022:	69bb      	ldr	r3, [r7, #24]
    6024:	4413      	add	r3, r2
    6026:	61bb      	str	r3, [r7, #24]
        psDescCheck = NEXT_USB_DESCRIPTOR(psDescCheck);
    6028:	69fb      	ldr	r3, [r7, #28]
    602a:	781b      	ldrb	r3, [r3, #0]
    602c:	461a      	mov	r2, r3
    602e:	69fb      	ldr	r3, [r7, #28]
    6030:	4413      	add	r3, r2
    6032:	61fb      	str	r3, [r7, #28]
    while(ulTotLength < ulSize)
    6034:	69ba      	ldr	r2, [r7, #24]
    6036:	68bb      	ldr	r3, [r7, #8]
    6038:	429a      	cmp	r2, r3
    603a:	d3e2      	bcc.n	6002 <USBDescGetNum+0x1a>
    }

    //
    // Return the descriptor count to the caller.
    //
    return(ulCount);
    603c:	697b      	ldr	r3, [r7, #20]
}
    603e:	4618      	mov	r0, r3
    6040:	3724      	adds	r7, #36	; 0x24
    6042:	46bd      	mov	sp, r7
    6044:	f85d 7b04 	ldr.w	r7, [sp], #4
    6048:	4770      	bx	lr

0000604a <USBDescGet>:
//
//*****************************************************************************
tDescriptorHeader *
USBDescGet(tDescriptorHeader *psDesc,  unsigned long ulSize,
           unsigned long ulType, unsigned long ulIndex)
{
    604a:	b480      	push	{r7}
    604c:	b089      	sub	sp, #36	; 0x24
    604e:	af00      	add	r7, sp, #0
    6050:	60f8      	str	r0, [r7, #12]
    6052:	60b9      	str	r1, [r7, #8]
    6054:	607a      	str	r2, [r7, #4]
    6056:	603b      	str	r3, [r7, #0]
    unsigned long ulCount;

    //
    // Set up for our descriptor counting loop.
    //
    psDescCheck = psDesc;
    6058:	68fb      	ldr	r3, [r7, #12]
    605a:	61fb      	str	r3, [r7, #28]
    ulTotLength = 0;
    605c:	2300      	movs	r3, #0
    605e:	61bb      	str	r3, [r7, #24]
    ulCount = 0;
    6060:	2300      	movs	r3, #0
    6062:	617b      	str	r3, [r7, #20]

    //
    // Keep looking through the supplied data until we reach the end.
    //
    while(ulTotLength < ulSize)
    6064:	e01e      	b.n	60a4 <USBDescGet+0x5a>
    {
        //
        // Does this descriptor match the type passed (if a specific type
        // has been specified)?
        //
        if((ulType == USB_DESC_ANY) ||
    6066:	687b      	ldr	r3, [r7, #4]
    6068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    606c:	d005      	beq.n	607a <USBDescGet+0x30>
           (psDescCheck->bDescriptorType == (unsigned char)(ulType & 0xFF)))
    606e:	69fb      	ldr	r3, [r7, #28]
    6070:	785a      	ldrb	r2, [r3, #1]
    6072:	687b      	ldr	r3, [r7, #4]
    6074:	b2db      	uxtb	r3, r3
        if((ulType == USB_DESC_ANY) ||
    6076:	429a      	cmp	r2, r3
    6078:	d108      	bne.n	608c <USBDescGet+0x42>
        {
            //
            // We found a matching descriptor.  If our count matches the
            // supplied index, we are done so return the pointer.
            //
            if(ulCount == ulIndex)
    607a:	697a      	ldr	r2, [r7, #20]
    607c:	683b      	ldr	r3, [r7, #0]
    607e:	429a      	cmp	r2, r3
    6080:	d101      	bne.n	6086 <USBDescGet+0x3c>
            {
                return(psDescCheck);
    6082:	69fb      	ldr	r3, [r7, #28]
    6084:	e013      	b.n	60ae <USBDescGet+0x64>

            //
            // We have not found enough descriptors yet to satisfy the supplied
            // index so increment our count and continue.
            //
            ulCount++;
    6086:	697b      	ldr	r3, [r7, #20]
    6088:	3301      	adds	r3, #1
    608a:	617b      	str	r3, [r7, #20]
        }

        //
        // Move on to the next descriptor.
        //
        ulTotLength += (unsigned long)psDescCheck->bLength;
    608c:	69fb      	ldr	r3, [r7, #28]
    608e:	781b      	ldrb	r3, [r3, #0]
    6090:	461a      	mov	r2, r3
    6092:	69bb      	ldr	r3, [r7, #24]
    6094:	4413      	add	r3, r2
    6096:	61bb      	str	r3, [r7, #24]
        psDescCheck = NEXT_USB_DESCRIPTOR(psDescCheck);
    6098:	69fb      	ldr	r3, [r7, #28]
    609a:	781b      	ldrb	r3, [r3, #0]
    609c:	461a      	mov	r2, r3
    609e:	69fb      	ldr	r3, [r7, #28]
    60a0:	4413      	add	r3, r2
    60a2:	61fb      	str	r3, [r7, #28]
    while(ulTotLength < ulSize)
    60a4:	69ba      	ldr	r2, [r7, #24]
    60a6:	68bb      	ldr	r3, [r7, #8]
    60a8:	429a      	cmp	r2, r3
    60aa:	d3dc      	bcc.n	6066 <USBDescGet+0x1c>

    //
    // If we get here, we reached the end of the data without finding the
    // required descriptor.  Return NULL.
    //
    return((tDescriptorHeader *)0);
    60ac:	2300      	movs	r3, #0
}
    60ae:	4618      	mov	r0, r3
    60b0:	3724      	adds	r7, #36	; 0x24
    60b2:	46bd      	mov	sp, r7
    60b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    60b8:	4770      	bx	lr

000060ba <GPIOPinWrite>:
//! \return None.
//
//*****************************************************************************
void
GPIOPinWrite(unsigned long ulPort, unsigned char ucPins, unsigned char ucVal)
{
    60ba:	b480      	push	{r7}
    60bc:	b083      	sub	sp, #12
    60be:	af00      	add	r7, sp, #0
    60c0:	6078      	str	r0, [r7, #4]
    60c2:	460b      	mov	r3, r1
    60c4:	70fb      	strb	r3, [r7, #3]
    60c6:	4613      	mov	r3, r2
    60c8:	70bb      	strb	r3, [r7, #2]
    ASSERT(GPIOBaseValid(ulPort));

    //
    // Write the pins.
    //
    HWREG(ulPort + (GPIO_O_DATA + (ucPins << 2))) = ucVal;
    60ca:	78fb      	ldrb	r3, [r7, #3]
    60cc:	009b      	lsls	r3, r3, #2
    60ce:	461a      	mov	r2, r3
    60d0:	687b      	ldr	r3, [r7, #4]
    60d2:	4413      	add	r3, r2
    60d4:	461a      	mov	r2, r3
    60d6:	78bb      	ldrb	r3, [r7, #2]
    60d8:	6013      	str	r3, [r2, #0]
}
    60da:	bf00      	nop
    60dc:	370c      	adds	r7, #12
    60de:	46bd      	mov	sp, r7
    60e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    60e4:	4770      	bx	lr
	...

000060e8 <GPIOPinConfigure>:
//! \return None.
//
//*****************************************************************************
void
GPIOPinConfigure(unsigned long ulPinConfig)
{
    60e8:	b480      	push	{r7}
    60ea:	b085      	sub	sp, #20
    60ec:	af00      	add	r7, sp, #0
    60ee:	6078      	str	r0, [r7, #4]
    ASSERT(((ulPinConfig >> 8) & 0xe3) == 0);

    //
    // Extract the base address index from the input value.
    //
    ulBase = (ulPinConfig >> 16) & 0xff;
    60f0:	687b      	ldr	r3, [r7, #4]
    60f2:	0c1b      	lsrs	r3, r3, #16
    60f4:	b2db      	uxtb	r3, r3
    60f6:	60fb      	str	r3, [r7, #12]

    //
    // Get the base address of the GPIO module, selecting either the APB or the
    // AHB aperture as appropriate.
    //
    if(HWREG(SYSCTL_GPIOHBCTL) & (1 << ulBase))
    60f8:	4b1a      	ldr	r3, [pc, #104]	; (6164 <GPIOPinConfigure+0x7c>)
    60fa:	681b      	ldr	r3, [r3, #0]
    60fc:	2101      	movs	r1, #1
    60fe:	68fa      	ldr	r2, [r7, #12]
    6100:	fa01 f202 	lsl.w	r2, r1, r2
    6104:	4013      	ands	r3, r2
    6106:	2b00      	cmp	r3, #0
    6108:	d007      	beq.n	611a <GPIOPinConfigure+0x32>
    {
        ulBase = g_pulGPIOBaseAddrs[(ulBase << 1) + 1];
    610a:	68fb      	ldr	r3, [r7, #12]
    610c:	005b      	lsls	r3, r3, #1
    610e:	3301      	adds	r3, #1
    6110:	4a15      	ldr	r2, [pc, #84]	; (6168 <GPIOPinConfigure+0x80>)
    6112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6116:	60fb      	str	r3, [r7, #12]
    6118:	e005      	b.n	6126 <GPIOPinConfigure+0x3e>
    }
    else
    {
        ulBase = g_pulGPIOBaseAddrs[ulBase << 1];
    611a:	68fb      	ldr	r3, [r7, #12]
    611c:	005b      	lsls	r3, r3, #1
    611e:	4a12      	ldr	r2, [pc, #72]	; (6168 <GPIOPinConfigure+0x80>)
    6120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6124:	60fb      	str	r3, [r7, #12]
    }

    //
    // Extract the shift from the input value.
    //
    ulShift = (ulPinConfig >> 8) & 0xff;
    6126:	687b      	ldr	r3, [r7, #4]
    6128:	0a1b      	lsrs	r3, r3, #8
    612a:	b2db      	uxtb	r3, r3
    612c:	60bb      	str	r3, [r7, #8]

    //
    // Write the requested pin muxing value for this GPIO pin.
    //
    HWREG(ulBase + GPIO_O_PCTL) = ((HWREG(ulBase + GPIO_O_PCTL) &
    612e:	68fb      	ldr	r3, [r7, #12]
    6130:	f203 532c 	addw	r3, r3, #1324	; 0x52c
    6134:	681b      	ldr	r3, [r3, #0]
                                    ~(0xf << ulShift)) |
    6136:	210f      	movs	r1, #15
    6138:	68ba      	ldr	r2, [r7, #8]
    613a:	fa01 f202 	lsl.w	r2, r1, r2
    613e:	43d2      	mvns	r2, r2
    HWREG(ulBase + GPIO_O_PCTL) = ((HWREG(ulBase + GPIO_O_PCTL) &
    6140:	401a      	ands	r2, r3
                                   ((ulPinConfig & 0xf) << ulShift));
    6142:	687b      	ldr	r3, [r7, #4]
    6144:	f003 010f 	and.w	r1, r3, #15
    6148:	68bb      	ldr	r3, [r7, #8]
    614a:	fa01 f303 	lsl.w	r3, r1, r3
    HWREG(ulBase + GPIO_O_PCTL) = ((HWREG(ulBase + GPIO_O_PCTL) &
    614e:	68f9      	ldr	r1, [r7, #12]
    6150:	f201 512c 	addw	r1, r1, #1324	; 0x52c
                                    ~(0xf << ulShift)) |
    6154:	4313      	orrs	r3, r2
    HWREG(ulBase + GPIO_O_PCTL) = ((HWREG(ulBase + GPIO_O_PCTL) &
    6156:	600b      	str	r3, [r1, #0]
}
    6158:	bf00      	nop
    615a:	3714      	adds	r7, #20
    615c:	46bd      	mov	sp, r7
    615e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6162:	4770      	bx	lr
    6164:	400fe06c 	.word	0x400fe06c
    6168:	00006b2c 	.word	0x00006b2c

0000616c <IntMasterEnable>:
//! called or \b false if they were initially enabled.
//
//*****************************************************************************
tBoolean
IntMasterEnable(void)
{
    616c:	b580      	push	{r7, lr}
    616e:	af00      	add	r7, sp, #0
    //
    // Enable processor interrupts.
    //
    return(CPUcpsie());
    6170:	f000 f905 	bl	637e <CPUcpsie>
    6174:	4603      	mov	r3, r0
    6176:	b2db      	uxtb	r3, r3
}
    6178:	4618      	mov	r0, r3
    617a:	bd80      	pop	{r7, pc}

0000617c <IntMasterDisable>:
//! function was called or \b false if they were initially enabled.
//
//*****************************************************************************
tBoolean
IntMasterDisable(void)
{
    617c:	b580      	push	{r7, lr}
    617e:	af00      	add	r7, sp, #0
    //
    // Disable processor interrupts.
    //
    return(CPUcpsid());
    6180:	f000 f8f6 	bl	6370 <CPUcpsid>
    6184:	4603      	mov	r3, r0
    6186:	b2db      	uxtb	r3, r3
}
    6188:	4618      	mov	r0, r3
    618a:	bd80      	pop	{r7, pc}

0000618c <USBIndexWrite>:
//*****************************************************************************
static void
USBIndexWrite(unsigned long ulBase, unsigned long ulEndpoint,
              unsigned long ulIndexedReg, unsigned long ulValue,
              unsigned long ulSize)
{
    618c:	b480      	push	{r7}
    618e:	b087      	sub	sp, #28
    6190:	af00      	add	r7, sp, #0
    6192:	60f8      	str	r0, [r7, #12]
    6194:	60b9      	str	r1, [r7, #8]
    6196:	607a      	str	r2, [r7, #4]
    6198:	603b      	str	r3, [r7, #0]
    ASSERT((ulSize == 1) || (ulSize == 2));

    //
    // Save the old index in case it was in use.
    //
    ulIndex = HWREGB(ulBase + USB_O_EPIDX);
    619a:	68fb      	ldr	r3, [r7, #12]
    619c:	330e      	adds	r3, #14
    619e:	781b      	ldrb	r3, [r3, #0]
    61a0:	b2db      	uxtb	r3, r3
    61a2:	617b      	str	r3, [r7, #20]

    //
    // Set the index.
    //
    HWREGB(ulBase + USB_O_EPIDX) = ulEndpoint;
    61a4:	68fb      	ldr	r3, [r7, #12]
    61a6:	330e      	adds	r3, #14
    61a8:	68ba      	ldr	r2, [r7, #8]
    61aa:	b2d2      	uxtb	r2, r2
    61ac:	701a      	strb	r2, [r3, #0]

    //
    // Determine the size of the register value.
    //
    if(ulSize == 1)
    61ae:	6a3b      	ldr	r3, [r7, #32]
    61b0:	2b01      	cmp	r3, #1
    61b2:	d106      	bne.n	61c2 <USBIndexWrite+0x36>
    {
        //
        // Set the value.
        //
        HWREGB(ulBase + ulIndexedReg) = ulValue;
    61b4:	68fa      	ldr	r2, [r7, #12]
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	4413      	add	r3, r2
    61ba:	683a      	ldr	r2, [r7, #0]
    61bc:	b2d2      	uxtb	r2, r2
    61be:	701a      	strb	r2, [r3, #0]
    61c0:	e005      	b.n	61ce <USBIndexWrite+0x42>
    else
    {
        //
        // Set the value.
        //
        HWREGH(ulBase + ulIndexedReg) = ulValue;
    61c2:	68fa      	ldr	r2, [r7, #12]
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	4413      	add	r3, r2
    61c8:	683a      	ldr	r2, [r7, #0]
    61ca:	b292      	uxth	r2, r2
    61cc:	801a      	strh	r2, [r3, #0]
    }

    //
    // Restore the old index in case it was in use.
    //
    HWREGB(ulBase + USB_O_EPIDX) = ulIndex;
    61ce:	68fb      	ldr	r3, [r7, #12]
    61d0:	330e      	adds	r3, #14
    61d2:	697a      	ldr	r2, [r7, #20]
    61d4:	b2d2      	uxtb	r2, r2
    61d6:	701a      	strb	r2, [r3, #0]
}
    61d8:	bf00      	nop
    61da:	371c      	adds	r7, #28
    61dc:	46bd      	mov	sp, r7
    61de:	f85d 7b04 	ldr.w	r7, [sp], #4
    61e2:	4770      	bx	lr

000061e4 <USBDevEndpointConfigSet>:
//
//*****************************************************************************
void
USBDevEndpointConfigSet(unsigned long ulBase, unsigned long ulEndpoint,
                        unsigned long ulMaxPacketSize, unsigned long ulFlags)
{
    61e4:	b480      	push	{r7}
    61e6:	b087      	sub	sp, #28
    61e8:	af00      	add	r7, sp, #0
    61ea:	60f8      	str	r0, [r7, #12]
    61ec:	60b9      	str	r1, [r7, #8]
    61ee:	607a      	str	r2, [r7, #4]
    61f0:	603b      	str	r3, [r7, #0]
           (ulEndpoint == USB_EP_15));

    //
    // Determine if a transmit or receive endpoint is being configured.
    //
    if(ulFlags & USB_EP_DEV_IN)
    61f2:	683b      	ldr	r3, [r7, #0]
    61f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    61f8:	2b00      	cmp	r3, #0
    61fa:	d03e      	beq.n	627a <USBDevEndpointConfigSet+0x96>
    {
        //
        // Set the maximum packet size.
        //
        HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXMAXP1) =
    61fc:	68ba      	ldr	r2, [r7, #8]
    61fe:	68fb      	ldr	r3, [r7, #12]
    6200:	4413      	add	r3, r2
    6202:	f503 7380 	add.w	r3, r3, #256	; 0x100
    6206:	687a      	ldr	r2, [r7, #4]
    6208:	b292      	uxth	r2, r2
    620a:	801a      	strh	r2, [r3, #0]
            ulMaxPacketSize;

        //
        // The transmit control value is zero unless options are enabled.
        //
        ulRegister = 0;
    620c:	2300      	movs	r3, #0
    620e:	617b      	str	r3, [r7, #20]

        //
        // Allow auto setting of TxPktRdy when max packet size has been loaded
        // into the FIFO.
        //
        if(ulFlags & USB_EP_AUTO_SET)
    6210:	683b      	ldr	r3, [r7, #0]
    6212:	f003 0301 	and.w	r3, r3, #1
    6216:	2b00      	cmp	r3, #0
    6218:	d003      	beq.n	6222 <USBDevEndpointConfigSet+0x3e>
        {
            ulRegister |= USB_TXCSRH1_AUTOSET;
    621a:	697b      	ldr	r3, [r7, #20]
    621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6220:	617b      	str	r3, [r7, #20]
        }

        //
        // Configure the DMA mode.
        //
        if(ulFlags & USB_EP_DMA_MODE_1)
    6222:	683b      	ldr	r3, [r7, #0]
    6224:	f003 0310 	and.w	r3, r3, #16
    6228:	2b00      	cmp	r3, #0
    622a:	d004      	beq.n	6236 <USBDevEndpointConfigSet+0x52>
        {
            ulRegister |= USB_TXCSRH1_DMAEN | USB_TXCSRH1_DMAMOD;
    622c:	697b      	ldr	r3, [r7, #20]
    622e:	f043 0314 	orr.w	r3, r3, #20
    6232:	617b      	str	r3, [r7, #20]
    6234:	e008      	b.n	6248 <USBDevEndpointConfigSet+0x64>
        }
        else if(ulFlags & USB_EP_DMA_MODE_0)
    6236:	683b      	ldr	r3, [r7, #0]
    6238:	f003 0308 	and.w	r3, r3, #8
    623c:	2b00      	cmp	r3, #0
    623e:	d003      	beq.n	6248 <USBDevEndpointConfigSet+0x64>
        {
            ulRegister |= USB_TXCSRH1_DMAEN;
    6240:	697b      	ldr	r3, [r7, #20]
    6242:	f043 0310 	orr.w	r3, r3, #16
    6246:	617b      	str	r3, [r7, #20]
        }

        //
        // Enable isochronous mode if requested.
        //
        if((ulFlags & USB_EP_MODE_MASK) == USB_EP_MODE_ISOC)
    6248:	683b      	ldr	r3, [r7, #0]
    624a:	f403 7340 	and.w	r3, r3, #768	; 0x300
    624e:	2b00      	cmp	r3, #0
    6250:	d103      	bne.n	625a <USBDevEndpointConfigSet+0x76>
        {
            ulRegister |= USB_TXCSRH1_ISO;
    6252:	697b      	ldr	r3, [r7, #20]
    6254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6258:	617b      	str	r3, [r7, #20]
        }

        //
        // Write the transmit control value.
        //
        HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRH1) =
    625a:	68ba      	ldr	r2, [r7, #8]
    625c:	68fb      	ldr	r3, [r7, #12]
    625e:	4413      	add	r3, r2
    6260:	f203 1303 	addw	r3, r3, #259	; 0x103
            (unsigned char)ulRegister;
    6264:	697a      	ldr	r2, [r7, #20]
    6266:	b2d2      	uxtb	r2, r2
        HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRH1) =
    6268:	701a      	strb	r2, [r3, #0]

        //
        // Reset the Data toggle to zero.
        //
        HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRL1) =
    626a:	68ba      	ldr	r2, [r7, #8]
    626c:	68fb      	ldr	r3, [r7, #12]
    626e:	4413      	add	r3, r2
    6270:	f503 7381 	add.w	r3, r3, #258	; 0x102
    6274:	2240      	movs	r2, #64	; 0x40
    6276:	701a      	strb	r2, [r3, #0]
        // Reset the Data toggle to zero.
        //
        HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRL1) =
            USB_RXCSRL1_CLRDT;
    }
}
    6278:	e03b      	b.n	62f2 <USBDevEndpointConfigSet+0x10e>
        HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXMAXP1) =
    627a:	68ba      	ldr	r2, [r7, #8]
    627c:	68fb      	ldr	r3, [r7, #12]
    627e:	4413      	add	r3, r2
    6280:	f503 7382 	add.w	r3, r3, #260	; 0x104
    6284:	687a      	ldr	r2, [r7, #4]
    6286:	b292      	uxth	r2, r2
    6288:	801a      	strh	r2, [r3, #0]
        ulRegister = 0;
    628a:	2300      	movs	r3, #0
    628c:	617b      	str	r3, [r7, #20]
        if(ulFlags & USB_EP_AUTO_CLEAR)
    628e:	683b      	ldr	r3, [r7, #0]
    6290:	f003 0304 	and.w	r3, r3, #4
    6294:	2b00      	cmp	r3, #0
    6296:	d001      	beq.n	629c <USBDevEndpointConfigSet+0xb8>
            ulRegister = USB_RXCSRH1_AUTOCL;
    6298:	2380      	movs	r3, #128	; 0x80
    629a:	617b      	str	r3, [r7, #20]
        if(ulFlags & USB_EP_DMA_MODE_1)
    629c:	683b      	ldr	r3, [r7, #0]
    629e:	f003 0310 	and.w	r3, r3, #16
    62a2:	2b00      	cmp	r3, #0
    62a4:	d004      	beq.n	62b0 <USBDevEndpointConfigSet+0xcc>
            ulRegister |= USB_RXCSRH1_DMAEN | USB_RXCSRH1_DMAMOD;
    62a6:	697b      	ldr	r3, [r7, #20]
    62a8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    62ac:	617b      	str	r3, [r7, #20]
    62ae:	e008      	b.n	62c2 <USBDevEndpointConfigSet+0xde>
        else if(ulFlags & USB_EP_DMA_MODE_0)
    62b0:	683b      	ldr	r3, [r7, #0]
    62b2:	f003 0308 	and.w	r3, r3, #8
    62b6:	2b00      	cmp	r3, #0
    62b8:	d003      	beq.n	62c2 <USBDevEndpointConfigSet+0xde>
            ulRegister |= USB_RXCSRH1_DMAEN;
    62ba:	697b      	ldr	r3, [r7, #20]
    62bc:	f043 0320 	orr.w	r3, r3, #32
    62c0:	617b      	str	r3, [r7, #20]
        if((ulFlags & USB_EP_MODE_MASK) == USB_EP_MODE_ISOC)
    62c2:	683b      	ldr	r3, [r7, #0]
    62c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
    62c8:	2b00      	cmp	r3, #0
    62ca:	d103      	bne.n	62d4 <USBDevEndpointConfigSet+0xf0>
            ulRegister |= USB_RXCSRH1_ISO;
    62cc:	697b      	ldr	r3, [r7, #20]
    62ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    62d2:	617b      	str	r3, [r7, #20]
        HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRH1) =
    62d4:	68ba      	ldr	r2, [r7, #8]
    62d6:	68fb      	ldr	r3, [r7, #12]
    62d8:	4413      	add	r3, r2
    62da:	f203 1307 	addw	r3, r3, #263	; 0x107
            (unsigned char)ulRegister;
    62de:	697a      	ldr	r2, [r7, #20]
    62e0:	b2d2      	uxtb	r2, r2
        HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRH1) =
    62e2:	701a      	strb	r2, [r3, #0]
        HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRL1) =
    62e4:	68ba      	ldr	r2, [r7, #8]
    62e6:	68fb      	ldr	r3, [r7, #12]
    62e8:	4413      	add	r3, r2
    62ea:	f503 7383 	add.w	r3, r3, #262	; 0x106
    62ee:	2280      	movs	r2, #128	; 0x80
    62f0:	701a      	strb	r2, [r3, #0]
}
    62f2:	bf00      	nop
    62f4:	371c      	adds	r7, #28
    62f6:	46bd      	mov	sp, r7
    62f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    62fc:	4770      	bx	lr

000062fe <USBFIFOConfigSet>:
//*****************************************************************************
void
USBFIFOConfigSet(unsigned long ulBase, unsigned long ulEndpoint,
                 unsigned long ulFIFOAddress, unsigned long ulFIFOSize,
                 unsigned long ulFlags)
{
    62fe:	b580      	push	{r7, lr}
    6300:	b086      	sub	sp, #24
    6302:	af02      	add	r7, sp, #8
    6304:	60f8      	str	r0, [r7, #12]
    6306:	60b9      	str	r1, [r7, #8]
    6308:	607a      	str	r2, [r7, #4]
    630a:	603b      	str	r3, [r7, #0]
           (ulEndpoint == USB_EP_15));

    //
    // See if the transmit or receive FIFO is being configured.
    //
    if(ulFlags & (USB_EP_HOST_OUT | USB_EP_DEV_IN))
    630c:	69bb      	ldr	r3, [r7, #24]
    630e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    6312:	2b00      	cmp	r3, #0
    6314:	d014      	beq.n	6340 <USBFIFOConfigSet+0x42>
    {
        //
        // Set the transmit FIFO location and size for this endpoint.
        //
        USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_TXFIFOSZ, ulFIFOSize, 1);
    6316:	68bb      	ldr	r3, [r7, #8]
    6318:	0919      	lsrs	r1, r3, #4
    631a:	2301      	movs	r3, #1
    631c:	9300      	str	r3, [sp, #0]
    631e:	683b      	ldr	r3, [r7, #0]
    6320:	2262      	movs	r2, #98	; 0x62
    6322:	68f8      	ldr	r0, [r7, #12]
    6324:	f7ff ff32 	bl	618c <USBIndexWrite>
        USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_TXFIFOADD,
    6328:	68bb      	ldr	r3, [r7, #8]
    632a:	0919      	lsrs	r1, r3, #4
    632c:	687b      	ldr	r3, [r7, #4]
    632e:	08da      	lsrs	r2, r3, #3
    6330:	2302      	movs	r3, #2
    6332:	9300      	str	r3, [sp, #0]
    6334:	4613      	mov	r3, r2
    6336:	2264      	movs	r2, #100	; 0x64
    6338:	68f8      	ldr	r0, [r7, #12]
    633a:	f7ff ff27 	bl	618c <USBIndexWrite>
        //
        USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_RXFIFOSZ, ulFIFOSize, 1);
        USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_RXFIFOADD,
                      ulFIFOAddress >> 3, 2);
    }
}
    633e:	e013      	b.n	6368 <USBFIFOConfigSet+0x6a>
        USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_RXFIFOSZ, ulFIFOSize, 1);
    6340:	68bb      	ldr	r3, [r7, #8]
    6342:	0919      	lsrs	r1, r3, #4
    6344:	2301      	movs	r3, #1
    6346:	9300      	str	r3, [sp, #0]
    6348:	683b      	ldr	r3, [r7, #0]
    634a:	2263      	movs	r2, #99	; 0x63
    634c:	68f8      	ldr	r0, [r7, #12]
    634e:	f7ff ff1d 	bl	618c <USBIndexWrite>
        USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_RXFIFOADD,
    6352:	68bb      	ldr	r3, [r7, #8]
    6354:	0919      	lsrs	r1, r3, #4
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	08da      	lsrs	r2, r3, #3
    635a:	2302      	movs	r3, #2
    635c:	9300      	str	r3, [sp, #0]
    635e:	4613      	mov	r3, r2
    6360:	2266      	movs	r2, #102	; 0x66
    6362:	68f8      	ldr	r0, [r7, #12]
    6364:	f7ff ff12 	bl	618c <USBIndexWrite>
}
    6368:	bf00      	nop
    636a:	3710      	adds	r7, #16
    636c:	46bd      	mov	sp, r7
    636e:	bd80      	pop	{r7, pc}

00006370 <CPUcpsid>:
    unsigned long ulRet;

    //
    // Read PRIMASK and disable interrupts.
    //
    __asm("    mrs     r0, PRIMASK\n"
    6370:	f3ef 8010 	mrs	r0, PRIMASK
    6374:	b672      	cpsid	i
    6376:	4770      	bx	lr
    6378:	461c      	mov	r4, r3
    // The return is handled in the inline assembly, but the compiler will
    // still complain if there is not an explicit return here (despite the fact
    // that this does not result in any code being produced because of the
    // naked attribute).
    //
    return(ulRet);
    637a:	4623      	mov	r3, r4
}
    637c:	4618      	mov	r0, r3

0000637e <CPUcpsie>:
    unsigned long ulRet;

    //
    // Read PRIMASK and enable interrupts.
    //
    __asm("    mrs     r0, PRIMASK\n"
    637e:	f3ef 8010 	mrs	r0, PRIMASK
    6382:	b662      	cpsie	i
    6384:	4770      	bx	lr
    6386:	461c      	mov	r4, r3
    // The return is handled in the inline assembly, but the compiler will
    // still complain if there is not an explicit return here (despite the fact
    // that this does not result in any code being produced because of the
    // naked attribute).
    //
    return(ulRet);
    6388:	4623      	mov	r3, r4
}
    638a:	4618      	mov	r0, r3

0000638c <__aeabi_uldivmod>:
    638c:	b953      	cbnz	r3, 63a4 <__aeabi_uldivmod+0x18>
    638e:	b94a      	cbnz	r2, 63a4 <__aeabi_uldivmod+0x18>
    6390:	2900      	cmp	r1, #0
    6392:	bf08      	it	eq
    6394:	2800      	cmpeq	r0, #0
    6396:	bf1c      	itt	ne
    6398:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    639c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    63a0:	f000 b972 	b.w	6688 <__aeabi_idiv0>
    63a4:	f1ad 0c08 	sub.w	ip, sp, #8
    63a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    63ac:	f000 f806 	bl	63bc <__udivmoddi4>
    63b0:	f8dd e004 	ldr.w	lr, [sp, #4]
    63b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    63b8:	b004      	add	sp, #16
    63ba:	4770      	bx	lr

000063bc <__udivmoddi4>:
    63bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    63c0:	9e08      	ldr	r6, [sp, #32]
    63c2:	4604      	mov	r4, r0
    63c4:	4688      	mov	r8, r1
    63c6:	2b00      	cmp	r3, #0
    63c8:	d14b      	bne.n	6462 <__udivmoddi4+0xa6>
    63ca:	428a      	cmp	r2, r1
    63cc:	4615      	mov	r5, r2
    63ce:	d967      	bls.n	64a0 <__udivmoddi4+0xe4>
    63d0:	fab2 f282 	clz	r2, r2
    63d4:	b14a      	cbz	r2, 63ea <__udivmoddi4+0x2e>
    63d6:	f1c2 0720 	rsb	r7, r2, #32
    63da:	fa01 f302 	lsl.w	r3, r1, r2
    63de:	fa20 f707 	lsr.w	r7, r0, r7
    63e2:	4095      	lsls	r5, r2
    63e4:	ea47 0803 	orr.w	r8, r7, r3
    63e8:	4094      	lsls	r4, r2
    63ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    63ee:	0c23      	lsrs	r3, r4, #16
    63f0:	fbb8 f7fe 	udiv	r7, r8, lr
    63f4:	fa1f fc85 	uxth.w	ip, r5
    63f8:	fb0e 8817 	mls	r8, lr, r7, r8
    63fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    6400:	fb07 f10c 	mul.w	r1, r7, ip
    6404:	4299      	cmp	r1, r3
    6406:	d909      	bls.n	641c <__udivmoddi4+0x60>
    6408:	18eb      	adds	r3, r5, r3
    640a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    640e:	f080 811b 	bcs.w	6648 <__udivmoddi4+0x28c>
    6412:	4299      	cmp	r1, r3
    6414:	f240 8118 	bls.w	6648 <__udivmoddi4+0x28c>
    6418:	3f02      	subs	r7, #2
    641a:	442b      	add	r3, r5
    641c:	1a5b      	subs	r3, r3, r1
    641e:	b2a4      	uxth	r4, r4
    6420:	fbb3 f0fe 	udiv	r0, r3, lr
    6424:	fb0e 3310 	mls	r3, lr, r0, r3
    6428:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    642c:	fb00 fc0c 	mul.w	ip, r0, ip
    6430:	45a4      	cmp	ip, r4
    6432:	d909      	bls.n	6448 <__udivmoddi4+0x8c>
    6434:	192c      	adds	r4, r5, r4
    6436:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    643a:	f080 8107 	bcs.w	664c <__udivmoddi4+0x290>
    643e:	45a4      	cmp	ip, r4
    6440:	f240 8104 	bls.w	664c <__udivmoddi4+0x290>
    6444:	3802      	subs	r0, #2
    6446:	442c      	add	r4, r5
    6448:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    644c:	eba4 040c 	sub.w	r4, r4, ip
    6450:	2700      	movs	r7, #0
    6452:	b11e      	cbz	r6, 645c <__udivmoddi4+0xa0>
    6454:	40d4      	lsrs	r4, r2
    6456:	2300      	movs	r3, #0
    6458:	e9c6 4300 	strd	r4, r3, [r6]
    645c:	4639      	mov	r1, r7
    645e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6462:	428b      	cmp	r3, r1
    6464:	d909      	bls.n	647a <__udivmoddi4+0xbe>
    6466:	2e00      	cmp	r6, #0
    6468:	f000 80eb 	beq.w	6642 <__udivmoddi4+0x286>
    646c:	2700      	movs	r7, #0
    646e:	e9c6 0100 	strd	r0, r1, [r6]
    6472:	4638      	mov	r0, r7
    6474:	4639      	mov	r1, r7
    6476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    647a:	fab3 f783 	clz	r7, r3
    647e:	2f00      	cmp	r7, #0
    6480:	d147      	bne.n	6512 <__udivmoddi4+0x156>
    6482:	428b      	cmp	r3, r1
    6484:	d302      	bcc.n	648c <__udivmoddi4+0xd0>
    6486:	4282      	cmp	r2, r0
    6488:	f200 80fa 	bhi.w	6680 <__udivmoddi4+0x2c4>
    648c:	1a84      	subs	r4, r0, r2
    648e:	eb61 0303 	sbc.w	r3, r1, r3
    6492:	2001      	movs	r0, #1
    6494:	4698      	mov	r8, r3
    6496:	2e00      	cmp	r6, #0
    6498:	d0e0      	beq.n	645c <__udivmoddi4+0xa0>
    649a:	e9c6 4800 	strd	r4, r8, [r6]
    649e:	e7dd      	b.n	645c <__udivmoddi4+0xa0>
    64a0:	b902      	cbnz	r2, 64a4 <__udivmoddi4+0xe8>
    64a2:	deff      	udf	#255	; 0xff
    64a4:	fab2 f282 	clz	r2, r2
    64a8:	2a00      	cmp	r2, #0
    64aa:	f040 808f 	bne.w	65cc <__udivmoddi4+0x210>
    64ae:	1b49      	subs	r1, r1, r5
    64b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    64b4:	fa1f f885 	uxth.w	r8, r5
    64b8:	2701      	movs	r7, #1
    64ba:	fbb1 fcfe 	udiv	ip, r1, lr
    64be:	0c23      	lsrs	r3, r4, #16
    64c0:	fb0e 111c 	mls	r1, lr, ip, r1
    64c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    64c8:	fb08 f10c 	mul.w	r1, r8, ip
    64cc:	4299      	cmp	r1, r3
    64ce:	d907      	bls.n	64e0 <__udivmoddi4+0x124>
    64d0:	18eb      	adds	r3, r5, r3
    64d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    64d6:	d202      	bcs.n	64de <__udivmoddi4+0x122>
    64d8:	4299      	cmp	r1, r3
    64da:	f200 80cd 	bhi.w	6678 <__udivmoddi4+0x2bc>
    64de:	4684      	mov	ip, r0
    64e0:	1a59      	subs	r1, r3, r1
    64e2:	b2a3      	uxth	r3, r4
    64e4:	fbb1 f0fe 	udiv	r0, r1, lr
    64e8:	fb0e 1410 	mls	r4, lr, r0, r1
    64ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    64f0:	fb08 f800 	mul.w	r8, r8, r0
    64f4:	45a0      	cmp	r8, r4
    64f6:	d907      	bls.n	6508 <__udivmoddi4+0x14c>
    64f8:	192c      	adds	r4, r5, r4
    64fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    64fe:	d202      	bcs.n	6506 <__udivmoddi4+0x14a>
    6500:	45a0      	cmp	r8, r4
    6502:	f200 80b6 	bhi.w	6672 <__udivmoddi4+0x2b6>
    6506:	4618      	mov	r0, r3
    6508:	eba4 0408 	sub.w	r4, r4, r8
    650c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    6510:	e79f      	b.n	6452 <__udivmoddi4+0x96>
    6512:	f1c7 0c20 	rsb	ip, r7, #32
    6516:	40bb      	lsls	r3, r7
    6518:	fa22 fe0c 	lsr.w	lr, r2, ip
    651c:	ea4e 0e03 	orr.w	lr, lr, r3
    6520:	fa01 f407 	lsl.w	r4, r1, r7
    6524:	fa20 f50c 	lsr.w	r5, r0, ip
    6528:	fa21 f30c 	lsr.w	r3, r1, ip
    652c:	ea4f 481e 	mov.w	r8, lr, lsr #16
    6530:	4325      	orrs	r5, r4
    6532:	fbb3 f9f8 	udiv	r9, r3, r8
    6536:	0c2c      	lsrs	r4, r5, #16
    6538:	fb08 3319 	mls	r3, r8, r9, r3
    653c:	fa1f fa8e 	uxth.w	sl, lr
    6540:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    6544:	fb09 f40a 	mul.w	r4, r9, sl
    6548:	429c      	cmp	r4, r3
    654a:	fa02 f207 	lsl.w	r2, r2, r7
    654e:	fa00 f107 	lsl.w	r1, r0, r7
    6552:	d90b      	bls.n	656c <__udivmoddi4+0x1b0>
    6554:	eb1e 0303 	adds.w	r3, lr, r3
    6558:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    655c:	f080 8087 	bcs.w	666e <__udivmoddi4+0x2b2>
    6560:	429c      	cmp	r4, r3
    6562:	f240 8084 	bls.w	666e <__udivmoddi4+0x2b2>
    6566:	f1a9 0902 	sub.w	r9, r9, #2
    656a:	4473      	add	r3, lr
    656c:	1b1b      	subs	r3, r3, r4
    656e:	b2ad      	uxth	r5, r5
    6570:	fbb3 f0f8 	udiv	r0, r3, r8
    6574:	fb08 3310 	mls	r3, r8, r0, r3
    6578:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    657c:	fb00 fa0a 	mul.w	sl, r0, sl
    6580:	45a2      	cmp	sl, r4
    6582:	d908      	bls.n	6596 <__udivmoddi4+0x1da>
    6584:	eb1e 0404 	adds.w	r4, lr, r4
    6588:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    658c:	d26b      	bcs.n	6666 <__udivmoddi4+0x2aa>
    658e:	45a2      	cmp	sl, r4
    6590:	d969      	bls.n	6666 <__udivmoddi4+0x2aa>
    6592:	3802      	subs	r0, #2
    6594:	4474      	add	r4, lr
    6596:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    659a:	fba0 8902 	umull	r8, r9, r0, r2
    659e:	eba4 040a 	sub.w	r4, r4, sl
    65a2:	454c      	cmp	r4, r9
    65a4:	46c2      	mov	sl, r8
    65a6:	464b      	mov	r3, r9
    65a8:	d354      	bcc.n	6654 <__udivmoddi4+0x298>
    65aa:	d051      	beq.n	6650 <__udivmoddi4+0x294>
    65ac:	2e00      	cmp	r6, #0
    65ae:	d069      	beq.n	6684 <__udivmoddi4+0x2c8>
    65b0:	ebb1 050a 	subs.w	r5, r1, sl
    65b4:	eb64 0403 	sbc.w	r4, r4, r3
    65b8:	fa04 fc0c 	lsl.w	ip, r4, ip
    65bc:	40fd      	lsrs	r5, r7
    65be:	40fc      	lsrs	r4, r7
    65c0:	ea4c 0505 	orr.w	r5, ip, r5
    65c4:	e9c6 5400 	strd	r5, r4, [r6]
    65c8:	2700      	movs	r7, #0
    65ca:	e747      	b.n	645c <__udivmoddi4+0xa0>
    65cc:	f1c2 0320 	rsb	r3, r2, #32
    65d0:	fa20 f703 	lsr.w	r7, r0, r3
    65d4:	4095      	lsls	r5, r2
    65d6:	fa01 f002 	lsl.w	r0, r1, r2
    65da:	fa21 f303 	lsr.w	r3, r1, r3
    65de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    65e2:	4338      	orrs	r0, r7
    65e4:	0c01      	lsrs	r1, r0, #16
    65e6:	fbb3 f7fe 	udiv	r7, r3, lr
    65ea:	fa1f f885 	uxth.w	r8, r5
    65ee:	fb0e 3317 	mls	r3, lr, r7, r3
    65f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    65f6:	fb07 f308 	mul.w	r3, r7, r8
    65fa:	428b      	cmp	r3, r1
    65fc:	fa04 f402 	lsl.w	r4, r4, r2
    6600:	d907      	bls.n	6612 <__udivmoddi4+0x256>
    6602:	1869      	adds	r1, r5, r1
    6604:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    6608:	d22f      	bcs.n	666a <__udivmoddi4+0x2ae>
    660a:	428b      	cmp	r3, r1
    660c:	d92d      	bls.n	666a <__udivmoddi4+0x2ae>
    660e:	3f02      	subs	r7, #2
    6610:	4429      	add	r1, r5
    6612:	1acb      	subs	r3, r1, r3
    6614:	b281      	uxth	r1, r0
    6616:	fbb3 f0fe 	udiv	r0, r3, lr
    661a:	fb0e 3310 	mls	r3, lr, r0, r3
    661e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6622:	fb00 f308 	mul.w	r3, r0, r8
    6626:	428b      	cmp	r3, r1
    6628:	d907      	bls.n	663a <__udivmoddi4+0x27e>
    662a:	1869      	adds	r1, r5, r1
    662c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    6630:	d217      	bcs.n	6662 <__udivmoddi4+0x2a6>
    6632:	428b      	cmp	r3, r1
    6634:	d915      	bls.n	6662 <__udivmoddi4+0x2a6>
    6636:	3802      	subs	r0, #2
    6638:	4429      	add	r1, r5
    663a:	1ac9      	subs	r1, r1, r3
    663c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    6640:	e73b      	b.n	64ba <__udivmoddi4+0xfe>
    6642:	4637      	mov	r7, r6
    6644:	4630      	mov	r0, r6
    6646:	e709      	b.n	645c <__udivmoddi4+0xa0>
    6648:	4607      	mov	r7, r0
    664a:	e6e7      	b.n	641c <__udivmoddi4+0x60>
    664c:	4618      	mov	r0, r3
    664e:	e6fb      	b.n	6448 <__udivmoddi4+0x8c>
    6650:	4541      	cmp	r1, r8
    6652:	d2ab      	bcs.n	65ac <__udivmoddi4+0x1f0>
    6654:	ebb8 0a02 	subs.w	sl, r8, r2
    6658:	eb69 020e 	sbc.w	r2, r9, lr
    665c:	3801      	subs	r0, #1
    665e:	4613      	mov	r3, r2
    6660:	e7a4      	b.n	65ac <__udivmoddi4+0x1f0>
    6662:	4660      	mov	r0, ip
    6664:	e7e9      	b.n	663a <__udivmoddi4+0x27e>
    6666:	4618      	mov	r0, r3
    6668:	e795      	b.n	6596 <__udivmoddi4+0x1da>
    666a:	4667      	mov	r7, ip
    666c:	e7d1      	b.n	6612 <__udivmoddi4+0x256>
    666e:	4681      	mov	r9, r0
    6670:	e77c      	b.n	656c <__udivmoddi4+0x1b0>
    6672:	3802      	subs	r0, #2
    6674:	442c      	add	r4, r5
    6676:	e747      	b.n	6508 <__udivmoddi4+0x14c>
    6678:	f1ac 0c02 	sub.w	ip, ip, #2
    667c:	442b      	add	r3, r5
    667e:	e72f      	b.n	64e0 <__udivmoddi4+0x124>
    6680:	4638      	mov	r0, r7
    6682:	e708      	b.n	6496 <__udivmoddi4+0xda>
    6684:	4637      	mov	r7, r6
    6686:	e6e9      	b.n	645c <__udivmoddi4+0xa0>

00006688 <__aeabi_idiv0>:
    6688:	4770      	bx	lr
    668a:	bf00      	nop

0000668c <__errno>:
    668c:	4b01      	ldr	r3, [pc, #4]	; (6694 <__errno+0x8>)
    668e:	6818      	ldr	r0, [r3, #0]
    6690:	4770      	bx	lr
    6692:	bf00      	nop
    6694:	20000000 	.word	0x20000000
    6698:	74736f48 	.word	0x74736f48
    669c:	6e6f6320 	.word	0x6e6f6320
    66a0:	7463656e 	.word	0x7463656e
    66a4:	0d2e6465 	.word	0x0d2e6465
    66a8:	0000000a 	.word	0x0000000a
    66ac:	74736f48 	.word	0x74736f48
    66b0:	73696420 	.word	0x73696420
    66b4:	6e6e6f63 	.word	0x6e6e6f63
    66b8:	65746365 	.word	0x65746365
    66bc:	0a0d2e64 	.word	0x0a0d2e64
    66c0:	00000000 	.word	0x00000000
    66c4:	4a325b1b 	.word	0x4a325b1b
    66c8:	6c657453 	.word	0x6c657453
    66cc:	6972616c 	.word	0x6972616c
    66d0:	53552073 	.word	0x53552073
    66d4:	75622042 	.word	0x75622042
    66d8:	64206b6c 	.word	0x64206b6c
    66dc:	63697665 	.word	0x63697665
    66e0:	78652065 	.word	0x78652065
    66e4:	6c706d61 	.word	0x6c706d61
    66e8:	000a0d65 	.word	0x000a0d65
    66ec:	2d2d2d2d 	.word	0x2d2d2d2d
    66f0:	2d2d2d2d 	.word	0x2d2d2d2d
    66f4:	2d2d2d2d 	.word	0x2d2d2d2d
    66f8:	2d2d2d2d 	.word	0x2d2d2d2d
    66fc:	2d2d2d2d 	.word	0x2d2d2d2d
    6700:	2d2d2d2d 	.word	0x2d2d2d2d
    6704:	2d2d2d2d 	.word	0x2d2d2d2d
    6708:	2d2d2d2d 	.word	0x2d2d2d2d
    670c:	000a0d2d 	.word	0x000a0d2d
    6710:	6c6c6568 	.word	0x6c6c6568
    6714:	726f776f 	.word	0x726f776f
    6718:	0d2e646c 	.word	0x0d2e646c
    671c:	0000000a 	.word	0x0000000a
    6720:	666e6f43 	.word	0x666e6f43
    6724:	72756769 	.word	0x72756769
    6728:	20676e69 	.word	0x20676e69
    672c:	0d425355 	.word	0x0d425355
    6730:	0000000a 	.word	0x0000000a
    6734:	74696157 	.word	0x74696157
    6738:	20676e69 	.word	0x20676e69
    673c:	20726f66 	.word	0x20726f66
    6740:	74736f68 	.word	0x74736f68
    6744:	0d2e2e2e 	.word	0x0d2e2e2e
    6748:	0000000a 	.word	0x0000000a
    674c:	3a78540d 	.word	0x3a78540d
    6750:	20642520 	.word	0x20642520
    6754:	3a785220 	.word	0x3a785220
    6758:	00642520 	.word	0x00642520
    675c:	33323130 	.word	0x33323130
    6760:	37363534 	.word	0x37363534
    6764:	62613938 	.word	0x62613938
    6768:	66656463 	.word	0x66656463
    676c:	00000000 	.word	0x00000000
    6770:	00000020 	.word	0x00000020
    6774:	4f525245 	.word	0x4f525245
    6778:	00000052 	.word	0x00000052
    677c:	00082008 	.word	0x00082008
    6780:	0000000a 	.word	0x0000000a

00006784 <g_ulUARTBase>:
    6784:	4000c000 4000d000 4000e000              ...@...@...@

00006790 <g_ulUARTInt>:
    6790:	00000015 00000016 00000031              ........1...

0000679c <g_ulUARTPeriph>:
    679c:	10000001 10000002 10000004              ............

000067a8 <g_pLangDescriptor>:
    67a8:	04090304                                ....

000067ac <g_pManufacturerString>:
    67ac:	00540324 00780065 00730061 00490020     $.T.e.x.a.s. .I.
    67bc:	0073006e 00720074 006d0075 006e0065     n.s.t.r.u.m.e.n.
    67cc:	00730074                                t.s.

000067d0 <g_pProductString>:
    67d0:	00470328 006e0065 00720065 00630069     (.G.e.n.e.r.i.c.
    67e0:	00420020 006c0075 0020006b 00650044      .B.u.l.k. .D.e.
    67f0:	00690076 00650063                       v.i.c.e.

000067f8 <g_pSerialNumberString>:
    67f8:	00310312 00330032 00350034 00370036     ..1.2.3.4.5.6.7.
    6808:	00000038                                8...

0000680c <g_pDataInterfaceString>:
    680c:	00420328 006c0075 0020006b 00610044     (.B.u.l.k. .D.a.
    681c:	00610074 00490020 0074006e 00720065     t.a. .I.n.t.e.r.
    682c:	00610066 00650063                       f.a.c.e.

00006834 <g_pConfigString>:
    6834:	00420330 006c0075 0020006b 00610044     0.B.u.l.k. .D.a.
    6844:	00610074 00430020 006e006f 00690066     t.a. .C.o.n.f.i.
    6854:	00750067 00610072 00690074 006e006f     g.u.r.a.t.i.o.n.

00006864 <g_pStringDescriptors>:
    6864:	000067a8 000067ac 000067d0 000067f8     .g...g...g...g..
    6874:	0000680c 00006834                       .h..4h..

0000687c <g_sBulkDevice>:
    687c:	00031cbe 00c001f4 000052f5 000068a0     .........R...h..
    688c:	000052f5 000068c4 00006864 00000006     .R...h..dh......
    689c:	20001534                                4.. 

000068a0 <g_sRxBuffer>:
    68a0:	00000000 00000515 0000687c 00003cf1     ........|h...<..
    68b0:	00003ded 0000687c 2000154c 00000100     .=..|h..L.. ....
    68c0:	2000164c                                L.. 

000068c4 <g_sTxBuffer>:
    68c4:	00000001 000004e1 0000687c 00003c51     ........|h..Q<..
    68d4:	00003dc1 0000687c 2000141c 00000100     .=..|h..... ....
    68e4:	2000151c 33323130 37363534 42413938     ... 0123456789AB
    68f4:	46454443 00000000 33323130 37363534     CDEF....01234567
    6904:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
    6914:	0000296c                                l)..

00006918 <blanks.8545>:
    6918:	20202020 20202020 20202020 20202020                     

00006928 <zeroes.8546>:
    6928:	30303030 30303030 30303030 30303030     0000000000000000
    6938:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00006948 <_ctype_>:
    6948:	20202000 20202020 28282020 20282828     .         ((((( 
    6958:	20202020 20202020 20202020 20202020                     
    6968:	10108820 10101010 10101010 10101010      ...............
    6978:	04040410 04040404 10040404 10101010     ................
    6988:	41411010 41414141 01010101 01010101     ..AAAAAA........
    6998:	01010101 01010101 01010101 10101010     ................
    69a8:	42421010 42424242 02020202 02020202     ..BBBBBB........
    69b8:	02020202 02020202 02020202 10101010     ................
    69c8:	00000020 00000000 00000000 00000000      ...............
	...

00006a4c <g_pBulkInterface>:
    6a4c:	00000409 0000ff02 81050704 00004002     .............@..
    6a5c:	02010507 00000040                       ....@...

00006a64 <g_sBulkConfigSection>:
    6a64:	00000009 200009c0                       ....... 

00006a6c <g_sBulkInterfaceSection>:
    6a6c:	00000017 00006a4c                       ....Lj..

00006a74 <g_sBulkConfigHeader>:
    6a74:	00000002 200009cc                       ....... 

00006a7c <g_pBulkConfigDescriptors>:
    6a7c:	00006a74                                tj..

00006a80 <g_sUSBDefaultFIFOConfig>:
	...

00006af8 <g_psUSBDStdRequests>:
    6af8:	00004339 000043f9 00000000 00004505     9C...C.......E..
    6b08:	00000000 000045d9 0000461d 00004861     .....E...F..aH..
    6b18:	00004891 000048e9 000049e5 00004a59     .H...H...I..YJ..
    6b28:	00004b51                                QK..

00006b2c <g_pulGPIOBaseAddrs>:
    6b2c:	40004000 40058000 40005000 40059000     .@.@...@.P.@...@
    6b3c:	40006000 4005a000 40007000 4005b000     .`.@...@.p.@...@
    6b4c:	40024000 4005c000 40025000 4005d000     .@.@...@.P.@...@
    6b5c:	40026000 4005e000 40027000 4005f000     .`.@...@.p.@...@
    6b6c:	4003d000 40060000 40061000 40061000     ...@...@...@...@
    6b7c:	40062000 40062000 40063000 40063000     . .@. .@.0.@.0.@
    6b8c:	40064000 40064000 40065000 40065000     .@.@.@.@.P.@.P.@
    6b9c:	40066000 40066000                       .`.@.`.@
