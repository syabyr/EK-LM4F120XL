
main:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 00 20 85 02 00 00 f1 02 00 00 f7 02 00 00     ... ............
      10:	fd 02 00 00 fd 02 00 00 fd 02 00 00 00 00 00 00     ................
	...
      2c:	a1 34 00 00 fd 02 00 00 00 00 00 00 91 37 00 00     .4...........7..
      3c:	f9 37 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     .7..............
      4c:	fd 02 00 00 fd 02 00 00 45 03 00 00 fd 02 00 00     ........E.......
      5c:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      6c:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      7c:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      8c:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      9c:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      ac:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      bc:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      cc:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      dc:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      ec:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
      fc:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     10c:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     11c:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     12c:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     13c:	fd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     14c:	00 00 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     15c:	fd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1b0:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     1c0:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     1d0:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     1e0:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     1f0:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     200:	fd 02 00 00 fd 02 00 00 fd 02 00 00 00 00 00 00     ................
     210:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     220:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     230:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     240:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     250:	fd 02 00 00 fd 02 00 00 fd 02 00 00 fd 02 00 00     ................
     260:	fd 02 00 00 fd 02 00 00 fd 02 00 00                 ............

0000026c <_init>:
     26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     26e:	bf00      	nop
     270:	bcf8      	pop	{r3, r4, r5, r6, r7}
     272:	bc08      	pop	{r3}
     274:	469e      	mov	lr, r3
     276:	4770      	bx	lr

00000278 <_fini>:
     278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     27a:	bf00      	nop
     27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
     27e:	bc08      	pop	{r3}
     280:	469e      	mov	lr, r3
     282:	4770      	bx	lr

00000284 <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
     284:	b580      	push	{r7, lr}
     286:	b082      	sub	sp, #8
     288:	af00      	add	r7, sp, #0
    unsigned long *pulSrc, *pulDest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
     28a:	4b13      	ldr	r3, [pc, #76]	; (2d8 <zero_loop+0x24>)
     28c:	607b      	str	r3, [r7, #4]
    for(pulDest = &_data; pulDest < &_edata; )
     28e:	4b13      	ldr	r3, [pc, #76]	; (2dc <zero_loop+0x28>)
     290:	603b      	str	r3, [r7, #0]
     292:	e007      	b.n	2a4 <ResetISR+0x20>
    {
        *pulDest++ = *pulSrc++;
     294:	687a      	ldr	r2, [r7, #4]
     296:	1d13      	adds	r3, r2, #4
     298:	607b      	str	r3, [r7, #4]
     29a:	683b      	ldr	r3, [r7, #0]
     29c:	1d19      	adds	r1, r3, #4
     29e:	6039      	str	r1, [r7, #0]
     2a0:	6812      	ldr	r2, [r2, #0]
     2a2:	601a      	str	r2, [r3, #0]
    for(pulDest = &_data; pulDest < &_edata; )
     2a4:	683b      	ldr	r3, [r7, #0]
     2a6:	4a0e      	ldr	r2, [pc, #56]	; (2e0 <zero_loop+0x2c>)
     2a8:	4293      	cmp	r3, r2
     2aa:	d3f3      	bcc.n	294 <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
     2ac:	480e      	ldr	r0, [pc, #56]	; (2e8 <zero_loop+0x34>)
     2ae:	490f      	ldr	r1, [pc, #60]	; (2ec <zero_loop+0x38>)
     2b0:	f04f 0200 	mov.w	r2, #0

000002b4 <zero_loop>:
     2b4:	4288      	cmp	r0, r1
     2b6:	bfb8      	it	lt
     2b8:	f840 2b04 	strlt.w	r2, [r0], #4
     2bc:	dbfa      	blt.n	2b4 <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
     2be:	4b09      	ldr	r3, [pc, #36]	; (2e4 <zero_loop+0x30>)
     2c0:	681b      	ldr	r3, [r3, #0]
     2c2:	4a08      	ldr	r2, [pc, #32]	; (2e4 <zero_loop+0x30>)
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
     2c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
     2c8:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    main();
     2ca:	f000 f8e1 	bl	490 <main>
}
     2ce:	bf00      	nop
     2d0:	3708      	adds	r7, #8
     2d2:	46bd      	mov	sp, r7
     2d4:	bd80      	pop	{r7, pc}
     2d6:	bf00      	nop
     2d8:	00003bf9 	.word	0x00003bf9
     2dc:	20000000 	.word	0x20000000
     2e0:	20000008 	.word	0x20000008
     2e4:	e000ed88 	.word	0xe000ed88
     2e8:	20000008 	.word	0x20000008
     2ec:	20001170 	.word	0x20001170

000002f0 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
     2f0:	b480      	push	{r7}
     2f2:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
     2f4:	e7fe      	b.n	2f4 <NmiSR+0x4>

000002f6 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
     2f6:	b480      	push	{r7}
     2f8:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
     2fa:	e7fe      	b.n	2fa <FaultISR+0x4>

000002fc <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
     2fc:	b480      	push	{r7}
     2fe:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     300:	e7fe      	b.n	300 <DebugMon_Handler+0x4>

00000302 <vApplicationStackOverflowHook>:
  taskDISABLE_INTERRUPTS();
  //TU_ASSERT(false, );
}

void vApplicationStackOverflowHook(xTaskHandle pxTask, char *pcTaskName)
{
     302:	b480      	push	{r7}
     304:	b085      	sub	sp, #20
     306:	af00      	add	r7, sp, #0
     308:	6078      	str	r0, [r7, #4]
     30a:	6039      	str	r1, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
     30c:	f04f 0340 	mov.w	r3, #64	; 0x40
     310:	f383 8811 	msr	BASEPRI, r3
     314:	f3bf 8f6f 	isb	sy
     318:	f3bf 8f4f 	dsb	sy
     31c:	60fb      	str	r3, [r7, #12]
            "   msr basepri, %0                                         \n"\
            "   isb                                                     \n"\
            "   dsb                                                     \n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
     31e:	bf00      	nop
  (void) pxTask;
  (void) pcTaskName;

  taskDISABLE_INTERRUPTS();
  //TU_ASSERT(false, );
}
     320:	bf00      	nop
     322:	3714      	adds	r7, #20
     324:	46bd      	mov	sp, r7
     326:	f85d 7b04 	ldr.w	r7, [sp], #4
     32a:	4770      	bx	lr

0000032c <__error__>:
//
//*****************************************************************************
#ifdef DEBUG
void
__error__(char *pcFilename, unsigned long ulLine)
{
     32c:	b480      	push	{r7}
     32e:	b083      	sub	sp, #12
     330:	af00      	add	r7, sp, #0
     332:	6078      	str	r0, [r7, #4]
     334:	6039      	str	r1, [r7, #0]
}
     336:	bf00      	nop
     338:	370c      	adds	r7, #12
     33a:	46bd      	mov	sp, r7
     33c:	f85d 7b04 	ldr.w	r7, [sp], #4
     340:	4770      	bx	lr
	...

00000344 <UARTIntHandler>:
// The UART interrupt handler.
//
//*****************************************************************************
void
UARTIntHandler(void)
{
     344:	b590      	push	{r4, r7, lr}
     346:	b083      	sub	sp, #12
     348:	af00      	add	r7, sp, #0
    unsigned long ulStatus;

    //
    // Get the interrrupt status.
    //
    ulStatus = ROM_UARTIntStatus(UART0_BASE, true);
     34a:	4b21      	ldr	r3, [pc, #132]	; (3d0 <UARTIntHandler+0x8c>)
     34c:	681b      	ldr	r3, [r3, #0]
     34e:	334c      	adds	r3, #76	; 0x4c
     350:	681b      	ldr	r3, [r3, #0]
     352:	2101      	movs	r1, #1
     354:	481f      	ldr	r0, [pc, #124]	; (3d4 <UARTIntHandler+0x90>)
     356:	4798      	blx	r3
     358:	6078      	str	r0, [r7, #4]

    //
    // Clear the asserted interrupts.
    //
    ROM_UARTIntClear(UART0_BASE, ulStatus);
     35a:	4b1d      	ldr	r3, [pc, #116]	; (3d0 <UARTIntHandler+0x8c>)
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	3350      	adds	r3, #80	; 0x50
     360:	681b      	ldr	r3, [r3, #0]
     362:	6879      	ldr	r1, [r7, #4]
     364:	481b      	ldr	r0, [pc, #108]	; (3d4 <UARTIntHandler+0x90>)
     366:	4798      	blx	r3

    //
    // Loop while there are characters in the receive FIFO.
    //
    while(ROM_UARTCharsAvail(UART0_BASE))
     368:	e023      	b.n	3b2 <UARTIntHandler+0x6e>
    {
        //
        // Read the next character from the UART and write it back to the UART.
        //
        ROM_UARTCharPutNonBlocking(UART0_BASE,
     36a:	4b19      	ldr	r3, [pc, #100]	; (3d0 <UARTIntHandler+0x8c>)
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	333c      	adds	r3, #60	; 0x3c
     370:	681b      	ldr	r3, [r3, #0]
     372:	461c      	mov	r4, r3
                                   ROM_UARTCharGetNonBlocking(UART0_BASE));
     374:	4b16      	ldr	r3, [pc, #88]	; (3d0 <UARTIntHandler+0x8c>)
     376:	681b      	ldr	r3, [r3, #0]
     378:	3334      	adds	r3, #52	; 0x34
     37a:	681b      	ldr	r3, [r3, #0]
     37c:	4815      	ldr	r0, [pc, #84]	; (3d4 <UARTIntHandler+0x90>)
     37e:	4798      	blx	r3
     380:	4603      	mov	r3, r0
        ROM_UARTCharPutNonBlocking(UART0_BASE,
     382:	b2db      	uxtb	r3, r3
     384:	4619      	mov	r1, r3
     386:	4813      	ldr	r0, [pc, #76]	; (3d4 <UARTIntHandler+0x90>)
     388:	47a0      	blx	r4
        
        //
        // Blink the LED to show a character transfer is occuring.
        //
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);
     38a:	2204      	movs	r2, #4
     38c:	2104      	movs	r1, #4
     38e:	4812      	ldr	r0, [pc, #72]	; (3d8 <UARTIntHandler+0x94>)
     390:	f000 fa1e 	bl	7d0 <GPIOPinWrite>
        
        //
        // Delay for 1 millisecond.  Each SysCtlDelay is about 3 clocks.
        //
        SysCtlDelay(SysCtlClockGet() / (1000 * 3));
     394:	f000 fa9c 	bl	8d0 <SysCtlClockGet>
     398:	4603      	mov	r3, r0
     39a:	4a10      	ldr	r2, [pc, #64]	; (3dc <UARTIntHandler+0x98>)
     39c:	fba2 2303 	umull	r2, r3, r2, r3
     3a0:	099b      	lsrs	r3, r3, #6
     3a2:	4618      	mov	r0, r3
     3a4:	f000 fa8e 	bl	8c4 <SysCtlDelay>
        
        //
        // Turn off the LED
        //
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0);
     3a8:	2200      	movs	r2, #0
     3aa:	2104      	movs	r1, #4
     3ac:	480a      	ldr	r0, [pc, #40]	; (3d8 <UARTIntHandler+0x94>)
     3ae:	f000 fa0f 	bl	7d0 <GPIOPinWrite>
    while(ROM_UARTCharsAvail(UART0_BASE))
     3b2:	4b07      	ldr	r3, [pc, #28]	; (3d0 <UARTIntHandler+0x8c>)
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	332c      	adds	r3, #44	; 0x2c
     3b8:	681b      	ldr	r3, [r3, #0]
     3ba:	4806      	ldr	r0, [pc, #24]	; (3d4 <UARTIntHandler+0x90>)
     3bc:	4798      	blx	r3
     3be:	4603      	mov	r3, r0
     3c0:	2b00      	cmp	r3, #0
     3c2:	d1d2      	bne.n	36a <UARTIntHandler+0x26>
        
    }
}
     3c4:	bf00      	nop
     3c6:	bf00      	nop
     3c8:	370c      	adds	r7, #12
     3ca:	46bd      	mov	sp, r7
     3cc:	bd90      	pop	{r4, r7, pc}
     3ce:	bf00      	nop
     3d0:	01000014 	.word	0x01000014
     3d4:	4000c000 	.word	0x4000c000
     3d8:	40025000 	.word	0x40025000
     3dc:	057619f1 	.word	0x057619f1

000003e0 <UARTSend>:
// Send a string to the UART.
//
//*****************************************************************************
void
UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
     3e0:	b590      	push	{r4, r7, lr}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
     3e8:	6039      	str	r1, [r7, #0]
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
     3ea:	e00a      	b.n	402 <UARTSend+0x22>
    {
        //
        // Write the next character to the UART.
        //
        //ROM_UARTCharPutNonBlocking(UART0_BASE, *pucBuffer++);
        ROM_UARTCharPut(UART0_BASE, *pucBuffer++);
     3ec:	4b0a      	ldr	r3, [pc, #40]	; (418 <UARTSend+0x38>)
     3ee:	681b      	ldr	r3, [r3, #0]
     3f0:	681b      	ldr	r3, [r3, #0]
     3f2:	461c      	mov	r4, r3
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	1c5a      	adds	r2, r3, #1
     3f8:	607a      	str	r2, [r7, #4]
     3fa:	781b      	ldrb	r3, [r3, #0]
     3fc:	4619      	mov	r1, r3
     3fe:	4807      	ldr	r0, [pc, #28]	; (41c <UARTSend+0x3c>)
     400:	47a0      	blx	r4
    while(ulCount--)
     402:	683b      	ldr	r3, [r7, #0]
     404:	1e5a      	subs	r2, r3, #1
     406:	603a      	str	r2, [r7, #0]
     408:	2b00      	cmp	r3, #0
     40a:	d1ef      	bne.n	3ec <UARTSend+0xc>
    }
}
     40c:	bf00      	nop
     40e:	bf00      	nop
     410:	370c      	adds	r7, #12
     412:	46bd      	mov	sp, r7
     414:	bd90      	pop	{r4, r7, pc}
     416:	bf00      	nop
     418:	01000014 	.word	0x01000014
     41c:	4000c000 	.word	0x4000c000

00000420 <led_blinky_cb>:


void led_blinky_cb(TimerHandle_t xTimer)
{
     420:	b580      	push	{r7, lr}
     422:	b082      	sub	sp, #8
     424:	af00      	add	r7, sp, #0
     426:	6078      	str	r0, [r7, #4]
  (void) xTimer;
  static int led_state = 0;
    //UARTSend((unsigned char *)"tick tock. \r\n", 14);
    //printf("helloworld.\r\n");
    if(led_state)
     428:	4b0e      	ldr	r3, [pc, #56]	; (464 <led_blinky_cb+0x44>)
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	2b00      	cmp	r3, #0
     42e:	d007      	beq.n	440 <led_blinky_cb+0x20>
    {
        ROM_GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 |GPIO_PIN_2 |GPIO_PIN_3, GPIO_PIN_1 |GPIO_PIN_2 |GPIO_PIN_3);
     430:	4b0d      	ldr	r3, [pc, #52]	; (468 <led_blinky_cb+0x48>)
     432:	681b      	ldr	r3, [r3, #0]
     434:	681b      	ldr	r3, [r3, #0]
     436:	220e      	movs	r2, #14
     438:	210e      	movs	r1, #14
     43a:	480c      	ldr	r0, [pc, #48]	; (46c <led_blinky_cb+0x4c>)
     43c:	4798      	blx	r3
     43e:	e006      	b.n	44e <led_blinky_cb+0x2e>
    }else
    {
        ROM_GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 |GPIO_PIN_2 |GPIO_PIN_3, 0x0);
     440:	4b09      	ldr	r3, [pc, #36]	; (468 <led_blinky_cb+0x48>)
     442:	681b      	ldr	r3, [r3, #0]
     444:	681b      	ldr	r3, [r3, #0]
     446:	2200      	movs	r2, #0
     448:	210e      	movs	r1, #14
     44a:	4808      	ldr	r0, [pc, #32]	; (46c <led_blinky_cb+0x4c>)
     44c:	4798      	blx	r3
    }
  led_state = 1 - led_state; // toggle
     44e:	4b05      	ldr	r3, [pc, #20]	; (464 <led_blinky_cb+0x44>)
     450:	681b      	ldr	r3, [r3, #0]
     452:	f1c3 0301 	rsb	r3, r3, #1
     456:	4a03      	ldr	r2, [pc, #12]	; (464 <led_blinky_cb+0x44>)
     458:	6013      	str	r3, [r2, #0]
}
     45a:	bf00      	nop
     45c:	3708      	adds	r7, #8
     45e:	46bd      	mov	sp, r7
     460:	bd80      	pop	{r7, pc}
     462:	bf00      	nop
     464:	20000010 	.word	0x20000010
     468:	01000020 	.word	0x01000020
     46c:	40025000 	.word	0x40025000

00000470 <vTask>:



void vTask(void *pvParameters)
{
     470:	b580      	push	{r7, lr}
     472:	b082      	sub	sp, #8
     474:	af00      	add	r7, sp, #0
     476:	6078      	str	r0, [r7, #4]
    (void) pvParameters;
    while(1)
    {
        UARTSend((const unsigned char *)"tick tock. \r\n", 14);
     478:	210e      	movs	r1, #14
     47a:	4804      	ldr	r0, [pc, #16]	; (48c <vTask+0x1c>)
     47c:	f7ff ffb0 	bl	3e0 <UARTSend>
        vTaskDelay(1000/portTICK_RATE_MS);
     480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     484:	f000 fd2a 	bl	edc <vTaskDelay>
        UARTSend((const unsigned char *)"tick tock. \r\n", 14);
     488:	e7f6      	b.n	478 <vTask+0x8>
     48a:	bf00      	nop
     48c:	00003a74 	.word	0x00003a74

00000490 <main>:
// This example demonstrates how to send a string of data to the UART.
//
//*****************************************************************************

int main(void)
{
     490:	b590      	push	{r4, r7, lr}
     492:	b083      	sub	sp, #12
     494:	af02      	add	r7, sp, #8
    //
    // Enable lazy stacking for interrupt handlers.  This allows floating-point
    // instructions to be used within interrupt handlers, but at the expense of
    // extra stack usage.
    //
    ROM_FPUEnable();
     496:	4b46      	ldr	r3, [pc, #280]	; (5b0 <main+0x120>)
     498:	681b      	ldr	r3, [r3, #0]
     49a:	681b      	ldr	r3, [r3, #0]
     49c:	4798      	blx	r3
    ROM_FPULazyStackingEnable();
     49e:	4b44      	ldr	r3, [pc, #272]	; (5b0 <main+0x120>)
     4a0:	681b      	ldr	r3, [r3, #0]
     4a2:	3310      	adds	r3, #16
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	4798      	blx	r3

    //
    // Set the clocking to run directly from the crystal.
    //
    ROM_SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN |
     4a8:	4b42      	ldr	r3, [pc, #264]	; (5b4 <main+0x124>)
     4aa:	681b      	ldr	r3, [r3, #0]
     4ac:	335c      	adds	r3, #92	; 0x5c
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	4841      	ldr	r0, [pc, #260]	; (5b8 <main+0x128>)
     4b2:	4798      	blx	r3
                       SYSCTL_XTAL_16MHZ);

    //
    // Enable the GPIO port that is used for the on-board LED.
    //
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
     4b4:	4b3f      	ldr	r3, [pc, #252]	; (5b4 <main+0x124>)
     4b6:	681b      	ldr	r3, [r3, #0]
     4b8:	3318      	adds	r3, #24
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	483f      	ldr	r0, [pc, #252]	; (5bc <main+0x12c>)
     4be:	4798      	blx	r3

    //
    // Enable the GPIO pins for the LED (PF2).  
    //
    ROM_GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);
     4c0:	4b3f      	ldr	r3, [pc, #252]	; (5c0 <main+0x130>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	333c      	adds	r3, #60	; 0x3c
     4c6:	681b      	ldr	r3, [r3, #0]
     4c8:	2104      	movs	r1, #4
     4ca:	483e      	ldr	r0, [pc, #248]	; (5c4 <main+0x134>)
     4cc:	4798      	blx	r3

    //
    // Enable the peripherals used by this example.
    //
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
     4ce:	4b39      	ldr	r3, [pc, #228]	; (5b4 <main+0x124>)
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	3318      	adds	r3, #24
     4d4:	681b      	ldr	r3, [r3, #0]
     4d6:	483c      	ldr	r0, [pc, #240]	; (5c8 <main+0x138>)
     4d8:	4798      	blx	r3
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
     4da:	4b36      	ldr	r3, [pc, #216]	; (5b4 <main+0x124>)
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	3318      	adds	r3, #24
     4e0:	681b      	ldr	r3, [r3, #0]
     4e2:	483a      	ldr	r0, [pc, #232]	; (5cc <main+0x13c>)
     4e4:	4798      	blx	r3

    //
    // Enable processor interrupts.
    //
    ROM_IntMasterEnable();
     4e6:	4b3a      	ldr	r3, [pc, #232]	; (5d0 <main+0x140>)
     4e8:	681b      	ldr	r3, [r3, #0]
     4ea:	3304      	adds	r3, #4
     4ec:	681b      	ldr	r3, [r3, #0]
     4ee:	4798      	blx	r3

    //
    // Set GPIO A0 and A1 as UART pins.
    //
    GPIOPinConfigure(GPIO_PA0_U0RX);
     4f0:	2001      	movs	r0, #1
     4f2:	f000 f98f 	bl	814 <GPIOPinConfigure>
    GPIOPinConfigure(GPIO_PA1_U0TX);
     4f6:	f240 4001 	movw	r0, #1025	; 0x401
     4fa:	f000 f98b 	bl	814 <GPIOPinConfigure>
    ROM_GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
     4fe:	4b30      	ldr	r3, [pc, #192]	; (5c0 <main+0x130>)
     500:	681b      	ldr	r3, [r3, #0]
     502:	3354      	adds	r3, #84	; 0x54
     504:	681b      	ldr	r3, [r3, #0]
     506:	2103      	movs	r1, #3
     508:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     50c:	4798      	blx	r3

    //
    // Configure the UART for 115,200, 8-N-1 operation.
    //
    ROM_UARTConfigSetExpClk(UART0_BASE, ROM_SysCtlClockGet(), 115200,
     50e:	4b31      	ldr	r3, [pc, #196]	; (5d4 <main+0x144>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	3314      	adds	r3, #20
     514:	681b      	ldr	r3, [r3, #0]
     516:	461c      	mov	r4, r3
     518:	4b26      	ldr	r3, [pc, #152]	; (5b4 <main+0x124>)
     51a:	681b      	ldr	r3, [r3, #0]
     51c:	3360      	adds	r3, #96	; 0x60
     51e:	681b      	ldr	r3, [r3, #0]
     520:	4798      	blx	r3
     522:	4601      	mov	r1, r0
     524:	2360      	movs	r3, #96	; 0x60
     526:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
     52a:	482b      	ldr	r0, [pc, #172]	; (5d8 <main+0x148>)
     52c:	47a0      	blx	r4
                             UART_CONFIG_PAR_NONE));

    //
    // Enable the UART interrupt.
    //
    ROM_IntEnable(INT_UART0);
     52e:	4b28      	ldr	r3, [pc, #160]	; (5d0 <main+0x140>)
     530:	681b      	ldr	r3, [r3, #0]
     532:	681b      	ldr	r3, [r3, #0]
     534:	2015      	movs	r0, #21
     536:	4798      	blx	r3
    ROM_UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);
     538:	4b26      	ldr	r3, [pc, #152]	; (5d4 <main+0x144>)
     53a:	681b      	ldr	r3, [r3, #0]
     53c:	3344      	adds	r3, #68	; 0x44
     53e:	681b      	ldr	r3, [r3, #0]
     540:	2150      	movs	r1, #80	; 0x50
     542:	4825      	ldr	r0, [pc, #148]	; (5d8 <main+0x148>)
     544:	4798      	blx	r3

    //
    // Prompt for text to be entered.
    //
    UARTSend((const unsigned char *)"\033[2JEnter text: \r\n", 18);
     546:	2112      	movs	r1, #18
     548:	4824      	ldr	r0, [pc, #144]	; (5dc <main+0x14c>)
     54a:	f7ff ff49 	bl	3e0 <UARTSend>


    SystemCoreClock = ROM_SysCtlClockGet();
     54e:	4b19      	ldr	r3, [pc, #100]	; (5b4 <main+0x124>)
     550:	681b      	ldr	r3, [r3, #0]
     552:	3360      	adds	r3, #96	; 0x60
     554:	681b      	ldr	r3, [r3, #0]
     556:	4798      	blx	r3
     558:	4603      	mov	r3, r0
     55a:	4a21      	ldr	r2, [pc, #132]	; (5e0 <main+0x150>)
     55c:	6013      	str	r3, [r2, #0]
#if configSUPPORT_STATIC_ALLOCATION

    xTaskCreateStatic(vTask, "vTask", 128, NULL, 1, new_stack, &new_taskdef);
    blinky_tm = xTimerCreateStatic(NULL, pdMS_TO_TICKS(SECOND), true, NULL, led_blinky_cb, &blinky_tmdef);
#else
    xTaskCreate(vTask, "vTask", 128, NULL, 1, NULL);
     55e:	2300      	movs	r3, #0
     560:	9301      	str	r3, [sp, #4]
     562:	2301      	movs	r3, #1
     564:	9300      	str	r3, [sp, #0]
     566:	2300      	movs	r3, #0
     568:	2280      	movs	r2, #128	; 0x80
     56a:	491e      	ldr	r1, [pc, #120]	; (5e4 <main+0x154>)
     56c:	481e      	ldr	r0, [pc, #120]	; (5e8 <main+0x158>)
     56e:	f000 fb37 	bl	be0 <xTaskCreate>
    blinky_tm = xTimerCreate(NULL, pdMS_TO_TICKS(SECOND), true, NULL, led_blinky_cb);
     572:	4b1e      	ldr	r3, [pc, #120]	; (5ec <main+0x15c>)
     574:	9300      	str	r3, [sp, #0]
     576:	2300      	movs	r3, #0
     578:	2201      	movs	r2, #1
     57a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     57e:	2000      	movs	r0, #0
     580:	f001 fbf6 	bl	1d70 <xTimerCreate>
     584:	4603      	mov	r3, r0
     586:	4a1a      	ldr	r2, [pc, #104]	; (5f0 <main+0x160>)
     588:	6013      	str	r3, [r2, #0]
#endif

    xTimerStart(blinky_tm, 0);
     58a:	4b19      	ldr	r3, [pc, #100]	; (5f0 <main+0x160>)
     58c:	681c      	ldr	r4, [r3, #0]
     58e:	f000 fe53 	bl	1238 <xTaskGetTickCount>
     592:	4602      	mov	r2, r0
     594:	2300      	movs	r3, #0
     596:	9300      	str	r3, [sp, #0]
     598:	2300      	movs	r3, #0
     59a:	2101      	movs	r1, #1
     59c:	4620      	mov	r0, r4
     59e:	f001 fc4b 	bl	1e38 <xTimerGenericCommand>
    vTaskStartScheduler();
     5a2:	f000 fcd9 	bl	f58 <vTaskStartScheduler>

    return 0;
     5a6:	2300      	movs	r3, #0
}
     5a8:	4618      	mov	r0, r3
     5aa:	3704      	adds	r7, #4
     5ac:	46bd      	mov	sp, r7
     5ae:	bd90      	pop	{r4, r7, pc}
     5b0:	01000078 	.word	0x01000078
     5b4:	01000044 	.word	0x01000044
     5b8:	07803d40 	.word	0x07803d40
     5bc:	20000020 	.word	0x20000020
     5c0:	01000020 	.word	0x01000020
     5c4:	40025000 	.word	0x40025000
     5c8:	10000001 	.word	0x10000001
     5cc:	20000001 	.word	0x20000001
     5d0:	01000048 	.word	0x01000048
     5d4:	01000014 	.word	0x01000014
     5d8:	4000c000 	.word	0x4000c000
     5dc:	00003a84 	.word	0x00003a84
     5e0:	2000000c 	.word	0x2000000c
     5e4:	00003a98 	.word	0x00003a98
     5e8:	00000471 	.word	0x00000471
     5ec:	00000421 	.word	0x00000421
     5f0:	20000008 	.word	0x20000008

000005f4 <memset>:
     5f4:	0783      	lsls	r3, r0, #30
     5f6:	b530      	push	{r4, r5, lr}
     5f8:	d048      	beq.n	68c <memset+0x98>
     5fa:	1e54      	subs	r4, r2, #1
     5fc:	2a00      	cmp	r2, #0
     5fe:	d03f      	beq.n	680 <memset+0x8c>
     600:	b2ca      	uxtb	r2, r1
     602:	4603      	mov	r3, r0
     604:	e001      	b.n	60a <memset+0x16>
     606:	3c01      	subs	r4, #1
     608:	d33a      	bcc.n	680 <memset+0x8c>
     60a:	f803 2b01 	strb.w	r2, [r3], #1
     60e:	079d      	lsls	r5, r3, #30
     610:	d1f9      	bne.n	606 <memset+0x12>
     612:	2c03      	cmp	r4, #3
     614:	d92d      	bls.n	672 <memset+0x7e>
     616:	b2cd      	uxtb	r5, r1
     618:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
     61c:	2c0f      	cmp	r4, #15
     61e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
     622:	d936      	bls.n	692 <memset+0x9e>
     624:	f1a4 0210 	sub.w	r2, r4, #16
     628:	f022 0c0f 	bic.w	ip, r2, #15
     62c:	f103 0e20 	add.w	lr, r3, #32
     630:	44e6      	add	lr, ip
     632:	ea4f 1c12 	mov.w	ip, r2, lsr #4
     636:	f103 0210 	add.w	r2, r3, #16
     63a:	e942 5504 	strd	r5, r5, [r2, #-16]
     63e:	e942 5502 	strd	r5, r5, [r2, #-8]
     642:	3210      	adds	r2, #16
     644:	4572      	cmp	r2, lr
     646:	d1f8      	bne.n	63a <memset+0x46>
     648:	f10c 0201 	add.w	r2, ip, #1
     64c:	f014 0f0c 	tst.w	r4, #12
     650:	eb03 1202 	add.w	r2, r3, r2, lsl #4
     654:	f004 0c0f 	and.w	ip, r4, #15
     658:	d013      	beq.n	682 <memset+0x8e>
     65a:	f1ac 0304 	sub.w	r3, ip, #4
     65e:	f023 0303 	bic.w	r3, r3, #3
     662:	3304      	adds	r3, #4
     664:	4413      	add	r3, r2
     666:	f842 5b04 	str.w	r5, [r2], #4
     66a:	4293      	cmp	r3, r2
     66c:	d1fb      	bne.n	666 <memset+0x72>
     66e:	f00c 0403 	and.w	r4, ip, #3
     672:	b12c      	cbz	r4, 680 <memset+0x8c>
     674:	b2ca      	uxtb	r2, r1
     676:	441c      	add	r4, r3
     678:	f803 2b01 	strb.w	r2, [r3], #1
     67c:	429c      	cmp	r4, r3
     67e:	d1fb      	bne.n	678 <memset+0x84>
     680:	bd30      	pop	{r4, r5, pc}
     682:	4664      	mov	r4, ip
     684:	4613      	mov	r3, r2
     686:	2c00      	cmp	r4, #0
     688:	d1f4      	bne.n	674 <memset+0x80>
     68a:	e7f9      	b.n	680 <memset+0x8c>
     68c:	4603      	mov	r3, r0
     68e:	4614      	mov	r4, r2
     690:	e7bf      	b.n	612 <memset+0x1e>
     692:	461a      	mov	r2, r3
     694:	46a4      	mov	ip, r4
     696:	e7e0      	b.n	65a <memset+0x66>

00000698 <GPIOBaseValid>:
//
//*****************************************************************************
#ifdef DEBUG
static tBoolean
GPIOBaseValid(unsigned long ulPort)
{
     698:	b480      	push	{r7}
     69a:	b083      	sub	sp, #12
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
           (ulPort == GPIO_PORTG_BASE) || (ulPort == GPIO_PORTG_AHB_BASE) ||
           (ulPort == GPIO_PORTH_BASE) || (ulPort == GPIO_PORTH_AHB_BASE) ||
           (ulPort == GPIO_PORTJ_BASE) || (ulPort == GPIO_PORTJ_AHB_BASE) ||
           (ulPort == GPIO_PORTK_BASE) || (ulPort == GPIO_PORTL_BASE) ||
           (ulPort == GPIO_PORTM_BASE) || (ulPort == GPIO_PORTN_BASE) ||
           (ulPort == GPIO_PORTP_BASE) || (ulPort == GPIO_PORTQ_BASE));
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
     6a6:	d05b      	beq.n	760 <GPIOBaseValid+0xc8>
    return((ulPort == GPIO_PORTA_BASE) || (ulPort == GPIO_PORTA_AHB_BASE) ||
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	4a32      	ldr	r2, [pc, #200]	; (774 <GPIOBaseValid+0xdc>)
     6ac:	4293      	cmp	r3, r2
     6ae:	d057      	beq.n	760 <GPIOBaseValid+0xc8>
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	4a31      	ldr	r2, [pc, #196]	; (778 <GPIOBaseValid+0xe0>)
     6b4:	4293      	cmp	r3, r2
     6b6:	d053      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTB_BASE) || (ulPort == GPIO_PORTB_AHB_BASE) ||
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	4a30      	ldr	r2, [pc, #192]	; (77c <GPIOBaseValid+0xe4>)
     6bc:	4293      	cmp	r3, r2
     6be:	d04f      	beq.n	760 <GPIOBaseValid+0xc8>
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	4a2f      	ldr	r2, [pc, #188]	; (780 <GPIOBaseValid+0xe8>)
     6c4:	4293      	cmp	r3, r2
     6c6:	d04b      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTC_BASE) || (ulPort == GPIO_PORTC_AHB_BASE) ||
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	4a2e      	ldr	r2, [pc, #184]	; (784 <GPIOBaseValid+0xec>)
     6cc:	4293      	cmp	r3, r2
     6ce:	d047      	beq.n	760 <GPIOBaseValid+0xc8>
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	4a2d      	ldr	r2, [pc, #180]	; (788 <GPIOBaseValid+0xf0>)
     6d4:	4293      	cmp	r3, r2
     6d6:	d043      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTD_BASE) || (ulPort == GPIO_PORTD_AHB_BASE) ||
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	4a2c      	ldr	r2, [pc, #176]	; (78c <GPIOBaseValid+0xf4>)
     6dc:	4293      	cmp	r3, r2
     6de:	d03f      	beq.n	760 <GPIOBaseValid+0xc8>
     6e0:	687b      	ldr	r3, [r7, #4]
     6e2:	4a2b      	ldr	r2, [pc, #172]	; (790 <GPIOBaseValid+0xf8>)
     6e4:	4293      	cmp	r3, r2
     6e6:	d03b      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTE_BASE) || (ulPort == GPIO_PORTE_AHB_BASE) ||
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	4a2a      	ldr	r2, [pc, #168]	; (794 <GPIOBaseValid+0xfc>)
     6ec:	4293      	cmp	r3, r2
     6ee:	d037      	beq.n	760 <GPIOBaseValid+0xc8>
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	4a29      	ldr	r2, [pc, #164]	; (798 <GPIOBaseValid+0x100>)
     6f4:	4293      	cmp	r3, r2
     6f6:	d033      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTF_BASE) || (ulPort == GPIO_PORTF_AHB_BASE) ||
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	4a28      	ldr	r2, [pc, #160]	; (79c <GPIOBaseValid+0x104>)
     6fc:	4293      	cmp	r3, r2
     6fe:	d02f      	beq.n	760 <GPIOBaseValid+0xc8>
     700:	687b      	ldr	r3, [r7, #4]
     702:	4a27      	ldr	r2, [pc, #156]	; (7a0 <GPIOBaseValid+0x108>)
     704:	4293      	cmp	r3, r2
     706:	d02b      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTG_BASE) || (ulPort == GPIO_PORTG_AHB_BASE) ||
     708:	687b      	ldr	r3, [r7, #4]
     70a:	4a26      	ldr	r2, [pc, #152]	; (7a4 <GPIOBaseValid+0x10c>)
     70c:	4293      	cmp	r3, r2
     70e:	d027      	beq.n	760 <GPIOBaseValid+0xc8>
     710:	687b      	ldr	r3, [r7, #4]
     712:	4a25      	ldr	r2, [pc, #148]	; (7a8 <GPIOBaseValid+0x110>)
     714:	4293      	cmp	r3, r2
     716:	d023      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTH_BASE) || (ulPort == GPIO_PORTH_AHB_BASE) ||
     718:	687b      	ldr	r3, [r7, #4]
     71a:	4a24      	ldr	r2, [pc, #144]	; (7ac <GPIOBaseValid+0x114>)
     71c:	4293      	cmp	r3, r2
     71e:	d01f      	beq.n	760 <GPIOBaseValid+0xc8>
     720:	687b      	ldr	r3, [r7, #4]
     722:	4a23      	ldr	r2, [pc, #140]	; (7b0 <GPIOBaseValid+0x118>)
     724:	4293      	cmp	r3, r2
     726:	d01b      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTJ_BASE) || (ulPort == GPIO_PORTJ_AHB_BASE) ||
     728:	687b      	ldr	r3, [r7, #4]
     72a:	4a22      	ldr	r2, [pc, #136]	; (7b4 <GPIOBaseValid+0x11c>)
     72c:	4293      	cmp	r3, r2
     72e:	d017      	beq.n	760 <GPIOBaseValid+0xc8>
     730:	687b      	ldr	r3, [r7, #4]
     732:	4a21      	ldr	r2, [pc, #132]	; (7b8 <GPIOBaseValid+0x120>)
     734:	4293      	cmp	r3, r2
     736:	d013      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTK_BASE) || (ulPort == GPIO_PORTL_BASE) ||
     738:	687b      	ldr	r3, [r7, #4]
     73a:	4a20      	ldr	r2, [pc, #128]	; (7bc <GPIOBaseValid+0x124>)
     73c:	4293      	cmp	r3, r2
     73e:	d00f      	beq.n	760 <GPIOBaseValid+0xc8>
     740:	687b      	ldr	r3, [r7, #4]
     742:	4a1f      	ldr	r2, [pc, #124]	; (7c0 <GPIOBaseValid+0x128>)
     744:	4293      	cmp	r3, r2
     746:	d00b      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTM_BASE) || (ulPort == GPIO_PORTN_BASE) ||
     748:	687b      	ldr	r3, [r7, #4]
     74a:	4a1e      	ldr	r2, [pc, #120]	; (7c4 <GPIOBaseValid+0x12c>)
     74c:	4293      	cmp	r3, r2
     74e:	d007      	beq.n	760 <GPIOBaseValid+0xc8>
     750:	687b      	ldr	r3, [r7, #4]
     752:	4a1d      	ldr	r2, [pc, #116]	; (7c8 <GPIOBaseValid+0x130>)
     754:	4293      	cmp	r3, r2
     756:	d003      	beq.n	760 <GPIOBaseValid+0xc8>
           (ulPort == GPIO_PORTP_BASE) || (ulPort == GPIO_PORTQ_BASE));
     758:	687b      	ldr	r3, [r7, #4]
     75a:	4a1c      	ldr	r2, [pc, #112]	; (7cc <GPIOBaseValid+0x134>)
     75c:	4293      	cmp	r3, r2
     75e:	d101      	bne.n	764 <GPIOBaseValid+0xcc>
     760:	2301      	movs	r3, #1
     762:	e000      	b.n	766 <GPIOBaseValid+0xce>
     764:	2300      	movs	r3, #0
     766:	b2db      	uxtb	r3, r3
}
     768:	4618      	mov	r0, r3
     76a:	370c      	adds	r7, #12
     76c:	46bd      	mov	sp, r7
     76e:	f85d 7b04 	ldr.w	r7, [sp], #4
     772:	4770      	bx	lr
     774:	40058000 	.word	0x40058000
     778:	40005000 	.word	0x40005000
     77c:	40059000 	.word	0x40059000
     780:	40006000 	.word	0x40006000
     784:	4005a000 	.word	0x4005a000
     788:	40007000 	.word	0x40007000
     78c:	4005b000 	.word	0x4005b000
     790:	40024000 	.word	0x40024000
     794:	4005c000 	.word	0x4005c000
     798:	40025000 	.word	0x40025000
     79c:	4005d000 	.word	0x4005d000
     7a0:	40026000 	.word	0x40026000
     7a4:	4005e000 	.word	0x4005e000
     7a8:	40027000 	.word	0x40027000
     7ac:	4005f000 	.word	0x4005f000
     7b0:	4003d000 	.word	0x4003d000
     7b4:	40060000 	.word	0x40060000
     7b8:	40061000 	.word	0x40061000
     7bc:	40062000 	.word	0x40062000
     7c0:	40063000 	.word	0x40063000
     7c4:	40064000 	.word	0x40064000
     7c8:	40065000 	.word	0x40065000
     7cc:	40066000 	.word	0x40066000

000007d0 <GPIOPinWrite>:
//! \return None.
//
//*****************************************************************************
void
GPIOPinWrite(unsigned long ulPort, unsigned char ucPins, unsigned char ucVal)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b082      	sub	sp, #8
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
     7d8:	460b      	mov	r3, r1
     7da:	70fb      	strb	r3, [r7, #3]
     7dc:	4613      	mov	r3, r2
     7de:	70bb      	strb	r3, [r7, #2]
    //
    // Check the arguments.
    //
    ASSERT(GPIOBaseValid(ulPort));
     7e0:	6878      	ldr	r0, [r7, #4]
     7e2:	f7ff ff59 	bl	698 <GPIOBaseValid>
     7e6:	4603      	mov	r3, r0
     7e8:	2b00      	cmp	r3, #0
     7ea:	d104      	bne.n	7f6 <GPIOPinWrite+0x26>
     7ec:	f240 3189 	movw	r1, #905	; 0x389
     7f0:	4807      	ldr	r0, [pc, #28]	; (810 <GPIOPinWrite+0x40>)
     7f2:	f7ff fd9b 	bl	32c <__error__>

    //
    // Write the pins.
    //
    HWREG(ulPort + (GPIO_O_DATA + (ucPins << 2))) = ucVal;
     7f6:	78fb      	ldrb	r3, [r7, #3]
     7f8:	009b      	lsls	r3, r3, #2
     7fa:	461a      	mov	r2, r3
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	4413      	add	r3, r2
     800:	461a      	mov	r2, r3
     802:	78bb      	ldrb	r3, [r7, #2]
     804:	6013      	str	r3, [r2, #0]
}
     806:	bf00      	nop
     808:	3708      	adds	r7, #8
     80a:	46bd      	mov	sp, r7
     80c:	bd80      	pop	{r7, pc}
     80e:	bf00      	nop
     810:	00003b18 	.word	0x00003b18

00000814 <GPIOPinConfigure>:
//! \return None.
//
//*****************************************************************************
void
GPIOPinConfigure(unsigned long ulPinConfig)
{
     814:	b580      	push	{r7, lr}
     816:	b084      	sub	sp, #16
     818:	af00      	add	r7, sp, #0
     81a:	6078      	str	r0, [r7, #4]
    unsigned long ulBase, ulShift;

    //
    // Check the argument.
    //
    ASSERT(((ulPinConfig >> 16) & 0xff) < 15);
     81c:	687b      	ldr	r3, [r7, #4]
     81e:	0c1b      	lsrs	r3, r3, #16
     820:	b2db      	uxtb	r3, r3
     822:	2b0e      	cmp	r3, #14
     824:	d904      	bls.n	830 <GPIOPinConfigure+0x1c>
     826:	f240 7175 	movw	r1, #1909	; 0x775
     82a:	4823      	ldr	r0, [pc, #140]	; (8b8 <GPIOPinConfigure+0xa4>)
     82c:	f7ff fd7e 	bl	32c <__error__>
    ASSERT(((ulPinConfig >> 8) & 0xe3) == 0);
     830:	687b      	ldr	r3, [r7, #4]
     832:	0a1b      	lsrs	r3, r3, #8
     834:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
     838:	2b00      	cmp	r3, #0
     83a:	d004      	beq.n	846 <GPIOPinConfigure+0x32>
     83c:	f240 7176 	movw	r1, #1910	; 0x776
     840:	481d      	ldr	r0, [pc, #116]	; (8b8 <GPIOPinConfigure+0xa4>)
     842:	f7ff fd73 	bl	32c <__error__>

    //
    // Extract the base address index from the input value.
    //
    ulBase = (ulPinConfig >> 16) & 0xff;
     846:	687b      	ldr	r3, [r7, #4]
     848:	0c1b      	lsrs	r3, r3, #16
     84a:	b2db      	uxtb	r3, r3
     84c:	60fb      	str	r3, [r7, #12]

    //
    // Get the base address of the GPIO module, selecting either the APB or the
    // AHB aperture as appropriate.
    //
    if(HWREG(SYSCTL_GPIOHBCTL) & (1 << ulBase))
     84e:	4b1b      	ldr	r3, [pc, #108]	; (8bc <GPIOPinConfigure+0xa8>)
     850:	681b      	ldr	r3, [r3, #0]
     852:	2101      	movs	r1, #1
     854:	68fa      	ldr	r2, [r7, #12]
     856:	fa01 f202 	lsl.w	r2, r1, r2
     85a:	4013      	ands	r3, r2
     85c:	2b00      	cmp	r3, #0
     85e:	d007      	beq.n	870 <GPIOPinConfigure+0x5c>
    {
        ulBase = g_pulGPIOBaseAddrs[(ulBase << 1) + 1];
     860:	68fb      	ldr	r3, [r7, #12]
     862:	005b      	lsls	r3, r3, #1
     864:	3301      	adds	r3, #1
     866:	4a16      	ldr	r2, [pc, #88]	; (8c0 <GPIOPinConfigure+0xac>)
     868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     86c:	60fb      	str	r3, [r7, #12]
     86e:	e005      	b.n	87c <GPIOPinConfigure+0x68>
    }
    else
    {
        ulBase = g_pulGPIOBaseAddrs[ulBase << 1];
     870:	68fb      	ldr	r3, [r7, #12]
     872:	005b      	lsls	r3, r3, #1
     874:	4a12      	ldr	r2, [pc, #72]	; (8c0 <GPIOPinConfigure+0xac>)
     876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     87a:	60fb      	str	r3, [r7, #12]
    }

    //
    // Extract the shift from the input value.
    //
    ulShift = (ulPinConfig >> 8) & 0xff;
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	0a1b      	lsrs	r3, r3, #8
     880:	b2db      	uxtb	r3, r3
     882:	60bb      	str	r3, [r7, #8]

    //
    // Write the requested pin muxing value for this GPIO pin.
    //
    HWREG(ulBase + GPIO_O_PCTL) = ((HWREG(ulBase + GPIO_O_PCTL) &
     884:	68fb      	ldr	r3, [r7, #12]
     886:	f203 532c 	addw	r3, r3, #1324	; 0x52c
     88a:	681b      	ldr	r3, [r3, #0]
                                    ~(0xf << ulShift)) |
     88c:	210f      	movs	r1, #15
     88e:	68ba      	ldr	r2, [r7, #8]
     890:	fa01 f202 	lsl.w	r2, r1, r2
     894:	43d2      	mvns	r2, r2
    HWREG(ulBase + GPIO_O_PCTL) = ((HWREG(ulBase + GPIO_O_PCTL) &
     896:	401a      	ands	r2, r3
                                   ((ulPinConfig & 0xf) << ulShift));
     898:	687b      	ldr	r3, [r7, #4]
     89a:	f003 010f 	and.w	r1, r3, #15
     89e:	68bb      	ldr	r3, [r7, #8]
     8a0:	fa01 f303 	lsl.w	r3, r1, r3
    HWREG(ulBase + GPIO_O_PCTL) = ((HWREG(ulBase + GPIO_O_PCTL) &
     8a4:	68f9      	ldr	r1, [r7, #12]
     8a6:	f201 512c 	addw	r1, r1, #1324	; 0x52c
                                    ~(0xf << ulShift)) |
     8aa:	4313      	orrs	r3, r2
    HWREG(ulBase + GPIO_O_PCTL) = ((HWREG(ulBase + GPIO_O_PCTL) &
     8ac:	600b      	str	r3, [r1, #0]
}
     8ae:	bf00      	nop
     8b0:	3710      	adds	r7, #16
     8b2:	46bd      	mov	sp, r7
     8b4:	bd80      	pop	{r7, pc}
     8b6:	bf00      	nop
     8b8:	00003b18 	.word	0x00003b18
     8bc:	400fe06c 	.word	0x400fe06c
     8c0:	00003aa0 	.word	0x00003aa0

000008c4 <SysCtlDelay>:
#endif
#if defined(codered) || defined(gcc) || defined(sourcerygxx)
void __attribute__((naked))
SysCtlDelay(unsigned long ulCount)
{
    __asm("    subs    r0, #1\n"
     8c4:	3801      	subs	r0, #1
     8c6:	f47f affd 	bne.w	8c4 <SysCtlDelay>
     8ca:	4770      	bx	lr
          "    bne     SysCtlDelay\n"
          "    bx      lr");
}
     8cc:	bf00      	nop
	...

000008d0 <SysCtlClockGet>:
//! \return The processor clock rate.
//
//*****************************************************************************
unsigned long
SysCtlClockGet(void)
{
     8d0:	b480      	push	{r7}
     8d2:	b087      	sub	sp, #28
     8d4:	af00      	add	r7, sp, #0
    //
    // Read RCC and RCC2.  For Sandstorm-class devices (which do not have
    // RCC2), the RCC2 read returns 0, indicating that RCC2 is
    // disabled (because the SYSCTL_RCC2_USERCC2 bit is clear).
    //
    ulRCC = HWREG(SYSCTL_RCC);
     8d6:	4b7e      	ldr	r3, [pc, #504]	; (ad0 <SysCtlClockGet+0x200>)
     8d8:	681b      	ldr	r3, [r3, #0]
     8da:	617b      	str	r3, [r7, #20]
    ulRCC2 = HWREG(SYSCTL_RCC2);
     8dc:	4b7d      	ldr	r3, [pc, #500]	; (ad4 <SysCtlClockGet+0x204>)
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	60fb      	str	r3, [r7, #12]

    //
    // Get the base clock rate.
    //
    switch((ulRCC2 & SYSCTL_RCC2_USERCC2) ?
     8e2:	68fb      	ldr	r3, [r7, #12]
           (ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) :
     8e4:	2b00      	cmp	r3, #0
     8e6:	da03      	bge.n	8f0 <SysCtlClockGet+0x20>
     8e8:	68fb      	ldr	r3, [r7, #12]
     8ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
     8ee:	e002      	b.n	8f6 <SysCtlClockGet+0x26>
     8f0:	697b      	ldr	r3, [r7, #20]
     8f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
    switch((ulRCC2 & SYSCTL_RCC2_USERCC2) ?
     8f6:	2b70      	cmp	r3, #112	; 0x70
     8f8:	f000 8083 	beq.w	a02 <SysCtlClockGet+0x132>
     8fc:	2b70      	cmp	r3, #112	; 0x70
     8fe:	f200 8084 	bhi.w	a0a <SysCtlClockGet+0x13a>
     902:	2b60      	cmp	r3, #96	; 0x60
     904:	d079      	beq.n	9fa <SysCtlClockGet+0x12a>
     906:	2b60      	cmp	r3, #96	; 0x60
     908:	d87f      	bhi.n	a0a <SysCtlClockGet+0x13a>
     90a:	2b30      	cmp	r3, #48	; 0x30
     90c:	d071      	beq.n	9f2 <SysCtlClockGet+0x122>
     90e:	2b30      	cmp	r3, #48	; 0x30
     910:	d87b      	bhi.n	a0a <SysCtlClockGet+0x13a>
     912:	2b20      	cmp	r3, #32
     914:	d03e      	beq.n	994 <SysCtlClockGet+0xc4>
     916:	2b20      	cmp	r3, #32
     918:	d877      	bhi.n	a0a <SysCtlClockGet+0x13a>
     91a:	2b00      	cmp	r3, #0
     91c:	d002      	beq.n	924 <SysCtlClockGet+0x54>
     91e:	2b10      	cmp	r3, #16
     920:	d009      	beq.n	936 <SysCtlClockGet+0x66>
     922:	e072      	b.n	a0a <SysCtlClockGet+0x13a>
        // The main oscillator is the clock source.  Determine its rate from
        // the crystal setting field.
        //
        case SYSCTL_RCC_OSCSRC_MAIN:
        {
            ulClk = g_pulXtals[(ulRCC & SYSCTL_RCC_XTAL_M) >>
     924:	697b      	ldr	r3, [r7, #20]
     926:	099b      	lsrs	r3, r3, #6
     928:	f003 031f 	and.w	r3, r3, #31
     92c:	4a6a      	ldr	r2, [pc, #424]	; (ad8 <SysCtlClockGet+0x208>)
     92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     932:	613b      	str	r3, [r7, #16]
                               SYSCTL_RCC_XTAL_S];
            break;
     934:	e06b      	b.n	a0e <SysCtlClockGet+0x13e>
        case SYSCTL_RCC_OSCSRC_INT:
        {
            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
     936:	4b69      	ldr	r3, [pc, #420]	; (adc <SysCtlClockGet+0x20c>)
     938:	681b      	ldr	r3, [r3, #0]
     93a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     93e:	2b00      	cmp	r3, #0
     940:	d006      	beq.n	950 <SysCtlClockGet+0x80>
     942:	4b66      	ldr	r3, [pc, #408]	; (adc <SysCtlClockGet+0x20c>)
     944:	681a      	ldr	r2, [r3, #0]
     946:	4b66      	ldr	r3, [pc, #408]	; (ae0 <SysCtlClockGet+0x210>)
     948:	4013      	ands	r3, r2
     94a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     94e:	d102      	bne.n	956 <SysCtlClockGet+0x86>
            {
                //
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000;
     950:	4b64      	ldr	r3, [pc, #400]	; (ae4 <SysCtlClockGet+0x214>)
     952:	613b      	str	r3, [r7, #16]
     954:	e01d      	b.n	992 <SysCtlClockGet+0xc2>
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
     956:	4b61      	ldr	r3, [pc, #388]	; (adc <SysCtlClockGet+0x20c>)
     958:	681a      	ldr	r2, [r3, #0]
     95a:	4b61      	ldr	r3, [pc, #388]	; (ae0 <SysCtlClockGet+0x210>)
     95c:	4013      	ands	r3, r2
     95e:	4a62      	ldr	r2, [pc, #392]	; (ae8 <SysCtlClockGet+0x218>)
     960:	4293      	cmp	r3, r2
     962:	d104      	bne.n	96e <SysCtlClockGet+0x9e>
     964:	4b5d      	ldr	r3, [pc, #372]	; (adc <SysCtlClockGet+0x20c>)
     966:	681b      	ldr	r3, [r3, #0]
     968:	b29b      	uxth	r3, r3
     96a:	2b02      	cmp	r3, #2
     96c:	d00b      	beq.n	986 <SysCtlClockGet+0xb6>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
     96e:	4b5b      	ldr	r3, [pc, #364]	; (adc <SysCtlClockGet+0x20c>)
     970:	681a      	ldr	r2, [r3, #0]
     972:	4b5b      	ldr	r3, [pc, #364]	; (ae0 <SysCtlClockGet+0x210>)
     974:	4013      	ands	r3, r2
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
     976:	4a5d      	ldr	r2, [pc, #372]	; (aec <SysCtlClockGet+0x21c>)
     978:	4293      	cmp	r3, r2
     97a:	d107      	bne.n	98c <SysCtlClockGet+0xbc>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
     97c:	4b57      	ldr	r3, [pc, #348]	; (adc <SysCtlClockGet+0x20c>)
     97e:	681b      	ldr	r3, [r3, #0]
     980:	b29b      	uxth	r3, r3
     982:	2b00      	cmp	r3, #0
     984:	d102      	bne.n	98c <SysCtlClockGet+0xbc>
            {
                //
                // The internal oscillator on a rev A2 Fury-class device and a
                // Dustdevil-class device is 12 MHz +/- 30%.
                //
                ulClk = 12000000;
     986:	4b5a      	ldr	r3, [pc, #360]	; (af0 <SysCtlClockGet+0x220>)
     988:	613b      	str	r3, [r7, #16]
     98a:	e002      	b.n	992 <SysCtlClockGet+0xc2>
            else
            {
                //
                // The internal oscillator on all other devices is 16 MHz.
                //
                ulClk = 16000000;
     98c:	4b59      	ldr	r3, [pc, #356]	; (af4 <SysCtlClockGet+0x224>)
     98e:	613b      	str	r3, [r7, #16]
            }
            break;
     990:	e03d      	b.n	a0e <SysCtlClockGet+0x13e>
     992:	e03c      	b.n	a0e <SysCtlClockGet+0x13e>
        case SYSCTL_RCC_OSCSRC_INT4:
        {
            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
     994:	4b51      	ldr	r3, [pc, #324]	; (adc <SysCtlClockGet+0x20c>)
     996:	681b      	ldr	r3, [r3, #0]
     998:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     99c:	2b00      	cmp	r3, #0
     99e:	d006      	beq.n	9ae <SysCtlClockGet+0xde>
     9a0:	4b4e      	ldr	r3, [pc, #312]	; (adc <SysCtlClockGet+0x20c>)
     9a2:	681a      	ldr	r2, [r3, #0]
     9a4:	4b4e      	ldr	r3, [pc, #312]	; (ae0 <SysCtlClockGet+0x210>)
     9a6:	4013      	ands	r3, r2
     9a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     9ac:	d102      	bne.n	9b4 <SysCtlClockGet+0xe4>
            {
                //
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000 / 4;
     9ae:	4b52      	ldr	r3, [pc, #328]	; (af8 <SysCtlClockGet+0x228>)
     9b0:	613b      	str	r3, [r7, #16]
     9b2:	e01d      	b.n	9f0 <SysCtlClockGet+0x120>
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
     9b4:	4b49      	ldr	r3, [pc, #292]	; (adc <SysCtlClockGet+0x20c>)
     9b6:	681a      	ldr	r2, [r3, #0]
     9b8:	4b49      	ldr	r3, [pc, #292]	; (ae0 <SysCtlClockGet+0x210>)
     9ba:	4013      	ands	r3, r2
     9bc:	4a4a      	ldr	r2, [pc, #296]	; (ae8 <SysCtlClockGet+0x218>)
     9be:	4293      	cmp	r3, r2
     9c0:	d104      	bne.n	9cc <SysCtlClockGet+0xfc>
     9c2:	4b46      	ldr	r3, [pc, #280]	; (adc <SysCtlClockGet+0x20c>)
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	b29b      	uxth	r3, r3
     9c8:	2b02      	cmp	r3, #2
     9ca:	d00b      	beq.n	9e4 <SysCtlClockGet+0x114>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
     9cc:	4b43      	ldr	r3, [pc, #268]	; (adc <SysCtlClockGet+0x20c>)
     9ce:	681a      	ldr	r2, [r3, #0]
     9d0:	4b43      	ldr	r3, [pc, #268]	; (ae0 <SysCtlClockGet+0x210>)
     9d2:	4013      	ands	r3, r2
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
     9d4:	4a45      	ldr	r2, [pc, #276]	; (aec <SysCtlClockGet+0x21c>)
     9d6:	4293      	cmp	r3, r2
     9d8:	d107      	bne.n	9ea <SysCtlClockGet+0x11a>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
     9da:	4b40      	ldr	r3, [pc, #256]	; (adc <SysCtlClockGet+0x20c>)
     9dc:	681b      	ldr	r3, [r3, #0]
     9de:	b29b      	uxth	r3, r3
     9e0:	2b00      	cmp	r3, #0
     9e2:	d102      	bne.n	9ea <SysCtlClockGet+0x11a>
            {
                //
                // The internal oscillator on a rev A2 Fury-class device and a
                // Dustdevil-class device is 12 MHz +/- 30%.
                //
                ulClk = 12000000 / 4;
     9e4:	4b45      	ldr	r3, [pc, #276]	; (afc <SysCtlClockGet+0x22c>)
     9e6:	613b      	str	r3, [r7, #16]
     9e8:	e002      	b.n	9f0 <SysCtlClockGet+0x120>
            else
            {
                //
                // The internal oscillator on a Tempest-class device is 16 MHz.
                //
                ulClk = 16000000 / 4;
     9ea:	4b45      	ldr	r3, [pc, #276]	; (b00 <SysCtlClockGet+0x230>)
     9ec:	613b      	str	r3, [r7, #16]
            }
            break;
     9ee:	e00e      	b.n	a0e <SysCtlClockGet+0x13e>
     9f0:	e00d      	b.n	a0e <SysCtlClockGet+0x13e>
        case SYSCTL_RCC_OSCSRC_30:
        {
            //
            // The internal 30-KHz oscillator has an accuracy of +/- 30%.
            //
            ulClk = 30000;
     9f2:	f247 5330 	movw	r3, #30000	; 0x7530
     9f6:	613b      	str	r3, [r7, #16]
            break;
     9f8:	e009      	b.n	a0e <SysCtlClockGet+0x13e>
        // The 4.194304-MHz clock from the hibernate module is the clock
        // source.
        //
        case SYSCTL_RCC2_OSCSRC2_419:
        {
            ulClk = 4194304;
     9fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
     9fe:	613b      	str	r3, [r7, #16]
            break;
     a00:	e005      	b.n	a0e <SysCtlClockGet+0x13e>
        //
        // The 32.768-KHz clock from the hibernate module is the source clock.
        //
        case SYSCTL_RCC2_OSCSRC2_32:
        {
            ulClk = 32768;
     a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     a06:	613b      	str	r3, [r7, #16]
            break;
     a08:	e001      	b.n	a0e <SysCtlClockGet+0x13e>
        // An unknown setting, so return a zero clock (that is, an unknown
        // clock rate).
        //
        default:
        {
            return(0);
     a0a:	2300      	movs	r3, #0
     a0c:	e0e1      	b.n	bd2 <SysCtlClockGet+0x302>
    }

    //
    // See if the PLL is being used.
    //
    if(((ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
     a0e:	68fb      	ldr	r3, [r7, #12]
     a10:	2b00      	cmp	r3, #0
     a12:	da04      	bge.n	a1e <SysCtlClockGet+0x14e>
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
     a1a:	2b00      	cmp	r3, #0
     a1c:	d009      	beq.n	a32 <SysCtlClockGet+0x162>
       (!(ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC & SYSCTL_RCC_BYPASS)))
     a1e:	68fb      	ldr	r3, [r7, #12]
    if(((ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
     a20:	2b00      	cmp	r3, #0
     a22:	f2c0 809a 	blt.w	b5a <SysCtlClockGet+0x28a>
       (!(ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC & SYSCTL_RCC_BYPASS)))
     a26:	697b      	ldr	r3, [r7, #20]
     a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
     a2c:	2b00      	cmp	r3, #0
     a2e:	f040 8094 	bne.w	b5a <SysCtlClockGet+0x28a>
    {
        //
        // See if this is a Blizzard-class device.
        //
        if(CLASS_IS_BLIZZARD)
     a32:	4b2a      	ldr	r3, [pc, #168]	; (adc <SysCtlClockGet+0x20c>)
     a34:	681a      	ldr	r2, [r3, #0]
     a36:	4b2a      	ldr	r3, [pc, #168]	; (ae0 <SysCtlClockGet+0x210>)
     a38:	4013      	ands	r3, r2
     a3a:	4a32      	ldr	r2, [pc, #200]	; (b04 <SysCtlClockGet+0x234>)
     a3c:	4293      	cmp	r3, r2
     a3e:	d126      	bne.n	a8e <SysCtlClockGet+0x1be>
        {
            //
            // Read the two PLL frequency registers.  The formula for a
            // Blizzard-class device is "(xtal * m) / ((q + 1) * (n + 1))".
            //
            ulPLL = HWREG(SYSCTL_PLLFREQ0);
     a40:	4b31      	ldr	r3, [pc, #196]	; (b08 <SysCtlClockGet+0x238>)
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	60bb      	str	r3, [r7, #8]
            ulPLL1 = HWREG(SYSCTL_PLLFREQ1);
     a46:	4b31      	ldr	r3, [pc, #196]	; (b0c <SysCtlClockGet+0x23c>)
     a48:	681b      	ldr	r3, [r3, #0]
     a4a:	607b      	str	r3, [r7, #4]

            //
            // Divide the input clock by the dividers.
            //
            ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	0a1b      	lsrs	r3, r3, #8
     a50:	f003 031f 	and.w	r3, r3, #31
                        SYSCTL_PLLFREQ1_Q_S) + 1) *
     a54:	3301      	adds	r3, #1
                      (((ulPLL1 & SYSCTL_PLLFREQ1_N_M) >>
     a56:	687a      	ldr	r2, [r7, #4]
     a58:	f002 021f 	and.w	r2, r2, #31
                        SYSCTL_PLLFREQ1_N_S) + 1) * 2);
     a5c:	3201      	adds	r2, #1
                        SYSCTL_PLLFREQ1_Q_S) + 1) *
     a5e:	fb02 f303 	mul.w	r3, r2, r3
                        SYSCTL_PLLFREQ1_N_S) + 1) * 2);
     a62:	005b      	lsls	r3, r3, #1
            ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
     a64:	693a      	ldr	r2, [r7, #16]
     a66:	fbb2 f3f3 	udiv	r3, r2, r3
     a6a:	613b      	str	r3, [r7, #16]

            //
            // Multiply the clock by the multiplier, which is split into an
            // integer part and a fractional part.
            //
            ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MINT_M) >>
     a6c:	68bb      	ldr	r3, [r7, #8]
     a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
     a72:	693a      	ldr	r2, [r7, #16]
     a74:	fb03 f202 	mul.w	r2, r3, r2
                               SYSCTL_PLLFREQ0_MINT_S)) +
                     ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MFRAC_M) >>
     a78:	68bb      	ldr	r3, [r7, #8]
     a7a:	0a9b      	lsrs	r3, r3, #10
     a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
     a80:	6939      	ldr	r1, [r7, #16]
     a82:	fb01 f303 	mul.w	r3, r1, r3
                                SYSCTL_PLLFREQ0_MFRAC_S)) >> 10));
     a86:	0a9b      	lsrs	r3, r3, #10
            ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MINT_M) >>
     a88:	4413      	add	r3, r2
     a8a:	613b      	str	r3, [r7, #16]
     a8c:	e061      	b.n	b52 <SysCtlClockGet+0x282>
        else
        {
            //
            // Get the PLL configuration.
            //
            ulPLL = HWREG(SYSCTL_PLLCFG);
     a8e:	4b20      	ldr	r3, [pc, #128]	; (b10 <SysCtlClockGet+0x240>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	60bb      	str	r3, [r7, #8]

            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
     a94:	4b11      	ldr	r3, [pc, #68]	; (adc <SysCtlClockGet+0x20c>)
     a96:	681b      	ldr	r3, [r3, #0]
     a98:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     a9c:	2b00      	cmp	r3, #0
     a9e:	d006      	beq.n	aae <SysCtlClockGet+0x1de>
     aa0:	4b0e      	ldr	r3, [pc, #56]	; (adc <SysCtlClockGet+0x20c>)
     aa2:	681a      	ldr	r2, [r3, #0]
     aa4:	4b0e      	ldr	r3, [pc, #56]	; (ae0 <SysCtlClockGet+0x210>)
     aa6:	4013      	ands	r3, r2
     aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     aac:	d132      	bne.n	b14 <SysCtlClockGet+0x244>
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Sandstorm-class devices is
                // "(xtal * (f + 2)) / (r + 2)".
                //
                ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
     aae:	68bb      	ldr	r3, [r7, #8]
     ab0:	095b      	lsrs	r3, r3, #5
     ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
                                    SYSCTL_PLLCFG_F_S) + 2)) /
     ab6:	3302      	adds	r3, #2
                ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
     ab8:	693a      	ldr	r2, [r7, #16]
     aba:	fb03 f202 	mul.w	r2, r3, r2
                         (((ulPLL & SYSCTL_PLLCFG_R_M) >>
     abe:	68bb      	ldr	r3, [r7, #8]
     ac0:	f003 031f 	and.w	r3, r3, #31
                           SYSCTL_PLLCFG_R_S) + 2));
     ac4:	3302      	adds	r3, #2
                ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
     ac6:	fbb2 f3f3 	udiv	r3, r2, r3
     aca:	613b      	str	r3, [r7, #16]
     acc:	e031      	b.n	b32 <SysCtlClockGet+0x262>
     ace:	bf00      	nop
     ad0:	400fe060 	.word	0x400fe060
     ad4:	400fe070 	.word	0x400fe070
     ad8:	00003b78 	.word	0x00003b78
     adc:	400fe000 	.word	0x400fe000
     ae0:	70ff0000 	.word	0x70ff0000
     ae4:	00e4e1c0 	.word	0x00e4e1c0
     ae8:	10010000 	.word	0x10010000
     aec:	10030000 	.word	0x10030000
     af0:	00b71b00 	.word	0x00b71b00
     af4:	00f42400 	.word	0x00f42400
     af8:	00393870 	.word	0x00393870
     afc:	002dc6c0 	.word	0x002dc6c0
     b00:	003d0900 	.word	0x003d0900
     b04:	10050000 	.word	0x10050000
     b08:	400fe160 	.word	0x400fe160
     b0c:	400fe164 	.word	0x400fe164
     b10:	400fe064 	.word	0x400fe064
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Fury-class device is
                // "(xtal * f) / ((r + 1) * 2)".
                //
                ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
     b14:	68bb      	ldr	r3, [r7, #8]
     b16:	095b      	lsrs	r3, r3, #5
     b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
     b1c:	693a      	ldr	r2, [r7, #16]
     b1e:	fb03 f202 	mul.w	r2, r3, r2
                                   SYSCTL_PLLCFG_F_S)) /
                         ((((ulPLL & SYSCTL_PLLCFG_R_M) >>
     b22:	68bb      	ldr	r3, [r7, #8]
     b24:	f003 031f 	and.w	r3, r3, #31
                            SYSCTL_PLLCFG_R_S) + 1) * 2));
     b28:	3301      	adds	r3, #1
     b2a:	005b      	lsls	r3, r3, #1
                ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
     b2c:	fbb2 f3f3 	udiv	r3, r2, r3
     b30:	613b      	str	r3, [r7, #16]
            }

            //
            // See if the optional output divide by 2 is being used.
            //
            if(ulPLL & SYSCTL_PLLCFG_OD_2)
     b32:	68bb      	ldr	r3, [r7, #8]
     b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
     b38:	2b00      	cmp	r3, #0
     b3a:	d002      	beq.n	b42 <SysCtlClockGet+0x272>
            {
                ulClk /= 2;
     b3c:	693b      	ldr	r3, [r7, #16]
     b3e:	085b      	lsrs	r3, r3, #1
     b40:	613b      	str	r3, [r7, #16]
            }

            //
            // See if the optional output divide by 4 is being used.
            //
            if(ulPLL & SYSCTL_PLLCFG_OD_4)
     b42:	68bb      	ldr	r3, [r7, #8]
     b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     b48:	2b00      	cmp	r3, #0
     b4a:	d002      	beq.n	b52 <SysCtlClockGet+0x282>
            {
                ulClk /= 4;
     b4c:	693b      	ldr	r3, [r7, #16]
     b4e:	089b      	lsrs	r3, r3, #2
     b50:	613b      	str	r3, [r7, #16]

        //
        // Force the system divider to be enabled.  It is always used when
        // using the PLL, but in some cases it does not read as being enabled.
        //
        ulRCC |= SYSCTL_RCC_USESYSDIV;
     b52:	697b      	ldr	r3, [r7, #20]
     b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     b58:	617b      	str	r3, [r7, #20]
    }

    //
    // See if the system divider is being used.
    //
    if(ulRCC & SYSCTL_RCC_USESYSDIV)
     b5a:	697b      	ldr	r3, [r7, #20]
     b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
     b60:	2b00      	cmp	r3, #0
     b62:	d035      	beq.n	bd0 <SysCtlClockGet+0x300>
    {
        //
        // Adjust the clock rate by the system clock divider.
        //
        if(ulRCC2 & SYSCTL_RCC2_USERCC2)
     b64:	68fb      	ldr	r3, [r7, #12]
     b66:	2b00      	cmp	r3, #0
     b68:	da29      	bge.n	bbe <SysCtlClockGet+0x2ee>
        {
            if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
     b6a:	68fb      	ldr	r3, [r7, #12]
     b6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
     b70:	2b00      	cmp	r3, #0
     b72:	d01a      	beq.n	baa <SysCtlClockGet+0x2da>
               (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
     b74:	68fb      	ldr	r3, [r7, #12]
            if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
     b76:	2b00      	cmp	r3, #0
     b78:	da04      	bge.n	b84 <SysCtlClockGet+0x2b4>
                 !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
     b7a:	68fb      	ldr	r3, [r7, #12]
     b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
               (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
     b80:	2b00      	cmp	r3, #0
     b82:	d007      	beq.n	b94 <SysCtlClockGet+0x2c4>
                (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
     b84:	68fb      	ldr	r3, [r7, #12]
                 !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
     b86:	2b00      	cmp	r3, #0
     b88:	db0f      	blt.n	baa <SysCtlClockGet+0x2da>
                 !(ulRCC & SYSCTL_RCC_BYPASS))))
     b8a:	697b      	ldr	r3, [r7, #20]
     b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
                (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
     b90:	2b00      	cmp	r3, #0
     b92:	d10a      	bne.n	baa <SysCtlClockGet+0x2da>

            {
                ulClk = ((ulClk * 2) / (((ulRCC2 & (SYSCTL_RCC2_SYSDIV2_M |
     b94:	693b      	ldr	r3, [r7, #16]
     b96:	005a      	lsls	r2, r3, #1
                                                    SYSCTL_RCC2_SYSDIV2LSB)) >>
     b98:	68fb      	ldr	r3, [r7, #12]
     b9a:	0d9b      	lsrs	r3, r3, #22
     b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
                                         (SYSCTL_RCC2_SYSDIV2_S - 1)) + 1));
     ba0:	3301      	adds	r3, #1
                ulClk = ((ulClk * 2) / (((ulRCC2 & (SYSCTL_RCC2_SYSDIV2_M |
     ba2:	fbb2 f3f3 	udiv	r3, r2, r3
     ba6:	613b      	str	r3, [r7, #16]
     ba8:	e012      	b.n	bd0 <SysCtlClockGet+0x300>
            }
            else
            {
                ulClk /= (((ulRCC2 & SYSCTL_RCC2_SYSDIV2_M) >>
     baa:	68fb      	ldr	r3, [r7, #12]
     bac:	0ddb      	lsrs	r3, r3, #23
     bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                           SYSCTL_RCC2_SYSDIV2_S) + 1);
     bb2:	3301      	adds	r3, #1
                ulClk /= (((ulRCC2 & SYSCTL_RCC2_SYSDIV2_M) >>
     bb4:	693a      	ldr	r2, [r7, #16]
     bb6:	fbb2 f3f3 	udiv	r3, r2, r3
     bba:	613b      	str	r3, [r7, #16]
     bbc:	e008      	b.n	bd0 <SysCtlClockGet+0x300>
            }
        }
        else
        {
            ulClk /= (((ulRCC & SYSCTL_RCC_SYSDIV_M) >> SYSCTL_RCC_SYSDIV_S) +
     bbe:	697b      	ldr	r3, [r7, #20]
     bc0:	0ddb      	lsrs	r3, r3, #23
     bc2:	f003 030f 	and.w	r3, r3, #15
     bc6:	3301      	adds	r3, #1
     bc8:	693a      	ldr	r2, [r7, #16]
     bca:	fbb2 f3f3 	udiv	r3, r2, r3
     bce:	613b      	str	r3, [r7, #16]
    }

    //
    // Return the computed clock rate.
    //
    return(ulClk);
     bd0:	693b      	ldr	r3, [r7, #16]
}
     bd2:	4618      	mov	r0, r3
     bd4:	371c      	adds	r7, #28
     bd6:	46bd      	mov	sp, r7
     bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bdc:	4770      	bx	lr
     bde:	bf00      	nop

00000be0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
     be0:	b580      	push	{r7, lr}
     be2:	b08c      	sub	sp, #48	; 0x30
     be4:	af04      	add	r7, sp, #16
     be6:	60f8      	str	r0, [r7, #12]
     be8:	60b9      	str	r1, [r7, #8]
     bea:	603b      	str	r3, [r7, #0]
     bec:	4613      	mov	r3, r2
     bee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
     bf0:	88fb      	ldrh	r3, [r7, #6]
     bf2:	009b      	lsls	r3, r3, #2
     bf4:	4618      	mov	r0, r3
     bf6:	f001 fbd3 	bl	23a0 <pvPortMalloc>
     bfa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
     bfc:	697b      	ldr	r3, [r7, #20]
     bfe:	2b00      	cmp	r3, #0
     c00:	d013      	beq.n	c2a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
     c02:	205c      	movs	r0, #92	; 0x5c
     c04:	f001 fbcc 	bl	23a0 <pvPortMalloc>
     c08:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
     c0a:	69fb      	ldr	r3, [r7, #28]
     c0c:	2b00      	cmp	r3, #0
     c0e:	d008      	beq.n	c22 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
     c10:	225c      	movs	r2, #92	; 0x5c
     c12:	2100      	movs	r1, #0
     c14:	69f8      	ldr	r0, [r7, #28]
     c16:	f7ff fced 	bl	5f4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
     c1a:	69fb      	ldr	r3, [r7, #28]
     c1c:	697a      	ldr	r2, [r7, #20]
     c1e:	631a      	str	r2, [r3, #48]	; 0x30
     c20:	e005      	b.n	c2e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
     c22:	6978      	ldr	r0, [r7, #20]
     c24:	f001 fc98 	bl	2558 <vPortFree>
     c28:	e001      	b.n	c2e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
     c2a:	2300      	movs	r3, #0
     c2c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
     c2e:	69fb      	ldr	r3, [r7, #28]
     c30:	2b00      	cmp	r3, #0
     c32:	d013      	beq.n	c5c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
     c34:	88fa      	ldrh	r2, [r7, #6]
     c36:	2300      	movs	r3, #0
     c38:	9303      	str	r3, [sp, #12]
     c3a:	69fb      	ldr	r3, [r7, #28]
     c3c:	9302      	str	r3, [sp, #8]
     c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c40:	9301      	str	r3, [sp, #4]
     c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c44:	9300      	str	r3, [sp, #0]
     c46:	683b      	ldr	r3, [r7, #0]
     c48:	68b9      	ldr	r1, [r7, #8]
     c4a:	68f8      	ldr	r0, [r7, #12]
     c4c:	f000 f80e 	bl	c6c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
     c50:	69f8      	ldr	r0, [r7, #28]
     c52:	f000 f8ab 	bl	dac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
     c56:	2301      	movs	r3, #1
     c58:	61bb      	str	r3, [r7, #24]
     c5a:	e002      	b.n	c62 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     c60:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
     c62:	69bb      	ldr	r3, [r7, #24]
    }
     c64:	4618      	mov	r0, r3
     c66:	3720      	adds	r7, #32
     c68:	46bd      	mov	sp, r7
     c6a:	bd80      	pop	{r7, pc}

00000c6c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
     c6c:	b580      	push	{r7, lr}
     c6e:	b08a      	sub	sp, #40	; 0x28
     c70:	af00      	add	r7, sp, #0
     c72:	60f8      	str	r0, [r7, #12]
     c74:	60b9      	str	r1, [r7, #8]
     c76:	607a      	str	r2, [r7, #4]
     c78:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
     c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	009b      	lsls	r3, r3, #2
     c82:	461a      	mov	r2, r3
     c84:	21a5      	movs	r1, #165	; 0xa5
     c86:	f7ff fcb5 	bl	5f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
     c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     c94:	3b01      	subs	r3, #1
     c96:	009b      	lsls	r3, r3, #2
     c98:	4413      	add	r3, r2
     c9a:	623b      	str	r3, [r7, #32]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
     c9c:	6a3b      	ldr	r3, [r7, #32]
     c9e:	f023 0307 	bic.w	r3, r3, #7
     ca2:	623b      	str	r3, [r7, #32]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
     ca4:	6a3b      	ldr	r3, [r7, #32]
     ca6:	f003 0307 	and.w	r3, r3, #7
     caa:	2b00      	cmp	r3, #0
     cac:	d012      	beq.n	cd4 <prvInitialiseNewTask+0x68>
     cae:	4b3e      	ldr	r3, [pc, #248]	; (da8 <prvInitialiseNewTask+0x13c>)
     cb0:	61fb      	str	r3, [r7, #28]
     cb2:	69fb      	ldr	r3, [r7, #28]
     cb4:	681b      	ldr	r3, [r3, #0]
     cb6:	f003 0301 	and.w	r3, r3, #1
     cba:	2b00      	cmp	r3, #0
     cbc:	d00a      	beq.n	cd4 <prvInitialiseNewTask+0x68>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
     cbe:	f04f 0340 	mov.w	r3, #64	; 0x40
     cc2:	f383 8811 	msr	BASEPRI, r3
     cc6:	f3bf 8f6f 	isb	sy
     cca:	f3bf 8f4f 	dsb	sy
     cce:	617b      	str	r3, [r7, #20]
            "   msr basepri, %0                                         \n"\
            "   isb                                                     \n"\
            "   dsb                                                     \n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
     cd0:	bf00      	nop
     cd2:	be00      	bkpt	0x0000
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
     cd4:	68bb      	ldr	r3, [r7, #8]
     cd6:	2b00      	cmp	r3, #0
     cd8:	d01e      	beq.n	d18 <prvInitialiseNewTask+0xac>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     cda:	2300      	movs	r3, #0
     cdc:	627b      	str	r3, [r7, #36]	; 0x24
     cde:	e012      	b.n	d06 <prvInitialiseNewTask+0x9a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     ce0:	68ba      	ldr	r2, [r7, #8]
     ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ce4:	4413      	add	r3, r2
     ce6:	7819      	ldrb	r1, [r3, #0]
     ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
     cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cec:	4413      	add	r3, r2
     cee:	3334      	adds	r3, #52	; 0x34
     cf0:	460a      	mov	r2, r1
     cf2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
     cf4:	68ba      	ldr	r2, [r7, #8]
     cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cf8:	4413      	add	r3, r2
     cfa:	781b      	ldrb	r3, [r3, #0]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d006      	beq.n	d0e <prvInitialiseNewTask+0xa2>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d02:	3301      	adds	r3, #1
     d04:	627b      	str	r3, [r7, #36]	; 0x24
     d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d08:	2b0f      	cmp	r3, #15
     d0a:	d9e9      	bls.n	ce0 <prvInitialiseNewTask+0x74>
     d0c:	e000      	b.n	d10 <prvInitialiseNewTask+0xa4>
            {
                break;
     d0e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d12:	2200      	movs	r2, #0
     d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
     d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d1a:	2b04      	cmp	r3, #4
     d1c:	d912      	bls.n	d44 <prvInitialiseNewTask+0xd8>
     d1e:	4b22      	ldr	r3, [pc, #136]	; (da8 <prvInitialiseNewTask+0x13c>)
     d20:	61bb      	str	r3, [r7, #24]
     d22:	69bb      	ldr	r3, [r7, #24]
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	f003 0301 	and.w	r3, r3, #1
     d2a:	2b00      	cmp	r3, #0
     d2c:	d00a      	beq.n	d44 <prvInitialiseNewTask+0xd8>
        __asm volatile
     d2e:	f04f 0340 	mov.w	r3, #64	; 0x40
     d32:	f383 8811 	msr	BASEPRI, r3
     d36:	f3bf 8f6f 	isb	sy
     d3a:	f3bf 8f4f 	dsb	sy
     d3e:	613b      	str	r3, [r7, #16]
    }
     d40:	bf00      	nop
     d42:	be00      	bkpt	0x0000

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
     d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d46:	2b04      	cmp	r3, #4
     d48:	d901      	bls.n	d4e <prvInitialiseNewTask+0xe2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
     d4a:	2304      	movs	r3, #4
     d4c:	633b      	str	r3, [r7, #48]	; 0x30
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
     d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d52:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
     d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d58:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d5c:	3304      	adds	r3, #4
     d5e:	4618      	mov	r0, r3
     d60:	f001 fd3e 	bl	27e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
     d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d66:	3318      	adds	r3, #24
     d68:	4618      	mov	r0, r3
     d6a:	f001 fd39 	bl	27e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
     d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d72:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d76:	f1c3 0205 	rsb	r2, r3, #5
     d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d7c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
     d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d82:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     d84:	683a      	ldr	r2, [r7, #0]
     d86:	68f9      	ldr	r1, [r7, #12]
     d88:	6a38      	ldr	r0, [r7, #32]
     d8a:	f002 fb1f 	bl	33cc <pxPortInitialiseStack>
     d8e:	4602      	mov	r2, r0
     d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d92:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
     d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d96:	2b00      	cmp	r3, #0
     d98:	d002      	beq.n	da0 <prvInitialiseNewTask+0x134>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d9e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     da0:	bf00      	nop
     da2:	3728      	adds	r7, #40	; 0x28
     da4:	46bd      	mov	sp, r7
     da6:	bd80      	pop	{r7, pc}
     da8:	e000edf0 	.word	0xe000edf0

00000dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
     dac:	b580      	push	{r7, lr}
     dae:	b084      	sub	sp, #16
     db0:	af00      	add	r7, sp, #0
     db2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
     db4:	f002 fc7a 	bl	36ac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
     db8:	4b41      	ldr	r3, [pc, #260]	; (ec0 <prvAddNewTaskToReadyList+0x114>)
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	3301      	adds	r3, #1
     dbe:	4a40      	ldr	r2, [pc, #256]	; (ec0 <prvAddNewTaskToReadyList+0x114>)
     dc0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
     dc2:	4b40      	ldr	r3, [pc, #256]	; (ec4 <prvAddNewTaskToReadyList+0x118>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	2b00      	cmp	r3, #0
     dc8:	d109      	bne.n	dde <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
     dca:	4a3e      	ldr	r2, [pc, #248]	; (ec4 <prvAddNewTaskToReadyList+0x118>)
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     dd0:	4b3b      	ldr	r3, [pc, #236]	; (ec0 <prvAddNewTaskToReadyList+0x114>)
     dd2:	681b      	ldr	r3, [r3, #0]
     dd4:	2b01      	cmp	r3, #1
     dd6:	d110      	bne.n	dfa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
     dd8:	f000 fdfc 	bl	19d4 <prvInitialiseTaskLists>
     ddc:	e00d      	b.n	dfa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
     dde:	4b3a      	ldr	r3, [pc, #232]	; (ec8 <prvAddNewTaskToReadyList+0x11c>)
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	2b00      	cmp	r3, #0
     de4:	d109      	bne.n	dfa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
     de6:	4b37      	ldr	r3, [pc, #220]	; (ec4 <prvAddNewTaskToReadyList+0x118>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     df0:	429a      	cmp	r2, r3
     df2:	d802      	bhi.n	dfa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
     df4:	4a33      	ldr	r2, [pc, #204]	; (ec4 <prvAddNewTaskToReadyList+0x118>)
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
     dfa:	4b34      	ldr	r3, [pc, #208]	; (ecc <prvAddNewTaskToReadyList+0x120>)
     dfc:	681b      	ldr	r3, [r3, #0]
     dfe:	3301      	adds	r3, #1
     e00:	4a32      	ldr	r2, [pc, #200]	; (ecc <prvAddNewTaskToReadyList+0x120>)
     e02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
     e04:	4b31      	ldr	r3, [pc, #196]	; (ecc <prvAddNewTaskToReadyList+0x120>)
     e06:	681a      	ldr	r2, [r3, #0]
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     e10:	4b2f      	ldr	r3, [pc, #188]	; (ed0 <prvAddNewTaskToReadyList+0x124>)
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	429a      	cmp	r2, r3
     e16:	d903      	bls.n	e20 <prvAddNewTaskToReadyList+0x74>
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     e1c:	4a2c      	ldr	r2, [pc, #176]	; (ed0 <prvAddNewTaskToReadyList+0x124>)
     e1e:	6013      	str	r3, [r2, #0]
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     e24:	492b      	ldr	r1, [pc, #172]	; (ed4 <prvAddNewTaskToReadyList+0x128>)
     e26:	4613      	mov	r3, r2
     e28:	009b      	lsls	r3, r3, #2
     e2a:	4413      	add	r3, r2
     e2c:	009b      	lsls	r3, r3, #2
     e2e:	440b      	add	r3, r1
     e30:	3304      	adds	r3, #4
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	60fb      	str	r3, [r7, #12]
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	68fa      	ldr	r2, [r7, #12]
     e3a:	609a      	str	r2, [r3, #8]
     e3c:	68fb      	ldr	r3, [r7, #12]
     e3e:	689a      	ldr	r2, [r3, #8]
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	60da      	str	r2, [r3, #12]
     e44:	68fb      	ldr	r3, [r7, #12]
     e46:	689b      	ldr	r3, [r3, #8]
     e48:	687a      	ldr	r2, [r7, #4]
     e4a:	3204      	adds	r2, #4
     e4c:	605a      	str	r2, [r3, #4]
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	1d1a      	adds	r2, r3, #4
     e52:	68fb      	ldr	r3, [r7, #12]
     e54:	609a      	str	r2, [r3, #8]
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     e5a:	4613      	mov	r3, r2
     e5c:	009b      	lsls	r3, r3, #2
     e5e:	4413      	add	r3, r2
     e60:	009b      	lsls	r3, r3, #2
     e62:	4a1c      	ldr	r2, [pc, #112]	; (ed4 <prvAddNewTaskToReadyList+0x128>)
     e64:	441a      	add	r2, r3
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	615a      	str	r2, [r3, #20]
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     e6e:	4919      	ldr	r1, [pc, #100]	; (ed4 <prvAddNewTaskToReadyList+0x128>)
     e70:	4613      	mov	r3, r2
     e72:	009b      	lsls	r3, r3, #2
     e74:	4413      	add	r3, r2
     e76:	009b      	lsls	r3, r3, #2
     e78:	440b      	add	r3, r1
     e7a:	681b      	ldr	r3, [r3, #0]
     e7c:	1c59      	adds	r1, r3, #1
     e7e:	4815      	ldr	r0, [pc, #84]	; (ed4 <prvAddNewTaskToReadyList+0x128>)
     e80:	4613      	mov	r3, r2
     e82:	009b      	lsls	r3, r3, #2
     e84:	4413      	add	r3, r2
     e86:	009b      	lsls	r3, r3, #2
     e88:	4403      	add	r3, r0
     e8a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
     e8c:	f002 fc48 	bl	3720 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
     e90:	4b0d      	ldr	r3, [pc, #52]	; (ec8 <prvAddNewTaskToReadyList+0x11c>)
     e92:	681b      	ldr	r3, [r3, #0]
     e94:	2b00      	cmp	r3, #0
     e96:	d00e      	beq.n	eb6 <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
     e98:	4b0a      	ldr	r3, [pc, #40]	; (ec4 <prvAddNewTaskToReadyList+0x118>)
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ea2:	429a      	cmp	r2, r3
     ea4:	d207      	bcs.n	eb6 <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
     ea6:	4b0c      	ldr	r3, [pc, #48]	; (ed8 <prvAddNewTaskToReadyList+0x12c>)
     ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     eac:	601a      	str	r2, [r3, #0]
     eae:	f3bf 8f4f 	dsb	sy
     eb2:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     eb6:	bf00      	nop
     eb8:	3710      	adds	r7, #16
     eba:	46bd      	mov	sp, r7
     ebc:	bd80      	pop	{r7, pc}
     ebe:	bf00      	nop
     ec0:	200000d4 	.word	0x200000d4
     ec4:	20000014 	.word	0x20000014
     ec8:	200000e0 	.word	0x200000e0
     ecc:	200000f0 	.word	0x200000f0
     ed0:	200000dc 	.word	0x200000dc
     ed4:	20000018 	.word	0x20000018
     ed8:	e000ed04 	.word	0xe000ed04

00000edc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
     edc:	b580      	push	{r7, lr}
     ede:	b086      	sub	sp, #24
     ee0:	af00      	add	r7, sp, #0
     ee2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
     ee4:	2300      	movs	r3, #0
     ee6:	617b      	str	r3, [r7, #20]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
     ee8:	687b      	ldr	r3, [r7, #4]
     eea:	2b00      	cmp	r3, #0
     eec:	d01f      	beq.n	f2e <vTaskDelay+0x52>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
     eee:	4b17      	ldr	r3, [pc, #92]	; (f4c <vTaskDelay+0x70>)
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d012      	beq.n	f1c <vTaskDelay+0x40>
     ef6:	4b16      	ldr	r3, [pc, #88]	; (f50 <vTaskDelay+0x74>)
     ef8:	613b      	str	r3, [r7, #16]
     efa:	693b      	ldr	r3, [r7, #16]
     efc:	681b      	ldr	r3, [r3, #0]
     efe:	f003 0301 	and.w	r3, r3, #1
     f02:	2b00      	cmp	r3, #0
     f04:	d00a      	beq.n	f1c <vTaskDelay+0x40>
        __asm volatile
     f06:	f04f 0340 	mov.w	r3, #64	; 0x40
     f0a:	f383 8811 	msr	BASEPRI, r3
     f0e:	f3bf 8f6f 	isb	sy
     f12:	f3bf 8f4f 	dsb	sy
     f16:	60fb      	str	r3, [r7, #12]
    }
     f18:	bf00      	nop
     f1a:	be00      	bkpt	0x0000
            vTaskSuspendAll();
     f1c:	f000 f878 	bl	1010 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
     f20:	2100      	movs	r1, #0
     f22:	6878      	ldr	r0, [r7, #4]
     f24:	f000 fe7a 	bl	1c1c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
     f28:	f000 f880 	bl	102c <xTaskResumeAll>
     f2c:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
     f2e:	697b      	ldr	r3, [r7, #20]
     f30:	2b00      	cmp	r3, #0
     f32:	d107      	bne.n	f44 <vTaskDelay+0x68>
        {
            portYIELD_WITHIN_API();
     f34:	4b07      	ldr	r3, [pc, #28]	; (f54 <vTaskDelay+0x78>)
     f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f3a:	601a      	str	r2, [r3, #0]
     f3c:	f3bf 8f4f 	dsb	sy
     f40:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
     f44:	bf00      	nop
     f46:	3718      	adds	r7, #24
     f48:	46bd      	mov	sp, r7
     f4a:	bd80      	pop	{r7, pc}
     f4c:	200000fc 	.word	0x200000fc
     f50:	e000edf0 	.word	0xe000edf0
     f54:	e000ed04 	.word	0xe000ed04

00000f58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     f58:	b580      	push	{r7, lr}
     f5a:	b086      	sub	sp, #24
     f5c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
     f5e:	4b24      	ldr	r3, [pc, #144]	; (ff0 <vTaskStartScheduler+0x98>)
     f60:	9301      	str	r3, [sp, #4]
     f62:	2300      	movs	r3, #0
     f64:	9300      	str	r3, [sp, #0]
     f66:	2300      	movs	r3, #0
     f68:	2280      	movs	r2, #128	; 0x80
     f6a:	4922      	ldr	r1, [pc, #136]	; (ff4 <vTaskStartScheduler+0x9c>)
     f6c:	4822      	ldr	r0, [pc, #136]	; (ff8 <vTaskStartScheduler+0xa0>)
     f6e:	f7ff fe37 	bl	be0 <xTaskCreate>
     f72:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	2b01      	cmp	r3, #1
     f78:	d102      	bne.n	f80 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
     f7a:	f000 febd 	bl	1cf8 <xTimerCreateTimerTask>
     f7e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
     f80:	68fb      	ldr	r3, [r7, #12]
     f82:	2b01      	cmp	r3, #1
     f84:	d116      	bne.n	fb4 <vTaskStartScheduler+0x5c>
        __asm volatile
     f86:	f04f 0340 	mov.w	r3, #64	; 0x40
     f8a:	f383 8811 	msr	BASEPRI, r3
     f8e:	f3bf 8f6f 	isb	sy
     f92:	f3bf 8f4f 	dsb	sy
     f96:	607b      	str	r3, [r7, #4]
    }
     f98:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
     f9a:	4b18      	ldr	r3, [pc, #96]	; (ffc <vTaskStartScheduler+0xa4>)
     f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     fa0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
     fa2:	4b17      	ldr	r3, [pc, #92]	; (1000 <vTaskStartScheduler+0xa8>)
     fa4:	2201      	movs	r2, #1
     fa6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
     fa8:	4b16      	ldr	r3, [pc, #88]	; (1004 <vTaskStartScheduler+0xac>)
     faa:	2200      	movs	r2, #0
     fac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
     fae:	f002 faa1 	bl	34f4 <xPortStartScheduler>
     fb2:	e016      	b.n	fe2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
     fb4:	68fb      	ldr	r3, [r7, #12]
     fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
     fba:	d112      	bne.n	fe2 <vTaskStartScheduler+0x8a>
     fbc:	4b12      	ldr	r3, [pc, #72]	; (1008 <vTaskStartScheduler+0xb0>)
     fbe:	60bb      	str	r3, [r7, #8]
     fc0:	68bb      	ldr	r3, [r7, #8]
     fc2:	681b      	ldr	r3, [r3, #0]
     fc4:	f003 0301 	and.w	r3, r3, #1
     fc8:	2b00      	cmp	r3, #0
     fca:	d00a      	beq.n	fe2 <vTaskStartScheduler+0x8a>
        __asm volatile
     fcc:	f04f 0340 	mov.w	r3, #64	; 0x40
     fd0:	f383 8811 	msr	BASEPRI, r3
     fd4:	f3bf 8f6f 	isb	sy
     fd8:	f3bf 8f4f 	dsb	sy
     fdc:	603b      	str	r3, [r7, #0]
    }
     fde:	bf00      	nop
     fe0:	be00      	bkpt	0x0000
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
     fe2:	4b0a      	ldr	r3, [pc, #40]	; (100c <vTaskStartScheduler+0xb4>)
     fe4:	681b      	ldr	r3, [r3, #0]
}
     fe6:	bf00      	nop
     fe8:	3710      	adds	r7, #16
     fea:	46bd      	mov	sp, r7
     fec:	bd80      	pop	{r7, pc}
     fee:	bf00      	nop
     ff0:	200000f8 	.word	0x200000f8
     ff4:	00003be4 	.word	0x00003be4
     ff8:	000019a5 	.word	0x000019a5
     ffc:	200000f4 	.word	0x200000f4
    1000:	200000e0 	.word	0x200000e0
    1004:	200000d8 	.word	0x200000d8
    1008:	e000edf0 	.word	0xe000edf0
    100c:	20000000 	.word	0x20000000

00001010 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1010:	b480      	push	{r7}
    1012:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <vTaskSuspendAll+0x18>)
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	3301      	adds	r3, #1
    101a:	4a03      	ldr	r2, [pc, #12]	; (1028 <vTaskSuspendAll+0x18>)
    101c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
    101e:	bf00      	nop
    1020:	46bd      	mov	sp, r7
    1022:	f85d 7b04 	ldr.w	r7, [sp], #4
    1026:	4770      	bx	lr
    1028:	200000fc 	.word	0x200000fc

0000102c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    102c:	b580      	push	{r7, lr}
    102e:	b088      	sub	sp, #32
    1030:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
    1032:	2300      	movs	r3, #0
    1034:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
    1036:	2300      	movs	r3, #0
    1038:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
    103a:	4b75      	ldr	r3, [pc, #468]	; (1210 <xTaskResumeAll+0x1e4>)
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	2b00      	cmp	r3, #0
    1040:	d112      	bne.n	1068 <xTaskResumeAll+0x3c>
    1042:	4b74      	ldr	r3, [pc, #464]	; (1214 <xTaskResumeAll+0x1e8>)
    1044:	613b      	str	r3, [r7, #16]
    1046:	693b      	ldr	r3, [r7, #16]
    1048:	681b      	ldr	r3, [r3, #0]
    104a:	f003 0301 	and.w	r3, r3, #1
    104e:	2b00      	cmp	r3, #0
    1050:	d00a      	beq.n	1068 <xTaskResumeAll+0x3c>
        __asm volatile
    1052:	f04f 0340 	mov.w	r3, #64	; 0x40
    1056:	f383 8811 	msr	BASEPRI, r3
    105a:	f3bf 8f6f 	isb	sy
    105e:	f3bf 8f4f 	dsb	sy
    1062:	603b      	str	r3, [r7, #0]
    }
    1064:	bf00      	nop
    1066:	be00      	bkpt	0x0000
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
    1068:	f002 fb20 	bl	36ac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
    106c:	4b68      	ldr	r3, [pc, #416]	; (1210 <xTaskResumeAll+0x1e4>)
    106e:	681b      	ldr	r3, [r3, #0]
    1070:	3b01      	subs	r3, #1
    1072:	4a67      	ldr	r2, [pc, #412]	; (1210 <xTaskResumeAll+0x1e4>)
    1074:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    1076:	4b66      	ldr	r3, [pc, #408]	; (1210 <xTaskResumeAll+0x1e4>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	2b00      	cmp	r3, #0
    107c:	f040 80c1 	bne.w	1202 <xTaskResumeAll+0x1d6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1080:	4b65      	ldr	r3, [pc, #404]	; (1218 <xTaskResumeAll+0x1ec>)
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	2b00      	cmp	r3, #0
    1086:	f000 80bc 	beq.w	1202 <xTaskResumeAll+0x1d6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    108a:	e08b      	b.n	11a4 <xTaskResumeAll+0x178>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    108c:	4b63      	ldr	r3, [pc, #396]	; (121c <xTaskResumeAll+0x1f0>)
    108e:	68db      	ldr	r3, [r3, #12]
    1090:	68db      	ldr	r3, [r3, #12]
    1092:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    1094:	69fb      	ldr	r3, [r7, #28]
    1096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1098:	60fb      	str	r3, [r7, #12]
    109a:	69fb      	ldr	r3, [r7, #28]
    109c:	69db      	ldr	r3, [r3, #28]
    109e:	69fa      	ldr	r2, [r7, #28]
    10a0:	6a12      	ldr	r2, [r2, #32]
    10a2:	609a      	str	r2, [r3, #8]
    10a4:	69fb      	ldr	r3, [r7, #28]
    10a6:	6a1b      	ldr	r3, [r3, #32]
    10a8:	69fa      	ldr	r2, [r7, #28]
    10aa:	69d2      	ldr	r2, [r2, #28]
    10ac:	605a      	str	r2, [r3, #4]
    10ae:	68fb      	ldr	r3, [r7, #12]
    10b0:	685a      	ldr	r2, [r3, #4]
    10b2:	69fb      	ldr	r3, [r7, #28]
    10b4:	3318      	adds	r3, #24
    10b6:	429a      	cmp	r2, r3
    10b8:	d103      	bne.n	10c2 <xTaskResumeAll+0x96>
    10ba:	69fb      	ldr	r3, [r7, #28]
    10bc:	6a1a      	ldr	r2, [r3, #32]
    10be:	68fb      	ldr	r3, [r7, #12]
    10c0:	605a      	str	r2, [r3, #4]
    10c2:	69fb      	ldr	r3, [r7, #28]
    10c4:	2200      	movs	r2, #0
    10c6:	629a      	str	r2, [r3, #40]	; 0x28
    10c8:	68fb      	ldr	r3, [r7, #12]
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	1e5a      	subs	r2, r3, #1
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    10d2:	69fb      	ldr	r3, [r7, #28]
    10d4:	695b      	ldr	r3, [r3, #20]
    10d6:	60bb      	str	r3, [r7, #8]
    10d8:	69fb      	ldr	r3, [r7, #28]
    10da:	689b      	ldr	r3, [r3, #8]
    10dc:	69fa      	ldr	r2, [r7, #28]
    10de:	68d2      	ldr	r2, [r2, #12]
    10e0:	609a      	str	r2, [r3, #8]
    10e2:	69fb      	ldr	r3, [r7, #28]
    10e4:	68db      	ldr	r3, [r3, #12]
    10e6:	69fa      	ldr	r2, [r7, #28]
    10e8:	6892      	ldr	r2, [r2, #8]
    10ea:	605a      	str	r2, [r3, #4]
    10ec:	68bb      	ldr	r3, [r7, #8]
    10ee:	685a      	ldr	r2, [r3, #4]
    10f0:	69fb      	ldr	r3, [r7, #28]
    10f2:	3304      	adds	r3, #4
    10f4:	429a      	cmp	r2, r3
    10f6:	d103      	bne.n	1100 <xTaskResumeAll+0xd4>
    10f8:	69fb      	ldr	r3, [r7, #28]
    10fa:	68da      	ldr	r2, [r3, #12]
    10fc:	68bb      	ldr	r3, [r7, #8]
    10fe:	605a      	str	r2, [r3, #4]
    1100:	69fb      	ldr	r3, [r7, #28]
    1102:	2200      	movs	r2, #0
    1104:	615a      	str	r2, [r3, #20]
    1106:	68bb      	ldr	r3, [r7, #8]
    1108:	681b      	ldr	r3, [r3, #0]
    110a:	1e5a      	subs	r2, r3, #1
    110c:	68bb      	ldr	r3, [r7, #8]
    110e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
    1110:	69fb      	ldr	r3, [r7, #28]
    1112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1114:	4b42      	ldr	r3, [pc, #264]	; (1220 <xTaskResumeAll+0x1f4>)
    1116:	681b      	ldr	r3, [r3, #0]
    1118:	429a      	cmp	r2, r3
    111a:	d903      	bls.n	1124 <xTaskResumeAll+0xf8>
    111c:	69fb      	ldr	r3, [r7, #28]
    111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1120:	4a3f      	ldr	r2, [pc, #252]	; (1220 <xTaskResumeAll+0x1f4>)
    1122:	6013      	str	r3, [r2, #0]
    1124:	69fb      	ldr	r3, [r7, #28]
    1126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1128:	493e      	ldr	r1, [pc, #248]	; (1224 <xTaskResumeAll+0x1f8>)
    112a:	4613      	mov	r3, r2
    112c:	009b      	lsls	r3, r3, #2
    112e:	4413      	add	r3, r2
    1130:	009b      	lsls	r3, r3, #2
    1132:	440b      	add	r3, r1
    1134:	3304      	adds	r3, #4
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	607b      	str	r3, [r7, #4]
    113a:	69fb      	ldr	r3, [r7, #28]
    113c:	687a      	ldr	r2, [r7, #4]
    113e:	609a      	str	r2, [r3, #8]
    1140:	687b      	ldr	r3, [r7, #4]
    1142:	689a      	ldr	r2, [r3, #8]
    1144:	69fb      	ldr	r3, [r7, #28]
    1146:	60da      	str	r2, [r3, #12]
    1148:	687b      	ldr	r3, [r7, #4]
    114a:	689b      	ldr	r3, [r3, #8]
    114c:	69fa      	ldr	r2, [r7, #28]
    114e:	3204      	adds	r2, #4
    1150:	605a      	str	r2, [r3, #4]
    1152:	69fb      	ldr	r3, [r7, #28]
    1154:	1d1a      	adds	r2, r3, #4
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	609a      	str	r2, [r3, #8]
    115a:	69fb      	ldr	r3, [r7, #28]
    115c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    115e:	4613      	mov	r3, r2
    1160:	009b      	lsls	r3, r3, #2
    1162:	4413      	add	r3, r2
    1164:	009b      	lsls	r3, r3, #2
    1166:	4a2f      	ldr	r2, [pc, #188]	; (1224 <xTaskResumeAll+0x1f8>)
    1168:	441a      	add	r2, r3
    116a:	69fb      	ldr	r3, [r7, #28]
    116c:	615a      	str	r2, [r3, #20]
    116e:	69fb      	ldr	r3, [r7, #28]
    1170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1172:	492c      	ldr	r1, [pc, #176]	; (1224 <xTaskResumeAll+0x1f8>)
    1174:	4613      	mov	r3, r2
    1176:	009b      	lsls	r3, r3, #2
    1178:	4413      	add	r3, r2
    117a:	009b      	lsls	r3, r3, #2
    117c:	440b      	add	r3, r1
    117e:	681b      	ldr	r3, [r3, #0]
    1180:	1c59      	adds	r1, r3, #1
    1182:	4828      	ldr	r0, [pc, #160]	; (1224 <xTaskResumeAll+0x1f8>)
    1184:	4613      	mov	r3, r2
    1186:	009b      	lsls	r3, r3, #2
    1188:	4413      	add	r3, r2
    118a:	009b      	lsls	r3, r3, #2
    118c:	4403      	add	r3, r0
    118e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    1190:	69fb      	ldr	r3, [r7, #28]
    1192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1194:	4b24      	ldr	r3, [pc, #144]	; (1228 <xTaskResumeAll+0x1fc>)
    1196:	681b      	ldr	r3, [r3, #0]
    1198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    119a:	429a      	cmp	r2, r3
    119c:	d902      	bls.n	11a4 <xTaskResumeAll+0x178>
                    {
                        xYieldPending = pdTRUE;
    119e:	4b23      	ldr	r3, [pc, #140]	; (122c <xTaskResumeAll+0x200>)
    11a0:	2201      	movs	r2, #1
    11a2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    11a4:	4b1d      	ldr	r3, [pc, #116]	; (121c <xTaskResumeAll+0x1f0>)
    11a6:	681b      	ldr	r3, [r3, #0]
    11a8:	2b00      	cmp	r3, #0
    11aa:	f47f af6f 	bne.w	108c <xTaskResumeAll+0x60>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
    11ae:	69fb      	ldr	r3, [r7, #28]
    11b0:	2b00      	cmp	r3, #0
    11b2:	d001      	beq.n	11b8 <xTaskResumeAll+0x18c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
    11b4:	f000 fc50 	bl	1a58 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    11b8:	4b1d      	ldr	r3, [pc, #116]	; (1230 <xTaskResumeAll+0x204>)
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
    11be:	697b      	ldr	r3, [r7, #20]
    11c0:	2b00      	cmp	r3, #0
    11c2:	d010      	beq.n	11e6 <xTaskResumeAll+0x1ba>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
    11c4:	f000 f854 	bl	1270 <xTaskIncrementTick>
    11c8:	4603      	mov	r3, r0
    11ca:	2b00      	cmp	r3, #0
    11cc:	d002      	beq.n	11d4 <xTaskResumeAll+0x1a8>
                            {
                                xYieldPending = pdTRUE;
    11ce:	4b17      	ldr	r3, [pc, #92]	; (122c <xTaskResumeAll+0x200>)
    11d0:	2201      	movs	r2, #1
    11d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
    11d4:	697b      	ldr	r3, [r7, #20]
    11d6:	3b01      	subs	r3, #1
    11d8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
    11da:	697b      	ldr	r3, [r7, #20]
    11dc:	2b00      	cmp	r3, #0
    11de:	d1f1      	bne.n	11c4 <xTaskResumeAll+0x198>

                        xPendedTicks = 0;
    11e0:	4b13      	ldr	r3, [pc, #76]	; (1230 <xTaskResumeAll+0x204>)
    11e2:	2200      	movs	r2, #0
    11e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
    11e6:	4b11      	ldr	r3, [pc, #68]	; (122c <xTaskResumeAll+0x200>)
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	2b00      	cmp	r3, #0
    11ec:	d009      	beq.n	1202 <xTaskResumeAll+0x1d6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
    11ee:	2301      	movs	r3, #1
    11f0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
    11f2:	4b10      	ldr	r3, [pc, #64]	; (1234 <xTaskResumeAll+0x208>)
    11f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    11f8:	601a      	str	r2, [r3, #0]
    11fa:	f3bf 8f4f 	dsb	sy
    11fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    1202:	f002 fa8d 	bl	3720 <vPortExitCritical>

    return xAlreadyYielded;
    1206:	69bb      	ldr	r3, [r7, #24]
}
    1208:	4618      	mov	r0, r3
    120a:	3720      	adds	r7, #32
    120c:	46bd      	mov	sp, r7
    120e:	bd80      	pop	{r7, pc}
    1210:	200000fc 	.word	0x200000fc
    1214:	e000edf0 	.word	0xe000edf0
    1218:	200000d4 	.word	0x200000d4
    121c:	200000ac 	.word	0x200000ac
    1220:	200000dc 	.word	0x200000dc
    1224:	20000018 	.word	0x20000018
    1228:	20000014 	.word	0x20000014
    122c:	200000e8 	.word	0x200000e8
    1230:	200000e4 	.word	0x200000e4
    1234:	e000ed04 	.word	0xe000ed04

00001238 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    1238:	b480      	push	{r7}
    123a:	b083      	sub	sp, #12
    123c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
    123e:	4b05      	ldr	r3, [pc, #20]	; (1254 <xTaskGetTickCount+0x1c>)
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
    1244:	687b      	ldr	r3, [r7, #4]
}
    1246:	4618      	mov	r0, r3
    1248:	370c      	adds	r7, #12
    124a:	46bd      	mov	sp, r7
    124c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1250:	4770      	bx	lr
    1252:	bf00      	nop
    1254:	200000d8 	.word	0x200000d8

00001258 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    1258:	b480      	push	{r7}
    125a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
    125c:	4b03      	ldr	r3, [pc, #12]	; (126c <uxTaskGetNumberOfTasks+0x14>)
    125e:	681b      	ldr	r3, [r3, #0]
}
    1260:	4618      	mov	r0, r3
    1262:	46bd      	mov	sp, r7
    1264:	f85d 7b04 	ldr.w	r7, [sp], #4
    1268:	4770      	bx	lr
    126a:	bf00      	nop
    126c:	200000d4 	.word	0x200000d4

00001270 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1270:	b580      	push	{r7, lr}
    1272:	b08a      	sub	sp, #40	; 0x28
    1274:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    1276:	2300      	movs	r3, #0
    1278:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    127a:	4b7b      	ldr	r3, [pc, #492]	; (1468 <xTaskIncrementTick+0x1f8>)
    127c:	681b      	ldr	r3, [r3, #0]
    127e:	2b00      	cmp	r3, #0
    1280:	f040 80e7 	bne.w	1452 <xTaskIncrementTick+0x1e2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    1284:	4b79      	ldr	r3, [pc, #484]	; (146c <xTaskIncrementTick+0x1fc>)
    1286:	681b      	ldr	r3, [r3, #0]
    1288:	3301      	adds	r3, #1
    128a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
    128c:	4a77      	ldr	r2, [pc, #476]	; (146c <xTaskIncrementTick+0x1fc>)
    128e:	6a3b      	ldr	r3, [r7, #32]
    1290:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    1292:	6a3b      	ldr	r3, [r7, #32]
    1294:	2b00      	cmp	r3, #0
    1296:	d128      	bne.n	12ea <xTaskIncrementTick+0x7a>
        {
            taskSWITCH_DELAYED_LISTS();
    1298:	4b75      	ldr	r3, [pc, #468]	; (1470 <xTaskIncrementTick+0x200>)
    129a:	681b      	ldr	r3, [r3, #0]
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	2b00      	cmp	r3, #0
    12a0:	d012      	beq.n	12c8 <xTaskIncrementTick+0x58>
    12a2:	4b74      	ldr	r3, [pc, #464]	; (1474 <xTaskIncrementTick+0x204>)
    12a4:	61fb      	str	r3, [r7, #28]
    12a6:	69fb      	ldr	r3, [r7, #28]
    12a8:	681b      	ldr	r3, [r3, #0]
    12aa:	f003 0301 	and.w	r3, r3, #1
    12ae:	2b00      	cmp	r3, #0
    12b0:	d00a      	beq.n	12c8 <xTaskIncrementTick+0x58>
        __asm volatile
    12b2:	f04f 0340 	mov.w	r3, #64	; 0x40
    12b6:	f383 8811 	msr	BASEPRI, r3
    12ba:	f3bf 8f6f 	isb	sy
    12be:	f3bf 8f4f 	dsb	sy
    12c2:	603b      	str	r3, [r7, #0]
    }
    12c4:	bf00      	nop
    12c6:	be00      	bkpt	0x0000
    12c8:	4b69      	ldr	r3, [pc, #420]	; (1470 <xTaskIncrementTick+0x200>)
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	61bb      	str	r3, [r7, #24]
    12ce:	4b6a      	ldr	r3, [pc, #424]	; (1478 <xTaskIncrementTick+0x208>)
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	4a67      	ldr	r2, [pc, #412]	; (1470 <xTaskIncrementTick+0x200>)
    12d4:	6013      	str	r3, [r2, #0]
    12d6:	4a68      	ldr	r2, [pc, #416]	; (1478 <xTaskIncrementTick+0x208>)
    12d8:	69bb      	ldr	r3, [r7, #24]
    12da:	6013      	str	r3, [r2, #0]
    12dc:	4b67      	ldr	r3, [pc, #412]	; (147c <xTaskIncrementTick+0x20c>)
    12de:	681b      	ldr	r3, [r3, #0]
    12e0:	3301      	adds	r3, #1
    12e2:	4a66      	ldr	r2, [pc, #408]	; (147c <xTaskIncrementTick+0x20c>)
    12e4:	6013      	str	r3, [r2, #0]
    12e6:	f000 fbb7 	bl	1a58 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
    12ea:	4b65      	ldr	r3, [pc, #404]	; (1480 <xTaskIncrementTick+0x210>)
    12ec:	681b      	ldr	r3, [r3, #0]
    12ee:	6a3a      	ldr	r2, [r7, #32]
    12f0:	429a      	cmp	r2, r3
    12f2:	f0c0 80a7 	bcc.w	1444 <xTaskIncrementTick+0x1d4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    12f6:	4b5e      	ldr	r3, [pc, #376]	; (1470 <xTaskIncrementTick+0x200>)
    12f8:	681b      	ldr	r3, [r3, #0]
    12fa:	681b      	ldr	r3, [r3, #0]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d104      	bne.n	130a <xTaskIncrementTick+0x9a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1300:	4b5f      	ldr	r3, [pc, #380]	; (1480 <xTaskIncrementTick+0x210>)
    1302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1306:	601a      	str	r2, [r3, #0]
                    break;
    1308:	e09c      	b.n	1444 <xTaskIncrementTick+0x1d4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    130a:	4b59      	ldr	r3, [pc, #356]	; (1470 <xTaskIncrementTick+0x200>)
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	68db      	ldr	r3, [r3, #12]
    1310:	68db      	ldr	r3, [r3, #12]
    1312:	617b      	str	r3, [r7, #20]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1314:	697b      	ldr	r3, [r7, #20]
    1316:	685b      	ldr	r3, [r3, #4]
    1318:	613b      	str	r3, [r7, #16]

                    if( xConstTickCount < xItemValue )
    131a:	6a3a      	ldr	r2, [r7, #32]
    131c:	693b      	ldr	r3, [r7, #16]
    131e:	429a      	cmp	r2, r3
    1320:	d203      	bcs.n	132a <xTaskIncrementTick+0xba>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
    1322:	4a57      	ldr	r2, [pc, #348]	; (1480 <xTaskIncrementTick+0x210>)
    1324:	693b      	ldr	r3, [r7, #16]
    1326:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
    1328:	e08c      	b.n	1444 <xTaskIncrementTick+0x1d4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    132a:	697b      	ldr	r3, [r7, #20]
    132c:	695b      	ldr	r3, [r3, #20]
    132e:	60fb      	str	r3, [r7, #12]
    1330:	697b      	ldr	r3, [r7, #20]
    1332:	689b      	ldr	r3, [r3, #8]
    1334:	697a      	ldr	r2, [r7, #20]
    1336:	68d2      	ldr	r2, [r2, #12]
    1338:	609a      	str	r2, [r3, #8]
    133a:	697b      	ldr	r3, [r7, #20]
    133c:	68db      	ldr	r3, [r3, #12]
    133e:	697a      	ldr	r2, [r7, #20]
    1340:	6892      	ldr	r2, [r2, #8]
    1342:	605a      	str	r2, [r3, #4]
    1344:	68fb      	ldr	r3, [r7, #12]
    1346:	685a      	ldr	r2, [r3, #4]
    1348:	697b      	ldr	r3, [r7, #20]
    134a:	3304      	adds	r3, #4
    134c:	429a      	cmp	r2, r3
    134e:	d103      	bne.n	1358 <xTaskIncrementTick+0xe8>
    1350:	697b      	ldr	r3, [r7, #20]
    1352:	68da      	ldr	r2, [r3, #12]
    1354:	68fb      	ldr	r3, [r7, #12]
    1356:	605a      	str	r2, [r3, #4]
    1358:	697b      	ldr	r3, [r7, #20]
    135a:	2200      	movs	r2, #0
    135c:	615a      	str	r2, [r3, #20]
    135e:	68fb      	ldr	r3, [r7, #12]
    1360:	681b      	ldr	r3, [r3, #0]
    1362:	1e5a      	subs	r2, r3, #1
    1364:	68fb      	ldr	r3, [r7, #12]
    1366:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1368:	697b      	ldr	r3, [r7, #20]
    136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    136c:	2b00      	cmp	r3, #0
    136e:	d01e      	beq.n	13ae <xTaskIncrementTick+0x13e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    1370:	697b      	ldr	r3, [r7, #20]
    1372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1374:	60bb      	str	r3, [r7, #8]
    1376:	697b      	ldr	r3, [r7, #20]
    1378:	69db      	ldr	r3, [r3, #28]
    137a:	697a      	ldr	r2, [r7, #20]
    137c:	6a12      	ldr	r2, [r2, #32]
    137e:	609a      	str	r2, [r3, #8]
    1380:	697b      	ldr	r3, [r7, #20]
    1382:	6a1b      	ldr	r3, [r3, #32]
    1384:	697a      	ldr	r2, [r7, #20]
    1386:	69d2      	ldr	r2, [r2, #28]
    1388:	605a      	str	r2, [r3, #4]
    138a:	68bb      	ldr	r3, [r7, #8]
    138c:	685a      	ldr	r2, [r3, #4]
    138e:	697b      	ldr	r3, [r7, #20]
    1390:	3318      	adds	r3, #24
    1392:	429a      	cmp	r2, r3
    1394:	d103      	bne.n	139e <xTaskIncrementTick+0x12e>
    1396:	697b      	ldr	r3, [r7, #20]
    1398:	6a1a      	ldr	r2, [r3, #32]
    139a:	68bb      	ldr	r3, [r7, #8]
    139c:	605a      	str	r2, [r3, #4]
    139e:	697b      	ldr	r3, [r7, #20]
    13a0:	2200      	movs	r2, #0
    13a2:	629a      	str	r2, [r3, #40]	; 0x28
    13a4:	68bb      	ldr	r3, [r7, #8]
    13a6:	681b      	ldr	r3, [r3, #0]
    13a8:	1e5a      	subs	r2, r3, #1
    13aa:	68bb      	ldr	r3, [r7, #8]
    13ac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    13ae:	697b      	ldr	r3, [r7, #20]
    13b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    13b2:	4b34      	ldr	r3, [pc, #208]	; (1484 <xTaskIncrementTick+0x214>)
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	429a      	cmp	r2, r3
    13b8:	d903      	bls.n	13c2 <xTaskIncrementTick+0x152>
    13ba:	697b      	ldr	r3, [r7, #20]
    13bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13be:	4a31      	ldr	r2, [pc, #196]	; (1484 <xTaskIncrementTick+0x214>)
    13c0:	6013      	str	r3, [r2, #0]
    13c2:	697b      	ldr	r3, [r7, #20]
    13c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    13c6:	4930      	ldr	r1, [pc, #192]	; (1488 <xTaskIncrementTick+0x218>)
    13c8:	4613      	mov	r3, r2
    13ca:	009b      	lsls	r3, r3, #2
    13cc:	4413      	add	r3, r2
    13ce:	009b      	lsls	r3, r3, #2
    13d0:	440b      	add	r3, r1
    13d2:	3304      	adds	r3, #4
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	607b      	str	r3, [r7, #4]
    13d8:	697b      	ldr	r3, [r7, #20]
    13da:	687a      	ldr	r2, [r7, #4]
    13dc:	609a      	str	r2, [r3, #8]
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	689a      	ldr	r2, [r3, #8]
    13e2:	697b      	ldr	r3, [r7, #20]
    13e4:	60da      	str	r2, [r3, #12]
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	689b      	ldr	r3, [r3, #8]
    13ea:	697a      	ldr	r2, [r7, #20]
    13ec:	3204      	adds	r2, #4
    13ee:	605a      	str	r2, [r3, #4]
    13f0:	697b      	ldr	r3, [r7, #20]
    13f2:	1d1a      	adds	r2, r3, #4
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	609a      	str	r2, [r3, #8]
    13f8:	697b      	ldr	r3, [r7, #20]
    13fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    13fc:	4613      	mov	r3, r2
    13fe:	009b      	lsls	r3, r3, #2
    1400:	4413      	add	r3, r2
    1402:	009b      	lsls	r3, r3, #2
    1404:	4a20      	ldr	r2, [pc, #128]	; (1488 <xTaskIncrementTick+0x218>)
    1406:	441a      	add	r2, r3
    1408:	697b      	ldr	r3, [r7, #20]
    140a:	615a      	str	r2, [r3, #20]
    140c:	697b      	ldr	r3, [r7, #20]
    140e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1410:	491d      	ldr	r1, [pc, #116]	; (1488 <xTaskIncrementTick+0x218>)
    1412:	4613      	mov	r3, r2
    1414:	009b      	lsls	r3, r3, #2
    1416:	4413      	add	r3, r2
    1418:	009b      	lsls	r3, r3, #2
    141a:	440b      	add	r3, r1
    141c:	681b      	ldr	r3, [r3, #0]
    141e:	1c59      	adds	r1, r3, #1
    1420:	4819      	ldr	r0, [pc, #100]	; (1488 <xTaskIncrementTick+0x218>)
    1422:	4613      	mov	r3, r2
    1424:	009b      	lsls	r3, r3, #2
    1426:	4413      	add	r3, r2
    1428:	009b      	lsls	r3, r3, #2
    142a:	4403      	add	r3, r0
    142c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    142e:	697b      	ldr	r3, [r7, #20]
    1430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1432:	4b16      	ldr	r3, [pc, #88]	; (148c <xTaskIncrementTick+0x21c>)
    1434:	681b      	ldr	r3, [r3, #0]
    1436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1438:	429a      	cmp	r2, r3
    143a:	f67f af5c 	bls.w	12f6 <xTaskIncrementTick+0x86>
                        {
                            xSwitchRequired = pdTRUE;
    143e:	2301      	movs	r3, #1
    1440:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1442:	e758      	b.n	12f6 <xTaskIncrementTick+0x86>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
    1444:	4b12      	ldr	r3, [pc, #72]	; (1490 <xTaskIncrementTick+0x220>)
    1446:	681b      	ldr	r3, [r3, #0]
    1448:	2b00      	cmp	r3, #0
    144a:	d007      	beq.n	145c <xTaskIncrementTick+0x1ec>
            {
                xSwitchRequired = pdTRUE;
    144c:	2301      	movs	r3, #1
    144e:	627b      	str	r3, [r7, #36]	; 0x24
    1450:	e004      	b.n	145c <xTaskIncrementTick+0x1ec>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
    1452:	4b10      	ldr	r3, [pc, #64]	; (1494 <xTaskIncrementTick+0x224>)
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	3301      	adds	r3, #1
    1458:	4a0e      	ldr	r2, [pc, #56]	; (1494 <xTaskIncrementTick+0x224>)
    145a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
    145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    145e:	4618      	mov	r0, r3
    1460:	3728      	adds	r7, #40	; 0x28
    1462:	46bd      	mov	sp, r7
    1464:	bd80      	pop	{r7, pc}
    1466:	bf00      	nop
    1468:	200000fc 	.word	0x200000fc
    146c:	200000d8 	.word	0x200000d8
    1470:	200000a4 	.word	0x200000a4
    1474:	e000edf0 	.word	0xe000edf0
    1478:	200000a8 	.word	0x200000a8
    147c:	200000ec 	.word	0x200000ec
    1480:	200000f4 	.word	0x200000f4
    1484:	200000dc 	.word	0x200000dc
    1488:	20000018 	.word	0x20000018
    148c:	20000014 	.word	0x20000014
    1490:	200000e8 	.word	0x200000e8
    1494:	200000e4 	.word	0x200000e4

00001498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1498:	b580      	push	{r7, lr}
    149a:	b086      	sub	sp, #24
    149c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
    149e:	4b3e      	ldr	r3, [pc, #248]	; (1598 <vTaskSwitchContext+0x100>)
    14a0:	681b      	ldr	r3, [r3, #0]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d003      	beq.n	14ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
    14a6:	4b3d      	ldr	r3, [pc, #244]	; (159c <vTaskSwitchContext+0x104>)
    14a8:	2201      	movs	r2, #1
    14aa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
    14ac:	e06f      	b.n	158e <vTaskSwitchContext+0xf6>
        xYieldPending = pdFALSE;
    14ae:	4b3b      	ldr	r3, [pc, #236]	; (159c <vTaskSwitchContext+0x104>)
    14b0:	2200      	movs	r2, #0
    14b2:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
    14b4:	4b3a      	ldr	r3, [pc, #232]	; (15a0 <vTaskSwitchContext+0x108>)
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    14ba:	613b      	str	r3, [r7, #16]
    14bc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
    14c0:	60fb      	str	r3, [r7, #12]
    14c2:	693b      	ldr	r3, [r7, #16]
    14c4:	681b      	ldr	r3, [r3, #0]
    14c6:	68fa      	ldr	r2, [r7, #12]
    14c8:	429a      	cmp	r2, r3
    14ca:	d111      	bne.n	14f0 <vTaskSwitchContext+0x58>
    14cc:	693b      	ldr	r3, [r7, #16]
    14ce:	3304      	adds	r3, #4
    14d0:	681b      	ldr	r3, [r3, #0]
    14d2:	68fa      	ldr	r2, [r7, #12]
    14d4:	429a      	cmp	r2, r3
    14d6:	d10b      	bne.n	14f0 <vTaskSwitchContext+0x58>
    14d8:	693b      	ldr	r3, [r7, #16]
    14da:	3308      	adds	r3, #8
    14dc:	681b      	ldr	r3, [r3, #0]
    14de:	68fa      	ldr	r2, [r7, #12]
    14e0:	429a      	cmp	r2, r3
    14e2:	d105      	bne.n	14f0 <vTaskSwitchContext+0x58>
    14e4:	693b      	ldr	r3, [r7, #16]
    14e6:	330c      	adds	r3, #12
    14e8:	681b      	ldr	r3, [r3, #0]
    14ea:	68fa      	ldr	r2, [r7, #12]
    14ec:	429a      	cmp	r2, r3
    14ee:	d008      	beq.n	1502 <vTaskSwitchContext+0x6a>
    14f0:	4b2b      	ldr	r3, [pc, #172]	; (15a0 <vTaskSwitchContext+0x108>)
    14f2:	681a      	ldr	r2, [r3, #0]
    14f4:	4b2a      	ldr	r3, [pc, #168]	; (15a0 <vTaskSwitchContext+0x108>)
    14f6:	681b      	ldr	r3, [r3, #0]
    14f8:	3334      	adds	r3, #52	; 0x34
    14fa:	4619      	mov	r1, r3
    14fc:	4610      	mov	r0, r2
    14fe:	f7fe ff00 	bl	302 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1502:	4b28      	ldr	r3, [pc, #160]	; (15a4 <vTaskSwitchContext+0x10c>)
    1504:	681b      	ldr	r3, [r3, #0]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e018      	b.n	153c <vTaskSwitchContext+0xa4>
    150a:	697b      	ldr	r3, [r7, #20]
    150c:	2b00      	cmp	r3, #0
    150e:	d112      	bne.n	1536 <vTaskSwitchContext+0x9e>
    1510:	4b25      	ldr	r3, [pc, #148]	; (15a8 <vTaskSwitchContext+0x110>)
    1512:	607b      	str	r3, [r7, #4]
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	f003 0301 	and.w	r3, r3, #1
    151c:	2b00      	cmp	r3, #0
    151e:	d00a      	beq.n	1536 <vTaskSwitchContext+0x9e>
        __asm volatile
    1520:	f04f 0340 	mov.w	r3, #64	; 0x40
    1524:	f383 8811 	msr	BASEPRI, r3
    1528:	f3bf 8f6f 	isb	sy
    152c:	f3bf 8f4f 	dsb	sy
    1530:	603b      	str	r3, [r7, #0]
    }
    1532:	bf00      	nop
    1534:	be00      	bkpt	0x0000
    1536:	697b      	ldr	r3, [r7, #20]
    1538:	3b01      	subs	r3, #1
    153a:	617b      	str	r3, [r7, #20]
    153c:	491b      	ldr	r1, [pc, #108]	; (15ac <vTaskSwitchContext+0x114>)
    153e:	697a      	ldr	r2, [r7, #20]
    1540:	4613      	mov	r3, r2
    1542:	009b      	lsls	r3, r3, #2
    1544:	4413      	add	r3, r2
    1546:	009b      	lsls	r3, r3, #2
    1548:	440b      	add	r3, r1
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	2b00      	cmp	r3, #0
    154e:	d0dc      	beq.n	150a <vTaskSwitchContext+0x72>
    1550:	697a      	ldr	r2, [r7, #20]
    1552:	4613      	mov	r3, r2
    1554:	009b      	lsls	r3, r3, #2
    1556:	4413      	add	r3, r2
    1558:	009b      	lsls	r3, r3, #2
    155a:	4a14      	ldr	r2, [pc, #80]	; (15ac <vTaskSwitchContext+0x114>)
    155c:	4413      	add	r3, r2
    155e:	60bb      	str	r3, [r7, #8]
    1560:	68bb      	ldr	r3, [r7, #8]
    1562:	685b      	ldr	r3, [r3, #4]
    1564:	685a      	ldr	r2, [r3, #4]
    1566:	68bb      	ldr	r3, [r7, #8]
    1568:	605a      	str	r2, [r3, #4]
    156a:	68bb      	ldr	r3, [r7, #8]
    156c:	685a      	ldr	r2, [r3, #4]
    156e:	68bb      	ldr	r3, [r7, #8]
    1570:	3308      	adds	r3, #8
    1572:	429a      	cmp	r2, r3
    1574:	d103      	bne.n	157e <vTaskSwitchContext+0xe6>
    1576:	68bb      	ldr	r3, [r7, #8]
    1578:	68da      	ldr	r2, [r3, #12]
    157a:	68bb      	ldr	r3, [r7, #8]
    157c:	605a      	str	r2, [r3, #4]
    157e:	68bb      	ldr	r3, [r7, #8]
    1580:	685b      	ldr	r3, [r3, #4]
    1582:	68db      	ldr	r3, [r3, #12]
    1584:	4a06      	ldr	r2, [pc, #24]	; (15a0 <vTaskSwitchContext+0x108>)
    1586:	6013      	str	r3, [r2, #0]
    1588:	4a06      	ldr	r2, [pc, #24]	; (15a4 <vTaskSwitchContext+0x10c>)
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	6013      	str	r3, [r2, #0]
}
    158e:	bf00      	nop
    1590:	3718      	adds	r7, #24
    1592:	46bd      	mov	sp, r7
    1594:	bd80      	pop	{r7, pc}
    1596:	bf00      	nop
    1598:	200000fc 	.word	0x200000fc
    159c:	200000e8 	.word	0x200000e8
    15a0:	20000014 	.word	0x20000014
    15a4:	200000dc 	.word	0x200000dc
    15a8:	e000edf0 	.word	0xe000edf0
    15ac:	20000018 	.word	0x20000018

000015b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
    15b0:	b580      	push	{r7, lr}
    15b2:	b084      	sub	sp, #16
    15b4:	af00      	add	r7, sp, #0
    15b6:	6078      	str	r0, [r7, #4]
    15b8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	2b00      	cmp	r3, #0
    15be:	d112      	bne.n	15e6 <vTaskPlaceOnEventList+0x36>
    15c0:	4b10      	ldr	r3, [pc, #64]	; (1604 <vTaskPlaceOnEventList+0x54>)
    15c2:	60fb      	str	r3, [r7, #12]
    15c4:	68fb      	ldr	r3, [r7, #12]
    15c6:	681b      	ldr	r3, [r3, #0]
    15c8:	f003 0301 	and.w	r3, r3, #1
    15cc:	2b00      	cmp	r3, #0
    15ce:	d00a      	beq.n	15e6 <vTaskPlaceOnEventList+0x36>
        __asm volatile
    15d0:	f04f 0340 	mov.w	r3, #64	; 0x40
    15d4:	f383 8811 	msr	BASEPRI, r3
    15d8:	f3bf 8f6f 	isb	sy
    15dc:	f3bf 8f4f 	dsb	sy
    15e0:	60bb      	str	r3, [r7, #8]
    }
    15e2:	bf00      	nop
    15e4:	be00      	bkpt	0x0000
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    15e6:	4b08      	ldr	r3, [pc, #32]	; (1608 <vTaskPlaceOnEventList+0x58>)
    15e8:	681b      	ldr	r3, [r3, #0]
    15ea:	3318      	adds	r3, #24
    15ec:	4619      	mov	r1, r3
    15ee:	6878      	ldr	r0, [r7, #4]
    15f0:	f001 f903 	bl	27fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    15f4:	2101      	movs	r1, #1
    15f6:	6838      	ldr	r0, [r7, #0]
    15f8:	f000 fb10 	bl	1c1c <prvAddCurrentTaskToDelayedList>
}
    15fc:	bf00      	nop
    15fe:	3710      	adds	r7, #16
    1600:	46bd      	mov	sp, r7
    1602:	bd80      	pop	{r7, pc}
    1604:	e000edf0 	.word	0xe000edf0
    1608:	20000014 	.word	0x20000014

0000160c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
    160c:	b580      	push	{r7, lr}
    160e:	b088      	sub	sp, #32
    1610:	af00      	add	r7, sp, #0
    1612:	60f8      	str	r0, [r7, #12]
    1614:	60b9      	str	r1, [r7, #8]
    1616:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
    1618:	68fb      	ldr	r3, [r7, #12]
    161a:	2b00      	cmp	r3, #0
    161c:	d112      	bne.n	1644 <vTaskPlaceOnEventListRestricted+0x38>
    161e:	4b21      	ldr	r3, [pc, #132]	; (16a4 <vTaskPlaceOnEventListRestricted+0x98>)
    1620:	61fb      	str	r3, [r7, #28]
    1622:	69fb      	ldr	r3, [r7, #28]
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	f003 0301 	and.w	r3, r3, #1
    162a:	2b00      	cmp	r3, #0
    162c:	d00a      	beq.n	1644 <vTaskPlaceOnEventListRestricted+0x38>
        __asm volatile
    162e:	f04f 0340 	mov.w	r3, #64	; 0x40
    1632:	f383 8811 	msr	BASEPRI, r3
    1636:	f3bf 8f6f 	isb	sy
    163a:	f3bf 8f4f 	dsb	sy
    163e:	617b      	str	r3, [r7, #20]
    }
    1640:	bf00      	nop
    1642:	be00      	bkpt	0x0000

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1644:	68fb      	ldr	r3, [r7, #12]
    1646:	685b      	ldr	r3, [r3, #4]
    1648:	61bb      	str	r3, [r7, #24]
    164a:	4b17      	ldr	r3, [pc, #92]	; (16a8 <vTaskPlaceOnEventListRestricted+0x9c>)
    164c:	681b      	ldr	r3, [r3, #0]
    164e:	69ba      	ldr	r2, [r7, #24]
    1650:	61da      	str	r2, [r3, #28]
    1652:	4b15      	ldr	r3, [pc, #84]	; (16a8 <vTaskPlaceOnEventListRestricted+0x9c>)
    1654:	681b      	ldr	r3, [r3, #0]
    1656:	69ba      	ldr	r2, [r7, #24]
    1658:	6892      	ldr	r2, [r2, #8]
    165a:	621a      	str	r2, [r3, #32]
    165c:	4b12      	ldr	r3, [pc, #72]	; (16a8 <vTaskPlaceOnEventListRestricted+0x9c>)
    165e:	681a      	ldr	r2, [r3, #0]
    1660:	69bb      	ldr	r3, [r7, #24]
    1662:	689b      	ldr	r3, [r3, #8]
    1664:	3218      	adds	r2, #24
    1666:	605a      	str	r2, [r3, #4]
    1668:	4b0f      	ldr	r3, [pc, #60]	; (16a8 <vTaskPlaceOnEventListRestricted+0x9c>)
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	f103 0218 	add.w	r2, r3, #24
    1670:	69bb      	ldr	r3, [r7, #24]
    1672:	609a      	str	r2, [r3, #8]
    1674:	4b0c      	ldr	r3, [pc, #48]	; (16a8 <vTaskPlaceOnEventListRestricted+0x9c>)
    1676:	681b      	ldr	r3, [r3, #0]
    1678:	68fa      	ldr	r2, [r7, #12]
    167a:	629a      	str	r2, [r3, #40]	; 0x28
    167c:	68fb      	ldr	r3, [r7, #12]
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	1c5a      	adds	r2, r3, #1
    1682:	68fb      	ldr	r3, [r7, #12]
    1684:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
    1686:	687b      	ldr	r3, [r7, #4]
    1688:	2b00      	cmp	r3, #0
    168a:	d002      	beq.n	1692 <vTaskPlaceOnEventListRestricted+0x86>
        {
            xTicksToWait = portMAX_DELAY;
    168c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1690:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    1692:	6879      	ldr	r1, [r7, #4]
    1694:	68b8      	ldr	r0, [r7, #8]
    1696:	f000 fac1 	bl	1c1c <prvAddCurrentTaskToDelayedList>
    }
    169a:	bf00      	nop
    169c:	3720      	adds	r7, #32
    169e:	46bd      	mov	sp, r7
    16a0:	bd80      	pop	{r7, pc}
    16a2:	bf00      	nop
    16a4:	e000edf0 	.word	0xe000edf0
    16a8:	20000014 	.word	0x20000014

000016ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    16ac:	b480      	push	{r7}
    16ae:	b08b      	sub	sp, #44	; 0x2c
    16b0:	af00      	add	r7, sp, #0
    16b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	68db      	ldr	r3, [r3, #12]
    16b8:	68db      	ldr	r3, [r3, #12]
    16ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
    16bc:	6a3b      	ldr	r3, [r7, #32]
    16be:	2b00      	cmp	r3, #0
    16c0:	d112      	bne.n	16e8 <xTaskRemoveFromEventList+0x3c>
    16c2:	4b64      	ldr	r3, [pc, #400]	; (1854 <xTaskRemoveFromEventList+0x1a8>)
    16c4:	61fb      	str	r3, [r7, #28]
    16c6:	69fb      	ldr	r3, [r7, #28]
    16c8:	681b      	ldr	r3, [r3, #0]
    16ca:	f003 0301 	and.w	r3, r3, #1
    16ce:	2b00      	cmp	r3, #0
    16d0:	d00a      	beq.n	16e8 <xTaskRemoveFromEventList+0x3c>
        __asm volatile
    16d2:	f04f 0340 	mov.w	r3, #64	; 0x40
    16d6:	f383 8811 	msr	BASEPRI, r3
    16da:	f3bf 8f6f 	isb	sy
    16de:	f3bf 8f4f 	dsb	sy
    16e2:	60bb      	str	r3, [r7, #8]
    }
    16e4:	bf00      	nop
    16e6:	be00      	bkpt	0x0000
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    16e8:	6a3b      	ldr	r3, [r7, #32]
    16ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16ec:	61bb      	str	r3, [r7, #24]
    16ee:	6a3b      	ldr	r3, [r7, #32]
    16f0:	69db      	ldr	r3, [r3, #28]
    16f2:	6a3a      	ldr	r2, [r7, #32]
    16f4:	6a12      	ldr	r2, [r2, #32]
    16f6:	609a      	str	r2, [r3, #8]
    16f8:	6a3b      	ldr	r3, [r7, #32]
    16fa:	6a1b      	ldr	r3, [r3, #32]
    16fc:	6a3a      	ldr	r2, [r7, #32]
    16fe:	69d2      	ldr	r2, [r2, #28]
    1700:	605a      	str	r2, [r3, #4]
    1702:	69bb      	ldr	r3, [r7, #24]
    1704:	685a      	ldr	r2, [r3, #4]
    1706:	6a3b      	ldr	r3, [r7, #32]
    1708:	3318      	adds	r3, #24
    170a:	429a      	cmp	r2, r3
    170c:	d103      	bne.n	1716 <xTaskRemoveFromEventList+0x6a>
    170e:	6a3b      	ldr	r3, [r7, #32]
    1710:	6a1a      	ldr	r2, [r3, #32]
    1712:	69bb      	ldr	r3, [r7, #24]
    1714:	605a      	str	r2, [r3, #4]
    1716:	6a3b      	ldr	r3, [r7, #32]
    1718:	2200      	movs	r2, #0
    171a:	629a      	str	r2, [r3, #40]	; 0x28
    171c:	69bb      	ldr	r3, [r7, #24]
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	1e5a      	subs	r2, r3, #1
    1722:	69bb      	ldr	r3, [r7, #24]
    1724:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    1726:	4b4c      	ldr	r3, [pc, #304]	; (1858 <xTaskRemoveFromEventList+0x1ac>)
    1728:	681b      	ldr	r3, [r3, #0]
    172a:	2b00      	cmp	r3, #0
    172c:	d15f      	bne.n	17ee <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    172e:	6a3b      	ldr	r3, [r7, #32]
    1730:	695b      	ldr	r3, [r3, #20]
    1732:	613b      	str	r3, [r7, #16]
    1734:	6a3b      	ldr	r3, [r7, #32]
    1736:	689b      	ldr	r3, [r3, #8]
    1738:	6a3a      	ldr	r2, [r7, #32]
    173a:	68d2      	ldr	r2, [r2, #12]
    173c:	609a      	str	r2, [r3, #8]
    173e:	6a3b      	ldr	r3, [r7, #32]
    1740:	68db      	ldr	r3, [r3, #12]
    1742:	6a3a      	ldr	r2, [r7, #32]
    1744:	6892      	ldr	r2, [r2, #8]
    1746:	605a      	str	r2, [r3, #4]
    1748:	693b      	ldr	r3, [r7, #16]
    174a:	685a      	ldr	r2, [r3, #4]
    174c:	6a3b      	ldr	r3, [r7, #32]
    174e:	3304      	adds	r3, #4
    1750:	429a      	cmp	r2, r3
    1752:	d103      	bne.n	175c <xTaskRemoveFromEventList+0xb0>
    1754:	6a3b      	ldr	r3, [r7, #32]
    1756:	68da      	ldr	r2, [r3, #12]
    1758:	693b      	ldr	r3, [r7, #16]
    175a:	605a      	str	r2, [r3, #4]
    175c:	6a3b      	ldr	r3, [r7, #32]
    175e:	2200      	movs	r2, #0
    1760:	615a      	str	r2, [r3, #20]
    1762:	693b      	ldr	r3, [r7, #16]
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	1e5a      	subs	r2, r3, #1
    1768:	693b      	ldr	r3, [r7, #16]
    176a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
    176c:	6a3b      	ldr	r3, [r7, #32]
    176e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1770:	4b3a      	ldr	r3, [pc, #232]	; (185c <xTaskRemoveFromEventList+0x1b0>)
    1772:	681b      	ldr	r3, [r3, #0]
    1774:	429a      	cmp	r2, r3
    1776:	d903      	bls.n	1780 <xTaskRemoveFromEventList+0xd4>
    1778:	6a3b      	ldr	r3, [r7, #32]
    177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    177c:	4a37      	ldr	r2, [pc, #220]	; (185c <xTaskRemoveFromEventList+0x1b0>)
    177e:	6013      	str	r3, [r2, #0]
    1780:	6a3b      	ldr	r3, [r7, #32]
    1782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1784:	4936      	ldr	r1, [pc, #216]	; (1860 <xTaskRemoveFromEventList+0x1b4>)
    1786:	4613      	mov	r3, r2
    1788:	009b      	lsls	r3, r3, #2
    178a:	4413      	add	r3, r2
    178c:	009b      	lsls	r3, r3, #2
    178e:	440b      	add	r3, r1
    1790:	3304      	adds	r3, #4
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	60fb      	str	r3, [r7, #12]
    1796:	6a3b      	ldr	r3, [r7, #32]
    1798:	68fa      	ldr	r2, [r7, #12]
    179a:	609a      	str	r2, [r3, #8]
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	689a      	ldr	r2, [r3, #8]
    17a0:	6a3b      	ldr	r3, [r7, #32]
    17a2:	60da      	str	r2, [r3, #12]
    17a4:	68fb      	ldr	r3, [r7, #12]
    17a6:	689b      	ldr	r3, [r3, #8]
    17a8:	6a3a      	ldr	r2, [r7, #32]
    17aa:	3204      	adds	r2, #4
    17ac:	605a      	str	r2, [r3, #4]
    17ae:	6a3b      	ldr	r3, [r7, #32]
    17b0:	1d1a      	adds	r2, r3, #4
    17b2:	68fb      	ldr	r3, [r7, #12]
    17b4:	609a      	str	r2, [r3, #8]
    17b6:	6a3b      	ldr	r3, [r7, #32]
    17b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    17ba:	4613      	mov	r3, r2
    17bc:	009b      	lsls	r3, r3, #2
    17be:	4413      	add	r3, r2
    17c0:	009b      	lsls	r3, r3, #2
    17c2:	4a27      	ldr	r2, [pc, #156]	; (1860 <xTaskRemoveFromEventList+0x1b4>)
    17c4:	441a      	add	r2, r3
    17c6:	6a3b      	ldr	r3, [r7, #32]
    17c8:	615a      	str	r2, [r3, #20]
    17ca:	6a3b      	ldr	r3, [r7, #32]
    17cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    17ce:	4924      	ldr	r1, [pc, #144]	; (1860 <xTaskRemoveFromEventList+0x1b4>)
    17d0:	4613      	mov	r3, r2
    17d2:	009b      	lsls	r3, r3, #2
    17d4:	4413      	add	r3, r2
    17d6:	009b      	lsls	r3, r3, #2
    17d8:	440b      	add	r3, r1
    17da:	681b      	ldr	r3, [r3, #0]
    17dc:	1c59      	adds	r1, r3, #1
    17de:	4820      	ldr	r0, [pc, #128]	; (1860 <xTaskRemoveFromEventList+0x1b4>)
    17e0:	4613      	mov	r3, r2
    17e2:	009b      	lsls	r3, r3, #2
    17e4:	4413      	add	r3, r2
    17e6:	009b      	lsls	r3, r3, #2
    17e8:	4403      	add	r3, r0
    17ea:	6019      	str	r1, [r3, #0]
    17ec:	e01b      	b.n	1826 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    17ee:	4b1d      	ldr	r3, [pc, #116]	; (1864 <xTaskRemoveFromEventList+0x1b8>)
    17f0:	685b      	ldr	r3, [r3, #4]
    17f2:	617b      	str	r3, [r7, #20]
    17f4:	6a3b      	ldr	r3, [r7, #32]
    17f6:	697a      	ldr	r2, [r7, #20]
    17f8:	61da      	str	r2, [r3, #28]
    17fa:	697b      	ldr	r3, [r7, #20]
    17fc:	689a      	ldr	r2, [r3, #8]
    17fe:	6a3b      	ldr	r3, [r7, #32]
    1800:	621a      	str	r2, [r3, #32]
    1802:	697b      	ldr	r3, [r7, #20]
    1804:	689b      	ldr	r3, [r3, #8]
    1806:	6a3a      	ldr	r2, [r7, #32]
    1808:	3218      	adds	r2, #24
    180a:	605a      	str	r2, [r3, #4]
    180c:	6a3b      	ldr	r3, [r7, #32]
    180e:	f103 0218 	add.w	r2, r3, #24
    1812:	697b      	ldr	r3, [r7, #20]
    1814:	609a      	str	r2, [r3, #8]
    1816:	6a3b      	ldr	r3, [r7, #32]
    1818:	4a12      	ldr	r2, [pc, #72]	; (1864 <xTaskRemoveFromEventList+0x1b8>)
    181a:	629a      	str	r2, [r3, #40]	; 0x28
    181c:	4b11      	ldr	r3, [pc, #68]	; (1864 <xTaskRemoveFromEventList+0x1b8>)
    181e:	681b      	ldr	r3, [r3, #0]
    1820:	3301      	adds	r3, #1
    1822:	4a10      	ldr	r2, [pc, #64]	; (1864 <xTaskRemoveFromEventList+0x1b8>)
    1824:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1826:	6a3b      	ldr	r3, [r7, #32]
    1828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    182a:	4b0f      	ldr	r3, [pc, #60]	; (1868 <xTaskRemoveFromEventList+0x1bc>)
    182c:	681b      	ldr	r3, [r3, #0]
    182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1830:	429a      	cmp	r2, r3
    1832:	d905      	bls.n	1840 <xTaskRemoveFromEventList+0x194>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
    1834:	2301      	movs	r3, #1
    1836:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
    1838:	4b0c      	ldr	r3, [pc, #48]	; (186c <xTaskRemoveFromEventList+0x1c0>)
    183a:	2201      	movs	r2, #1
    183c:	601a      	str	r2, [r3, #0]
    183e:	e001      	b.n	1844 <xTaskRemoveFromEventList+0x198>
    }
    else
    {
        xReturn = pdFALSE;
    1840:	2300      	movs	r3, #0
    1842:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
    1844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1846:	4618      	mov	r0, r3
    1848:	372c      	adds	r7, #44	; 0x2c
    184a:	46bd      	mov	sp, r7
    184c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1850:	4770      	bx	lr
    1852:	bf00      	nop
    1854:	e000edf0 	.word	0xe000edf0
    1858:	200000fc 	.word	0x200000fc
    185c:	200000dc 	.word	0x200000dc
    1860:	20000018 	.word	0x20000018
    1864:	200000ac 	.word	0x200000ac
    1868:	20000014 	.word	0x20000014
    186c:	200000e8 	.word	0x200000e8

00001870 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    1870:	b480      	push	{r7}
    1872:	b083      	sub	sp, #12
    1874:	af00      	add	r7, sp, #0
    1876:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1878:	4b06      	ldr	r3, [pc, #24]	; (1894 <vTaskInternalSetTimeOutState+0x24>)
    187a:	681a      	ldr	r2, [r3, #0]
    187c:	687b      	ldr	r3, [r7, #4]
    187e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
    1880:	4b05      	ldr	r3, [pc, #20]	; (1898 <vTaskInternalSetTimeOutState+0x28>)
    1882:	681a      	ldr	r2, [r3, #0]
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	605a      	str	r2, [r3, #4]
}
    1888:	bf00      	nop
    188a:	370c      	adds	r7, #12
    188c:	46bd      	mov	sp, r7
    188e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1892:	4770      	bx	lr
    1894:	200000ec 	.word	0x200000ec
    1898:	200000d8 	.word	0x200000d8

0000189c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    189c:	b580      	push	{r7, lr}
    189e:	b08a      	sub	sp, #40	; 0x28
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
    18a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	2b00      	cmp	r3, #0
    18aa:	d112      	bne.n	18d2 <xTaskCheckForTimeOut+0x36>
    18ac:	4b34      	ldr	r3, [pc, #208]	; (1980 <xTaskCheckForTimeOut+0xe4>)
    18ae:	623b      	str	r3, [r7, #32]
    18b0:	6a3b      	ldr	r3, [r7, #32]
    18b2:	681b      	ldr	r3, [r3, #0]
    18b4:	f003 0301 	and.w	r3, r3, #1
    18b8:	2b00      	cmp	r3, #0
    18ba:	d00a      	beq.n	18d2 <xTaskCheckForTimeOut+0x36>
        __asm volatile
    18bc:	f04f 0340 	mov.w	r3, #64	; 0x40
    18c0:	f383 8811 	msr	BASEPRI, r3
    18c4:	f3bf 8f6f 	isb	sy
    18c8:	f3bf 8f4f 	dsb	sy
    18cc:	613b      	str	r3, [r7, #16]
    }
    18ce:	bf00      	nop
    18d0:	be00      	bkpt	0x0000
    configASSERT( pxTicksToWait );
    18d2:	683b      	ldr	r3, [r7, #0]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d112      	bne.n	18fe <xTaskCheckForTimeOut+0x62>
    18d8:	4b29      	ldr	r3, [pc, #164]	; (1980 <xTaskCheckForTimeOut+0xe4>)
    18da:	61fb      	str	r3, [r7, #28]
    18dc:	69fb      	ldr	r3, [r7, #28]
    18de:	681b      	ldr	r3, [r3, #0]
    18e0:	f003 0301 	and.w	r3, r3, #1
    18e4:	2b00      	cmp	r3, #0
    18e6:	d00a      	beq.n	18fe <xTaskCheckForTimeOut+0x62>
        __asm volatile
    18e8:	f04f 0340 	mov.w	r3, #64	; 0x40
    18ec:	f383 8811 	msr	BASEPRI, r3
    18f0:	f3bf 8f6f 	isb	sy
    18f4:	f3bf 8f4f 	dsb	sy
    18f8:	60fb      	str	r3, [r7, #12]
    }
    18fa:	bf00      	nop
    18fc:	be00      	bkpt	0x0000

    taskENTER_CRITICAL();
    18fe:	f001 fed5 	bl	36ac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1902:	4b20      	ldr	r3, [pc, #128]	; (1984 <xTaskCheckForTimeOut+0xe8>)
    1904:	681b      	ldr	r3, [r3, #0]
    1906:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	685b      	ldr	r3, [r3, #4]
    190c:	69ba      	ldr	r2, [r7, #24]
    190e:	1ad3      	subs	r3, r2, r3
    1910:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
    1912:	683b      	ldr	r3, [r7, #0]
    1914:	681b      	ldr	r3, [r3, #0]
    1916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    191a:	d102      	bne.n	1922 <xTaskCheckForTimeOut+0x86>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
    191c:	2300      	movs	r3, #0
    191e:	627b      	str	r3, [r7, #36]	; 0x24
    1920:	e026      	b.n	1970 <xTaskCheckForTimeOut+0xd4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	681a      	ldr	r2, [r3, #0]
    1926:	4b18      	ldr	r3, [pc, #96]	; (1988 <xTaskCheckForTimeOut+0xec>)
    1928:	681b      	ldr	r3, [r3, #0]
    192a:	429a      	cmp	r2, r3
    192c:	d00a      	beq.n	1944 <xTaskCheckForTimeOut+0xa8>
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	685b      	ldr	r3, [r3, #4]
    1932:	69ba      	ldr	r2, [r7, #24]
    1934:	429a      	cmp	r2, r3
    1936:	d305      	bcc.n	1944 <xTaskCheckForTimeOut+0xa8>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1938:	2301      	movs	r3, #1
    193a:	627b      	str	r3, [r7, #36]	; 0x24
            *pxTicksToWait = ( TickType_t ) 0;
    193c:	683b      	ldr	r3, [r7, #0]
    193e:	2200      	movs	r2, #0
    1940:	601a      	str	r2, [r3, #0]
    1942:	e015      	b.n	1970 <xTaskCheckForTimeOut+0xd4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1944:	683b      	ldr	r3, [r7, #0]
    1946:	681b      	ldr	r3, [r3, #0]
    1948:	697a      	ldr	r2, [r7, #20]
    194a:	429a      	cmp	r2, r3
    194c:	d20b      	bcs.n	1966 <xTaskCheckForTimeOut+0xca>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    194e:	683b      	ldr	r3, [r7, #0]
    1950:	681a      	ldr	r2, [r3, #0]
    1952:	697b      	ldr	r3, [r7, #20]
    1954:	1ad2      	subs	r2, r2, r3
    1956:	683b      	ldr	r3, [r7, #0]
    1958:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
    195a:	6878      	ldr	r0, [r7, #4]
    195c:	f7ff ff88 	bl	1870 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1960:	2300      	movs	r3, #0
    1962:	627b      	str	r3, [r7, #36]	; 0x24
    1964:	e004      	b.n	1970 <xTaskCheckForTimeOut+0xd4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1966:	683b      	ldr	r3, [r7, #0]
    1968:	2200      	movs	r2, #0
    196a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
    196c:	2301      	movs	r3, #1
    196e:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    taskEXIT_CRITICAL();
    1970:	f001 fed6 	bl	3720 <vPortExitCritical>

    return xReturn;
    1974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1976:	4618      	mov	r0, r3
    1978:	3728      	adds	r7, #40	; 0x28
    197a:	46bd      	mov	sp, r7
    197c:	bd80      	pop	{r7, pc}
    197e:	bf00      	nop
    1980:	e000edf0 	.word	0xe000edf0
    1984:	200000d8 	.word	0x200000d8
    1988:	200000ec 	.word	0x200000ec

0000198c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    198c:	b480      	push	{r7}
    198e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
    1990:	4b03      	ldr	r3, [pc, #12]	; (19a0 <vTaskMissedYield+0x14>)
    1992:	2201      	movs	r2, #1
    1994:	601a      	str	r2, [r3, #0]
}
    1996:	bf00      	nop
    1998:	46bd      	mov	sp, r7
    199a:	f85d 7b04 	ldr.w	r7, [sp], #4
    199e:	4770      	bx	lr
    19a0:	200000e8 	.word	0x200000e8

000019a4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    19a4:	b580      	push	{r7, lr}
    19a6:	b082      	sub	sp, #8
    19a8:	af00      	add	r7, sp, #0
    19aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
    19ac:	f000 f84c 	bl	1a48 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    19b0:	4b06      	ldr	r3, [pc, #24]	; (19cc <prvIdleTask+0x28>)
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	2b01      	cmp	r3, #1
    19b6:	d9f9      	bls.n	19ac <prvIdleTask+0x8>
            {
                taskYIELD();
    19b8:	4b05      	ldr	r3, [pc, #20]	; (19d0 <prvIdleTask+0x2c>)
    19ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    19be:	601a      	str	r2, [r3, #0]
    19c0:	f3bf 8f4f 	dsb	sy
    19c4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
    19c8:	e7f0      	b.n	19ac <prvIdleTask+0x8>
    19ca:	bf00      	nop
    19cc:	20000018 	.word	0x20000018
    19d0:	e000ed04 	.word	0xe000ed04

000019d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    19d4:	b580      	push	{r7, lr}
    19d6:	b082      	sub	sp, #8
    19d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    19da:	2300      	movs	r3, #0
    19dc:	607b      	str	r3, [r7, #4]
    19de:	e00c      	b.n	19fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    19e0:	687a      	ldr	r2, [r7, #4]
    19e2:	4613      	mov	r3, r2
    19e4:	009b      	lsls	r3, r3, #2
    19e6:	4413      	add	r3, r2
    19e8:	009b      	lsls	r3, r3, #2
    19ea:	4a10      	ldr	r2, [pc, #64]	; (1a2c <prvInitialiseTaskLists+0x58>)
    19ec:	4413      	add	r3, r2
    19ee:	4618      	mov	r0, r3
    19f0:	f000 fed6 	bl	27a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	3301      	adds	r3, #1
    19f8:	607b      	str	r3, [r7, #4]
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	2b04      	cmp	r3, #4
    19fe:	d9ef      	bls.n	19e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
    1a00:	480b      	ldr	r0, [pc, #44]	; (1a30 <prvInitialiseTaskLists+0x5c>)
    1a02:	f000 fecd 	bl	27a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
    1a06:	480b      	ldr	r0, [pc, #44]	; (1a34 <prvInitialiseTaskLists+0x60>)
    1a08:	f000 feca 	bl	27a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
    1a0c:	480a      	ldr	r0, [pc, #40]	; (1a38 <prvInitialiseTaskLists+0x64>)
    1a0e:	f000 fec7 	bl	27a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
    1a12:	480a      	ldr	r0, [pc, #40]	; (1a3c <prvInitialiseTaskLists+0x68>)
    1a14:	f000 fec4 	bl	27a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
    1a18:	4b09      	ldr	r3, [pc, #36]	; (1a40 <prvInitialiseTaskLists+0x6c>)
    1a1a:	4a05      	ldr	r2, [pc, #20]	; (1a30 <prvInitialiseTaskLists+0x5c>)
    1a1c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1a1e:	4b09      	ldr	r3, [pc, #36]	; (1a44 <prvInitialiseTaskLists+0x70>)
    1a20:	4a04      	ldr	r2, [pc, #16]	; (1a34 <prvInitialiseTaskLists+0x60>)
    1a22:	601a      	str	r2, [r3, #0]
}
    1a24:	bf00      	nop
    1a26:	3708      	adds	r7, #8
    1a28:	46bd      	mov	sp, r7
    1a2a:	bd80      	pop	{r7, pc}
    1a2c:	20000018 	.word	0x20000018
    1a30:	2000007c 	.word	0x2000007c
    1a34:	20000090 	.word	0x20000090
    1a38:	200000ac 	.word	0x200000ac
    1a3c:	200000c0 	.word	0x200000c0
    1a40:	200000a4 	.word	0x200000a4
    1a44:	200000a8 	.word	0x200000a8

00001a48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    1a48:	b480      	push	{r7}
    1a4a:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
    1a4c:	bf00      	nop
    1a4e:	46bd      	mov	sp, r7
    1a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a54:	4770      	bx	lr
	...

00001a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    1a58:	b480      	push	{r7}
    1a5a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1a5c:	4b0a      	ldr	r3, [pc, #40]	; (1a88 <prvResetNextTaskUnblockTime+0x30>)
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	681b      	ldr	r3, [r3, #0]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d104      	bne.n	1a70 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
    1a66:	4b09      	ldr	r3, [pc, #36]	; (1a8c <prvResetNextTaskUnblockTime+0x34>)
    1a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1a6c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
    1a6e:	e005      	b.n	1a7c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    1a70:	4b05      	ldr	r3, [pc, #20]	; (1a88 <prvResetNextTaskUnblockTime+0x30>)
    1a72:	681b      	ldr	r3, [r3, #0]
    1a74:	68db      	ldr	r3, [r3, #12]
    1a76:	681b      	ldr	r3, [r3, #0]
    1a78:	4a04      	ldr	r2, [pc, #16]	; (1a8c <prvResetNextTaskUnblockTime+0x34>)
    1a7a:	6013      	str	r3, [r2, #0]
}
    1a7c:	bf00      	nop
    1a7e:	46bd      	mov	sp, r7
    1a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a84:	4770      	bx	lr
    1a86:	bf00      	nop
    1a88:	200000a4 	.word	0x200000a4
    1a8c:	200000f4 	.word	0x200000f4

00001a90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
    1a90:	b480      	push	{r7}
    1a92:	b083      	sub	sp, #12
    1a94:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    1a96:	4b0b      	ldr	r3, [pc, #44]	; (1ac4 <xTaskGetSchedulerState+0x34>)
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d102      	bne.n	1aa4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    1a9e:	2301      	movs	r3, #1
    1aa0:	607b      	str	r3, [r7, #4]
    1aa2:	e008      	b.n	1ab6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    1aa4:	4b08      	ldr	r3, [pc, #32]	; (1ac8 <xTaskGetSchedulerState+0x38>)
    1aa6:	681b      	ldr	r3, [r3, #0]
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d102      	bne.n	1ab2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
    1aac:	2302      	movs	r3, #2
    1aae:	607b      	str	r3, [r7, #4]
    1ab0:	e001      	b.n	1ab6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    1ab2:	2300      	movs	r3, #0
    1ab4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
    1ab6:	687b      	ldr	r3, [r7, #4]
    }
    1ab8:	4618      	mov	r0, r3
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr
    1ac4:	200000e0 	.word	0x200000e0
    1ac8:	200000fc 	.word	0x200000fc

00001acc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1acc:	b580      	push	{r7, lr}
    1ace:	b08a      	sub	sp, #40	; 0x28
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
    1ad8:	2300      	movs	r3, #0
    1ada:	627b      	str	r3, [r7, #36]	; 0x24

        if( pxMutexHolder != NULL )
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	2b00      	cmp	r3, #0
    1ae0:	f000 808f 	beq.w	1c02 <xTaskPriorityDisinherit+0x136>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
    1ae4:	4b49      	ldr	r3, [pc, #292]	; (1c0c <xTaskPriorityDisinherit+0x140>)
    1ae6:	681b      	ldr	r3, [r3, #0]
    1ae8:	6a3a      	ldr	r2, [r7, #32]
    1aea:	429a      	cmp	r2, r3
    1aec:	d012      	beq.n	1b14 <xTaskPriorityDisinherit+0x48>
    1aee:	4b48      	ldr	r3, [pc, #288]	; (1c10 <xTaskPriorityDisinherit+0x144>)
    1af0:	61fb      	str	r3, [r7, #28]
    1af2:	69fb      	ldr	r3, [r7, #28]
    1af4:	681b      	ldr	r3, [r3, #0]
    1af6:	f003 0301 	and.w	r3, r3, #1
    1afa:	2b00      	cmp	r3, #0
    1afc:	d00a      	beq.n	1b14 <xTaskPriorityDisinherit+0x48>
        __asm volatile
    1afe:	f04f 0340 	mov.w	r3, #64	; 0x40
    1b02:	f383 8811 	msr	BASEPRI, r3
    1b06:	f3bf 8f6f 	isb	sy
    1b0a:	f3bf 8f4f 	dsb	sy
    1b0e:	613b      	str	r3, [r7, #16]
    }
    1b10:	bf00      	nop
    1b12:	be00      	bkpt	0x0000
            configASSERT( pxTCB->uxMutexesHeld );
    1b14:	6a3b      	ldr	r3, [r7, #32]
    1b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d112      	bne.n	1b42 <xTaskPriorityDisinherit+0x76>
    1b1c:	4b3c      	ldr	r3, [pc, #240]	; (1c10 <xTaskPriorityDisinherit+0x144>)
    1b1e:	61bb      	str	r3, [r7, #24]
    1b20:	69bb      	ldr	r3, [r7, #24]
    1b22:	681b      	ldr	r3, [r3, #0]
    1b24:	f003 0301 	and.w	r3, r3, #1
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d00a      	beq.n	1b42 <xTaskPriorityDisinherit+0x76>
        __asm volatile
    1b2c:	f04f 0340 	mov.w	r3, #64	; 0x40
    1b30:	f383 8811 	msr	BASEPRI, r3
    1b34:	f3bf 8f6f 	isb	sy
    1b38:	f3bf 8f4f 	dsb	sy
    1b3c:	60fb      	str	r3, [r7, #12]
    }
    1b3e:	bf00      	nop
    1b40:	be00      	bkpt	0x0000
            ( pxTCB->uxMutexesHeld )--;
    1b42:	6a3b      	ldr	r3, [r7, #32]
    1b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1b46:	1e5a      	subs	r2, r3, #1
    1b48:	6a3b      	ldr	r3, [r7, #32]
    1b4a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1b4c:	6a3b      	ldr	r3, [r7, #32]
    1b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b50:	6a3b      	ldr	r3, [r7, #32]
    1b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1b54:	429a      	cmp	r2, r3
    1b56:	d054      	beq.n	1c02 <xTaskPriorityDisinherit+0x136>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1b58:	6a3b      	ldr	r3, [r7, #32]
    1b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d150      	bne.n	1c02 <xTaskPriorityDisinherit+0x136>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1b60:	6a3b      	ldr	r3, [r7, #32]
    1b62:	3304      	adds	r3, #4
    1b64:	4618      	mov	r0, r3
    1b66:	f000 fe81 	bl	286c <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1b6a:	6a3b      	ldr	r3, [r7, #32]
    1b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1b6e:	6a3b      	ldr	r3, [r7, #32]
    1b70:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b72:	6a3b      	ldr	r3, [r7, #32]
    1b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b76:	f1c3 0205 	rsb	r2, r3, #5
    1b7a:	6a3b      	ldr	r3, [r7, #32]
    1b7c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
    1b7e:	6a3b      	ldr	r3, [r7, #32]
    1b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b82:	4b24      	ldr	r3, [pc, #144]	; (1c14 <xTaskPriorityDisinherit+0x148>)
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	429a      	cmp	r2, r3
    1b88:	d903      	bls.n	1b92 <xTaskPriorityDisinherit+0xc6>
    1b8a:	6a3b      	ldr	r3, [r7, #32]
    1b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b8e:	4a21      	ldr	r2, [pc, #132]	; (1c14 <xTaskPriorityDisinherit+0x148>)
    1b90:	6013      	str	r3, [r2, #0]
    1b92:	6a3b      	ldr	r3, [r7, #32]
    1b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b96:	4920      	ldr	r1, [pc, #128]	; (1c18 <xTaskPriorityDisinherit+0x14c>)
    1b98:	4613      	mov	r3, r2
    1b9a:	009b      	lsls	r3, r3, #2
    1b9c:	4413      	add	r3, r2
    1b9e:	009b      	lsls	r3, r3, #2
    1ba0:	440b      	add	r3, r1
    1ba2:	3304      	adds	r3, #4
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	617b      	str	r3, [r7, #20]
    1ba8:	6a3b      	ldr	r3, [r7, #32]
    1baa:	697a      	ldr	r2, [r7, #20]
    1bac:	609a      	str	r2, [r3, #8]
    1bae:	697b      	ldr	r3, [r7, #20]
    1bb0:	689a      	ldr	r2, [r3, #8]
    1bb2:	6a3b      	ldr	r3, [r7, #32]
    1bb4:	60da      	str	r2, [r3, #12]
    1bb6:	697b      	ldr	r3, [r7, #20]
    1bb8:	689b      	ldr	r3, [r3, #8]
    1bba:	6a3a      	ldr	r2, [r7, #32]
    1bbc:	3204      	adds	r2, #4
    1bbe:	605a      	str	r2, [r3, #4]
    1bc0:	6a3b      	ldr	r3, [r7, #32]
    1bc2:	1d1a      	adds	r2, r3, #4
    1bc4:	697b      	ldr	r3, [r7, #20]
    1bc6:	609a      	str	r2, [r3, #8]
    1bc8:	6a3b      	ldr	r3, [r7, #32]
    1bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bcc:	4613      	mov	r3, r2
    1bce:	009b      	lsls	r3, r3, #2
    1bd0:	4413      	add	r3, r2
    1bd2:	009b      	lsls	r3, r3, #2
    1bd4:	4a10      	ldr	r2, [pc, #64]	; (1c18 <xTaskPriorityDisinherit+0x14c>)
    1bd6:	441a      	add	r2, r3
    1bd8:	6a3b      	ldr	r3, [r7, #32]
    1bda:	615a      	str	r2, [r3, #20]
    1bdc:	6a3b      	ldr	r3, [r7, #32]
    1bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1be0:	490d      	ldr	r1, [pc, #52]	; (1c18 <xTaskPriorityDisinherit+0x14c>)
    1be2:	4613      	mov	r3, r2
    1be4:	009b      	lsls	r3, r3, #2
    1be6:	4413      	add	r3, r2
    1be8:	009b      	lsls	r3, r3, #2
    1bea:	440b      	add	r3, r1
    1bec:	681b      	ldr	r3, [r3, #0]
    1bee:	1c59      	adds	r1, r3, #1
    1bf0:	4809      	ldr	r0, [pc, #36]	; (1c18 <xTaskPriorityDisinherit+0x14c>)
    1bf2:	4613      	mov	r3, r2
    1bf4:	009b      	lsls	r3, r3, #2
    1bf6:	4413      	add	r3, r2
    1bf8:	009b      	lsls	r3, r3, #2
    1bfa:	4403      	add	r3, r0
    1bfc:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1bfe:	2301      	movs	r3, #1
    1c00:	627b      	str	r3, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    1c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    1c04:	4618      	mov	r0, r3
    1c06:	3728      	adds	r7, #40	; 0x28
    1c08:	46bd      	mov	sp, r7
    1c0a:	bd80      	pop	{r7, pc}
    1c0c:	20000014 	.word	0x20000014
    1c10:	e000edf0 	.word	0xe000edf0
    1c14:	200000dc 	.word	0x200000dc
    1c18:	20000018 	.word	0x20000018

00001c1c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    1c1c:	b580      	push	{r7, lr}
    1c1e:	b086      	sub	sp, #24
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    1c26:	4b2e      	ldr	r3, [pc, #184]	; (1ce0 <prvAddCurrentTaskToDelayedList+0xc4>)
    1c28:	681b      	ldr	r3, [r3, #0]
    1c2a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1c2c:	4b2d      	ldr	r3, [pc, #180]	; (1ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
    1c2e:	681b      	ldr	r3, [r3, #0]
    1c30:	3304      	adds	r3, #4
    1c32:	4618      	mov	r0, r3
    1c34:	f000 fe1a 	bl	286c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1c38:	687b      	ldr	r3, [r7, #4]
    1c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1c3e:	d124      	bne.n	1c8a <prvAddCurrentTaskToDelayedList+0x6e>
    1c40:	683b      	ldr	r3, [r7, #0]
    1c42:	2b00      	cmp	r3, #0
    1c44:	d021      	beq.n	1c8a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1c46:	4b28      	ldr	r3, [pc, #160]	; (1ce8 <prvAddCurrentTaskToDelayedList+0xcc>)
    1c48:	685b      	ldr	r3, [r3, #4]
    1c4a:	613b      	str	r3, [r7, #16]
    1c4c:	4b25      	ldr	r3, [pc, #148]	; (1ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
    1c4e:	681b      	ldr	r3, [r3, #0]
    1c50:	693a      	ldr	r2, [r7, #16]
    1c52:	609a      	str	r2, [r3, #8]
    1c54:	4b23      	ldr	r3, [pc, #140]	; (1ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
    1c56:	681b      	ldr	r3, [r3, #0]
    1c58:	693a      	ldr	r2, [r7, #16]
    1c5a:	6892      	ldr	r2, [r2, #8]
    1c5c:	60da      	str	r2, [r3, #12]
    1c5e:	4b21      	ldr	r3, [pc, #132]	; (1ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
    1c60:	681a      	ldr	r2, [r3, #0]
    1c62:	693b      	ldr	r3, [r7, #16]
    1c64:	689b      	ldr	r3, [r3, #8]
    1c66:	3204      	adds	r2, #4
    1c68:	605a      	str	r2, [r3, #4]
    1c6a:	4b1e      	ldr	r3, [pc, #120]	; (1ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
    1c6c:	681b      	ldr	r3, [r3, #0]
    1c6e:	1d1a      	adds	r2, r3, #4
    1c70:	693b      	ldr	r3, [r7, #16]
    1c72:	609a      	str	r2, [r3, #8]
    1c74:	4b1b      	ldr	r3, [pc, #108]	; (1ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
    1c76:	681b      	ldr	r3, [r3, #0]
    1c78:	4a1b      	ldr	r2, [pc, #108]	; (1ce8 <prvAddCurrentTaskToDelayedList+0xcc>)
    1c7a:	615a      	str	r2, [r3, #20]
    1c7c:	4b1a      	ldr	r3, [pc, #104]	; (1ce8 <prvAddCurrentTaskToDelayedList+0xcc>)
    1c7e:	681b      	ldr	r3, [r3, #0]
    1c80:	3301      	adds	r3, #1
    1c82:	4a19      	ldr	r2, [pc, #100]	; (1ce8 <prvAddCurrentTaskToDelayedList+0xcc>)
    1c84:	6013      	str	r3, [r2, #0]
    1c86:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    1c88:	e026      	b.n	1cd8 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
    1c8a:	697a      	ldr	r2, [r7, #20]
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	4413      	add	r3, r2
    1c90:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1c92:	4b14      	ldr	r3, [pc, #80]	; (1ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
    1c94:	681b      	ldr	r3, [r3, #0]
    1c96:	68fa      	ldr	r2, [r7, #12]
    1c98:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
    1c9a:	68fa      	ldr	r2, [r7, #12]
    1c9c:	697b      	ldr	r3, [r7, #20]
    1c9e:	429a      	cmp	r2, r3
    1ca0:	d209      	bcs.n	1cb6 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1ca2:	4b12      	ldr	r3, [pc, #72]	; (1cec <prvAddCurrentTaskToDelayedList+0xd0>)
    1ca4:	681a      	ldr	r2, [r3, #0]
    1ca6:	4b0f      	ldr	r3, [pc, #60]	; (1ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
    1ca8:	681b      	ldr	r3, [r3, #0]
    1caa:	3304      	adds	r3, #4
    1cac:	4619      	mov	r1, r3
    1cae:	4610      	mov	r0, r2
    1cb0:	f000 fda3 	bl	27fa <vListInsert>
}
    1cb4:	e010      	b.n	1cd8 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1cb6:	4b0e      	ldr	r3, [pc, #56]	; (1cf0 <prvAddCurrentTaskToDelayedList+0xd4>)
    1cb8:	681a      	ldr	r2, [r3, #0]
    1cba:	4b0a      	ldr	r3, [pc, #40]	; (1ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
    1cbc:	681b      	ldr	r3, [r3, #0]
    1cbe:	3304      	adds	r3, #4
    1cc0:	4619      	mov	r1, r3
    1cc2:	4610      	mov	r0, r2
    1cc4:	f000 fd99 	bl	27fa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
    1cc8:	4b0a      	ldr	r3, [pc, #40]	; (1cf4 <prvAddCurrentTaskToDelayedList+0xd8>)
    1cca:	681b      	ldr	r3, [r3, #0]
    1ccc:	68fa      	ldr	r2, [r7, #12]
    1cce:	429a      	cmp	r2, r3
    1cd0:	d202      	bcs.n	1cd8 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
    1cd2:	4a08      	ldr	r2, [pc, #32]	; (1cf4 <prvAddCurrentTaskToDelayedList+0xd8>)
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	6013      	str	r3, [r2, #0]
}
    1cd8:	bf00      	nop
    1cda:	3718      	adds	r7, #24
    1cdc:	46bd      	mov	sp, r7
    1cde:	bd80      	pop	{r7, pc}
    1ce0:	200000d8 	.word	0x200000d8
    1ce4:	20000014 	.word	0x20000014
    1ce8:	200000c0 	.word	0x200000c0
    1cec:	200000a8 	.word	0x200000a8
    1cf0:	200000a4 	.word	0x200000a4
    1cf4:	200000f4 	.word	0x200000f4

00001cf8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    1cf8:	b580      	push	{r7, lr}
    1cfa:	b086      	sub	sp, #24
    1cfc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
    1cfe:	2300      	movs	r3, #0
    1d00:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    1d02:	f000 fb17 	bl	2334 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    1d06:	4b15      	ldr	r3, [pc, #84]	; (1d5c <xTimerCreateTimerTask+0x64>)
    1d08:	681b      	ldr	r3, [r3, #0]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d00a      	beq.n	1d24 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
    1d0e:	4b14      	ldr	r3, [pc, #80]	; (1d60 <xTimerCreateTimerTask+0x68>)
    1d10:	9301      	str	r3, [sp, #4]
    1d12:	2303      	movs	r3, #3
    1d14:	9300      	str	r3, [sp, #0]
    1d16:	2300      	movs	r3, #0
    1d18:	2280      	movs	r2, #128	; 0x80
    1d1a:	4912      	ldr	r1, [pc, #72]	; (1d64 <xTimerCreateTimerTask+0x6c>)
    1d1c:	4812      	ldr	r0, [pc, #72]	; (1d68 <xTimerCreateTimerTask+0x70>)
    1d1e:	f7fe ff5f 	bl	be0 <xTaskCreate>
    1d22:	60f8      	str	r0, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
    1d24:	68fb      	ldr	r3, [r7, #12]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d112      	bne.n	1d50 <xTimerCreateTimerTask+0x58>
    1d2a:	4b10      	ldr	r3, [pc, #64]	; (1d6c <xTimerCreateTimerTask+0x74>)
    1d2c:	60bb      	str	r3, [r7, #8]
    1d2e:	68bb      	ldr	r3, [r7, #8]
    1d30:	681b      	ldr	r3, [r3, #0]
    1d32:	f003 0301 	and.w	r3, r3, #1
    1d36:	2b00      	cmp	r3, #0
    1d38:	d00a      	beq.n	1d50 <xTimerCreateTimerTask+0x58>
        __asm volatile
    1d3a:	f04f 0340 	mov.w	r3, #64	; 0x40
    1d3e:	f383 8811 	msr	BASEPRI, r3
    1d42:	f3bf 8f6f 	isb	sy
    1d46:	f3bf 8f4f 	dsb	sy
    1d4a:	607b      	str	r3, [r7, #4]
    }
    1d4c:	bf00      	nop
    1d4e:	be00      	bkpt	0x0000
        return xReturn;
    1d50:	68fb      	ldr	r3, [r7, #12]
    }
    1d52:	4618      	mov	r0, r3
    1d54:	3710      	adds	r7, #16
    1d56:	46bd      	mov	sp, r7
    1d58:	bd80      	pop	{r7, pc}
    1d5a:	bf00      	nop
    1d5c:	20000130 	.word	0x20000130
    1d60:	20000134 	.word	0x20000134
    1d64:	00003bec 	.word	0x00003bec
    1d68:	00001f8d 	.word	0x00001f8d
    1d6c:	e000edf0 	.word	0xe000edf0

00001d70 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    1d70:	b580      	push	{r7, lr}
    1d72:	b088      	sub	sp, #32
    1d74:	af02      	add	r7, sp, #8
    1d76:	60f8      	str	r0, [r7, #12]
    1d78:	60b9      	str	r1, [r7, #8]
    1d7a:	607a      	str	r2, [r7, #4]
    1d7c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    1d7e:	202c      	movs	r0, #44	; 0x2c
    1d80:	f000 fb0e 	bl	23a0 <pvPortMalloc>
    1d84:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
    1d86:	697b      	ldr	r3, [r7, #20]
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d00d      	beq.n	1da8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    1d8c:	697b      	ldr	r3, [r7, #20]
    1d8e:	2200      	movs	r2, #0
    1d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    1d94:	697b      	ldr	r3, [r7, #20]
    1d96:	9301      	str	r3, [sp, #4]
    1d98:	6a3b      	ldr	r3, [r7, #32]
    1d9a:	9300      	str	r3, [sp, #0]
    1d9c:	683b      	ldr	r3, [r7, #0]
    1d9e:	687a      	ldr	r2, [r7, #4]
    1da0:	68b9      	ldr	r1, [r7, #8]
    1da2:	68f8      	ldr	r0, [r7, #12]
    1da4:	f000 f806 	bl	1db4 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
    1da8:	697b      	ldr	r3, [r7, #20]
        }
    1daa:	4618      	mov	r0, r3
    1dac:	3718      	adds	r7, #24
    1dae:	46bd      	mov	sp, r7
    1db0:	bd80      	pop	{r7, pc}
	...

00001db4 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
    1db4:	b580      	push	{r7, lr}
    1db6:	b086      	sub	sp, #24
    1db8:	af00      	add	r7, sp, #0
    1dba:	60f8      	str	r0, [r7, #12]
    1dbc:	60b9      	str	r1, [r7, #8]
    1dbe:	607a      	str	r2, [r7, #4]
    1dc0:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
    1dc2:	68bb      	ldr	r3, [r7, #8]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d112      	bne.n	1dee <prvInitialiseNewTimer+0x3a>
    1dc8:	4b1a      	ldr	r3, [pc, #104]	; (1e34 <prvInitialiseNewTimer+0x80>)
    1dca:	617b      	str	r3, [r7, #20]
    1dcc:	697b      	ldr	r3, [r7, #20]
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	f003 0301 	and.w	r3, r3, #1
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d00a      	beq.n	1dee <prvInitialiseNewTimer+0x3a>
        __asm volatile
    1dd8:	f04f 0340 	mov.w	r3, #64	; 0x40
    1ddc:	f383 8811 	msr	BASEPRI, r3
    1de0:	f3bf 8f6f 	isb	sy
    1de4:	f3bf 8f4f 	dsb	sy
    1de8:	613b      	str	r3, [r7, #16]
    }
    1dea:	bf00      	nop
    1dec:	be00      	bkpt	0x0000

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    1dee:	f000 faa1 	bl	2334 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    1df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1df4:	68fa      	ldr	r2, [r7, #12]
    1df6:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    1df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1dfa:	68ba      	ldr	r2, [r7, #8]
    1dfc:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
    1dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e00:	683a      	ldr	r2, [r7, #0]
    1e02:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    1e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e06:	6a3a      	ldr	r2, [r7, #32]
    1e08:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    1e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e0c:	3304      	adds	r3, #4
    1e0e:	4618      	mov	r0, r3
    1e10:	f000 fce6 	bl	27e0 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d008      	beq.n	1e2c <prvInitialiseNewTimer+0x78>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    1e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    1e20:	f043 0304 	orr.w	r3, r3, #4
    1e24:	b2da      	uxtb	r2, r3
    1e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
    1e2c:	bf00      	nop
    1e2e:	3718      	adds	r7, #24
    1e30:	46bd      	mov	sp, r7
    1e32:	bd80      	pop	{r7, pc}
    1e34:	e000edf0 	.word	0xe000edf0

00001e38 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1e38:	b580      	push	{r7, lr}
    1e3a:	b08a      	sub	sp, #40	; 0x28
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	60f8      	str	r0, [r7, #12]
    1e40:	60b9      	str	r1, [r7, #8]
    1e42:	607a      	str	r2, [r7, #4]
    1e44:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
    1e46:	2300      	movs	r3, #0
    1e48:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d112      	bne.n	1e76 <xTimerGenericCommand+0x3e>
    1e50:	4b23      	ldr	r3, [pc, #140]	; (1ee0 <xTimerGenericCommand+0xa8>)
    1e52:	623b      	str	r3, [r7, #32]
    1e54:	6a3b      	ldr	r3, [r7, #32]
    1e56:	681b      	ldr	r3, [r3, #0]
    1e58:	f003 0301 	and.w	r3, r3, #1
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d00a      	beq.n	1e76 <xTimerGenericCommand+0x3e>
        __asm volatile
    1e60:	f04f 0340 	mov.w	r3, #64	; 0x40
    1e64:	f383 8811 	msr	BASEPRI, r3
    1e68:	f3bf 8f6f 	isb	sy
    1e6c:	f3bf 8f4f 	dsb	sy
    1e70:	61fb      	str	r3, [r7, #28]
    }
    1e72:	bf00      	nop
    1e74:	be00      	bkpt	0x0000

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1e76:	4b1b      	ldr	r3, [pc, #108]	; (1ee4 <xTimerGenericCommand+0xac>)
    1e78:	681b      	ldr	r3, [r3, #0]
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d02a      	beq.n	1ed4 <xTimerGenericCommand+0x9c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1e7e:	68bb      	ldr	r3, [r7, #8]
    1e80:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1e86:	68fb      	ldr	r3, [r7, #12]
    1e88:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1e8a:	68bb      	ldr	r3, [r7, #8]
    1e8c:	2b05      	cmp	r3, #5
    1e8e:	dc18      	bgt.n	1ec2 <xTimerGenericCommand+0x8a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1e90:	f7ff fdfe 	bl	1a90 <xTaskGetSchedulerState>
    1e94:	4603      	mov	r3, r0
    1e96:	2b02      	cmp	r3, #2
    1e98:	d109      	bne.n	1eae <xTimerGenericCommand+0x76>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1e9a:	4b12      	ldr	r3, [pc, #72]	; (1ee4 <xTimerGenericCommand+0xac>)
    1e9c:	6818      	ldr	r0, [r3, #0]
    1e9e:	f107 0110 	add.w	r1, r7, #16
    1ea2:	2300      	movs	r3, #0
    1ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1ea6:	f000 fe29 	bl	2afc <xQueueGenericSend>
    1eaa:	6278      	str	r0, [r7, #36]	; 0x24
    1eac:	e012      	b.n	1ed4 <xTimerGenericCommand+0x9c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1eae:	4b0d      	ldr	r3, [pc, #52]	; (1ee4 <xTimerGenericCommand+0xac>)
    1eb0:	6818      	ldr	r0, [r3, #0]
    1eb2:	f107 0110 	add.w	r1, r7, #16
    1eb6:	2300      	movs	r3, #0
    1eb8:	2200      	movs	r2, #0
    1eba:	f000 fe1f 	bl	2afc <xQueueGenericSend>
    1ebe:	6278      	str	r0, [r7, #36]	; 0x24
    1ec0:	e008      	b.n	1ed4 <xTimerGenericCommand+0x9c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1ec2:	4b08      	ldr	r3, [pc, #32]	; (1ee4 <xTimerGenericCommand+0xac>)
    1ec4:	6818      	ldr	r0, [r3, #0]
    1ec6:	f107 0110 	add.w	r1, r7, #16
    1eca:	2300      	movs	r3, #0
    1ecc:	683a      	ldr	r2, [r7, #0]
    1ece:	f000 ff27 	bl	2d20 <xQueueGenericSendFromISR>
    1ed2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    1ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    1ed6:	4618      	mov	r0, r3
    1ed8:	3728      	adds	r7, #40	; 0x28
    1eda:	46bd      	mov	sp, r7
    1edc:	bd80      	pop	{r7, pc}
    1ede:	bf00      	nop
    1ee0:	e000edf0 	.word	0xe000edf0
    1ee4:	20000130 	.word	0x20000130

00001ee8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    1ee8:	b580      	push	{r7, lr}
    1eea:	b084      	sub	sp, #16
    1eec:	af00      	add	r7, sp, #0
    1eee:	60f8      	str	r0, [r7, #12]
    1ef0:	60b9      	str	r1, [r7, #8]
    1ef2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    1ef4:	e008      	b.n	1f08 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    1ef6:	68fb      	ldr	r3, [r7, #12]
    1ef8:	699b      	ldr	r3, [r3, #24]
    1efa:	68ba      	ldr	r2, [r7, #8]
    1efc:	4413      	add	r3, r2
    1efe:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1f00:	68fb      	ldr	r3, [r7, #12]
    1f02:	6a1b      	ldr	r3, [r3, #32]
    1f04:	68f8      	ldr	r0, [r7, #12]
    1f06:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    1f08:	68fb      	ldr	r3, [r7, #12]
    1f0a:	699a      	ldr	r2, [r3, #24]
    1f0c:	68bb      	ldr	r3, [r7, #8]
    1f0e:	18d1      	adds	r1, r2, r3
    1f10:	68bb      	ldr	r3, [r7, #8]
    1f12:	687a      	ldr	r2, [r7, #4]
    1f14:	68f8      	ldr	r0, [r7, #12]
    1f16:	f000 f8dd 	bl	20d4 <prvInsertTimerInActiveList>
    1f1a:	4603      	mov	r3, r0
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d1ea      	bne.n	1ef6 <prvReloadTimer+0xe>
        }
    }
    1f20:	bf00      	nop
    1f22:	bf00      	nop
    1f24:	3710      	adds	r7, #16
    1f26:	46bd      	mov	sp, r7
    1f28:	bd80      	pop	{r7, pc}
	...

00001f2c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b084      	sub	sp, #16
    1f30:	af00      	add	r7, sp, #0
    1f32:	6078      	str	r0, [r7, #4]
    1f34:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1f36:	4b14      	ldr	r3, [pc, #80]	; (1f88 <prvProcessExpiredTimer+0x5c>)
    1f38:	681b      	ldr	r3, [r3, #0]
    1f3a:	68db      	ldr	r3, [r3, #12]
    1f3c:	68db      	ldr	r3, [r3, #12]
    1f3e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1f40:	68fb      	ldr	r3, [r7, #12]
    1f42:	3304      	adds	r3, #4
    1f44:	4618      	mov	r0, r3
    1f46:	f000 fc91 	bl	286c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1f4a:	68fb      	ldr	r3, [r7, #12]
    1f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    1f50:	f003 0304 	and.w	r3, r3, #4
    1f54:	2b00      	cmp	r3, #0
    1f56:	d005      	beq.n	1f64 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    1f58:	683a      	ldr	r2, [r7, #0]
    1f5a:	6879      	ldr	r1, [r7, #4]
    1f5c:	68f8      	ldr	r0, [r7, #12]
    1f5e:	f7ff ffc3 	bl	1ee8 <prvReloadTimer>
    1f62:	e008      	b.n	1f76 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1f64:	68fb      	ldr	r3, [r7, #12]
    1f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    1f6a:	f023 0301 	bic.w	r3, r3, #1
    1f6e:	b2da      	uxtb	r2, r3
    1f70:	68fb      	ldr	r3, [r7, #12]
    1f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1f76:	68fb      	ldr	r3, [r7, #12]
    1f78:	6a1b      	ldr	r3, [r3, #32]
    1f7a:	68f8      	ldr	r0, [r7, #12]
    1f7c:	4798      	blx	r3
    }
    1f7e:	bf00      	nop
    1f80:	3710      	adds	r7, #16
    1f82:	46bd      	mov	sp, r7
    1f84:	bd80      	pop	{r7, pc}
    1f86:	bf00      	nop
    1f88:	20000128 	.word	0x20000128

00001f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    1f8c:	b580      	push	{r7, lr}
    1f8e:	b084      	sub	sp, #16
    1f90:	af00      	add	r7, sp, #0
    1f92:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    1f94:	f107 0308 	add.w	r3, r7, #8
    1f98:	4618      	mov	r0, r3
    1f9a:	f000 f857 	bl	204c <prvGetNextExpireTime>
    1f9e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    1fa0:	68bb      	ldr	r3, [r7, #8]
    1fa2:	4619      	mov	r1, r3
    1fa4:	68f8      	ldr	r0, [r7, #12]
    1fa6:	f000 f803 	bl	1fb0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
    1faa:	f000 f8d5 	bl	2158 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    1fae:	e7f1      	b.n	1f94 <prvTimerTask+0x8>

00001fb0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    1fb0:	b580      	push	{r7, lr}
    1fb2:	b084      	sub	sp, #16
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	6078      	str	r0, [r7, #4]
    1fb8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1fba:	f7ff f829 	bl	1010 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1fbe:	f107 0308 	add.w	r3, r7, #8
    1fc2:	4618      	mov	r0, r3
    1fc4:	f000 f866 	bl	2094 <prvSampleTimeNow>
    1fc8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
    1fca:	68bb      	ldr	r3, [r7, #8]
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d130      	bne.n	2032 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1fd0:	683b      	ldr	r3, [r7, #0]
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	d10a      	bne.n	1fec <prvProcessTimerOrBlockTask+0x3c>
    1fd6:	687a      	ldr	r2, [r7, #4]
    1fd8:	68fb      	ldr	r3, [r7, #12]
    1fda:	429a      	cmp	r2, r3
    1fdc:	d806      	bhi.n	1fec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
    1fde:	f7ff f825 	bl	102c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1fe2:	68f9      	ldr	r1, [r7, #12]
    1fe4:	6878      	ldr	r0, [r7, #4]
    1fe6:	f7ff ffa1 	bl	1f2c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    1fea:	e024      	b.n	2036 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
    1fec:	683b      	ldr	r3, [r7, #0]
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d008      	beq.n	2004 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1ff2:	4b13      	ldr	r3, [pc, #76]	; (2040 <prvProcessTimerOrBlockTask+0x90>)
    1ff4:	681b      	ldr	r3, [r3, #0]
    1ff6:	681b      	ldr	r3, [r3, #0]
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d101      	bne.n	2000 <prvProcessTimerOrBlockTask+0x50>
    1ffc:	2301      	movs	r3, #1
    1ffe:	e000      	b.n	2002 <prvProcessTimerOrBlockTask+0x52>
    2000:	2300      	movs	r3, #0
    2002:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2004:	4b0f      	ldr	r3, [pc, #60]	; (2044 <prvProcessTimerOrBlockTask+0x94>)
    2006:	6818      	ldr	r0, [r3, #0]
    2008:	687a      	ldr	r2, [r7, #4]
    200a:	68fb      	ldr	r3, [r7, #12]
    200c:	1ad3      	subs	r3, r2, r3
    200e:	683a      	ldr	r2, [r7, #0]
    2010:	4619      	mov	r1, r3
    2012:	f001 f9a7 	bl	3364 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
    2016:	f7ff f809 	bl	102c <xTaskResumeAll>
    201a:	4603      	mov	r3, r0
    201c:	2b00      	cmp	r3, #0
    201e:	d10a      	bne.n	2036 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
    2020:	4b09      	ldr	r3, [pc, #36]	; (2048 <prvProcessTimerOrBlockTask+0x98>)
    2022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2026:	601a      	str	r2, [r3, #0]
    2028:	f3bf 8f4f 	dsb	sy
    202c:	f3bf 8f6f 	isb	sy
    }
    2030:	e001      	b.n	2036 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
    2032:	f7fe fffb 	bl	102c <xTaskResumeAll>
    }
    2036:	bf00      	nop
    2038:	3710      	adds	r7, #16
    203a:	46bd      	mov	sp, r7
    203c:	bd80      	pop	{r7, pc}
    203e:	bf00      	nop
    2040:	2000012c 	.word	0x2000012c
    2044:	20000130 	.word	0x20000130
    2048:	e000ed04 	.word	0xe000ed04

0000204c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    204c:	b480      	push	{r7}
    204e:	b085      	sub	sp, #20
    2050:	af00      	add	r7, sp, #0
    2052:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2054:	4b0e      	ldr	r3, [pc, #56]	; (2090 <prvGetNextExpireTime+0x44>)
    2056:	681b      	ldr	r3, [r3, #0]
    2058:	681b      	ldr	r3, [r3, #0]
    205a:	2b00      	cmp	r3, #0
    205c:	d101      	bne.n	2062 <prvGetNextExpireTime+0x16>
    205e:	2201      	movs	r2, #1
    2060:	e000      	b.n	2064 <prvGetNextExpireTime+0x18>
    2062:	2200      	movs	r2, #0
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	681b      	ldr	r3, [r3, #0]
    206c:	2b00      	cmp	r3, #0
    206e:	d105      	bne.n	207c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2070:	4b07      	ldr	r3, [pc, #28]	; (2090 <prvGetNextExpireTime+0x44>)
    2072:	681b      	ldr	r3, [r3, #0]
    2074:	68db      	ldr	r3, [r3, #12]
    2076:	681b      	ldr	r3, [r3, #0]
    2078:	60fb      	str	r3, [r7, #12]
    207a:	e001      	b.n	2080 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    207c:	2300      	movs	r3, #0
    207e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
    2080:	68fb      	ldr	r3, [r7, #12]
    }
    2082:	4618      	mov	r0, r3
    2084:	3714      	adds	r7, #20
    2086:	46bd      	mov	sp, r7
    2088:	f85d 7b04 	ldr.w	r7, [sp], #4
    208c:	4770      	bx	lr
    208e:	bf00      	nop
    2090:	20000128 	.word	0x20000128

00002094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2094:	b580      	push	{r7, lr}
    2096:	b084      	sub	sp, #16
    2098:	af00      	add	r7, sp, #0
    209a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    209c:	f7ff f8cc 	bl	1238 <xTaskGetTickCount>
    20a0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
    20a2:	4b0b      	ldr	r3, [pc, #44]	; (20d0 <prvSampleTimeNow+0x3c>)
    20a4:	681b      	ldr	r3, [r3, #0]
    20a6:	68fa      	ldr	r2, [r7, #12]
    20a8:	429a      	cmp	r2, r3
    20aa:	d205      	bcs.n	20b8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
    20ac:	f000 f91c 	bl	22e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    20b0:	687b      	ldr	r3, [r7, #4]
    20b2:	2201      	movs	r2, #1
    20b4:	601a      	str	r2, [r3, #0]
    20b6:	e002      	b.n	20be <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	2200      	movs	r2, #0
    20bc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
    20be:	4a04      	ldr	r2, [pc, #16]	; (20d0 <prvSampleTimeNow+0x3c>)
    20c0:	68fb      	ldr	r3, [r7, #12]
    20c2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
    20c4:	68fb      	ldr	r3, [r7, #12]
    }
    20c6:	4618      	mov	r0, r3
    20c8:	3710      	adds	r7, #16
    20ca:	46bd      	mov	sp, r7
    20cc:	bd80      	pop	{r7, pc}
    20ce:	bf00      	nop
    20d0:	20000138 	.word	0x20000138

000020d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    20d4:	b580      	push	{r7, lr}
    20d6:	b086      	sub	sp, #24
    20d8:	af00      	add	r7, sp, #0
    20da:	60f8      	str	r0, [r7, #12]
    20dc:	60b9      	str	r1, [r7, #8]
    20de:	607a      	str	r2, [r7, #4]
    20e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
    20e2:	2300      	movs	r3, #0
    20e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    20e6:	68fb      	ldr	r3, [r7, #12]
    20e8:	68ba      	ldr	r2, [r7, #8]
    20ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    20ec:	68fb      	ldr	r3, [r7, #12]
    20ee:	68fa      	ldr	r2, [r7, #12]
    20f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
    20f2:	68ba      	ldr	r2, [r7, #8]
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	429a      	cmp	r2, r3
    20f8:	d812      	bhi.n	2120 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    20fa:	687a      	ldr	r2, [r7, #4]
    20fc:	683b      	ldr	r3, [r7, #0]
    20fe:	1ad2      	subs	r2, r2, r3
    2100:	68fb      	ldr	r3, [r7, #12]
    2102:	699b      	ldr	r3, [r3, #24]
    2104:	429a      	cmp	r2, r3
    2106:	d302      	bcc.n	210e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    2108:	2301      	movs	r3, #1
    210a:	617b      	str	r3, [r7, #20]
    210c:	e01b      	b.n	2146 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    210e:	4b10      	ldr	r3, [pc, #64]	; (2150 <prvInsertTimerInActiveList+0x7c>)
    2110:	681a      	ldr	r2, [r3, #0]
    2112:	68fb      	ldr	r3, [r7, #12]
    2114:	3304      	adds	r3, #4
    2116:	4619      	mov	r1, r3
    2118:	4610      	mov	r0, r2
    211a:	f000 fb6e 	bl	27fa <vListInsert>
    211e:	e012      	b.n	2146 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2120:	687a      	ldr	r2, [r7, #4]
    2122:	683b      	ldr	r3, [r7, #0]
    2124:	429a      	cmp	r2, r3
    2126:	d206      	bcs.n	2136 <prvInsertTimerInActiveList+0x62>
    2128:	68ba      	ldr	r2, [r7, #8]
    212a:	683b      	ldr	r3, [r7, #0]
    212c:	429a      	cmp	r2, r3
    212e:	d302      	bcc.n	2136 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    2130:	2301      	movs	r3, #1
    2132:	617b      	str	r3, [r7, #20]
    2134:	e007      	b.n	2146 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2136:	4b07      	ldr	r3, [pc, #28]	; (2154 <prvInsertTimerInActiveList+0x80>)
    2138:	681a      	ldr	r2, [r3, #0]
    213a:	68fb      	ldr	r3, [r7, #12]
    213c:	3304      	adds	r3, #4
    213e:	4619      	mov	r1, r3
    2140:	4610      	mov	r0, r2
    2142:	f000 fb5a 	bl	27fa <vListInsert>
            }
        }

        return xProcessTimerNow;
    2146:	697b      	ldr	r3, [r7, #20]
    }
    2148:	4618      	mov	r0, r3
    214a:	3718      	adds	r7, #24
    214c:	46bd      	mov	sp, r7
    214e:	bd80      	pop	{r7, pc}
    2150:	2000012c 	.word	0x2000012c
    2154:	20000128 	.word	0x20000128

00002158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2158:	b580      	push	{r7, lr}
    215a:	b088      	sub	sp, #32
    215c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    215e:	e0ae      	b.n	22be <prvProcessReceivedCommands+0x166>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	2b00      	cmp	r3, #0
    2164:	f2c0 80aa 	blt.w	22bc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2168:	68fb      	ldr	r3, [r7, #12]
    216a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    216c:	69fb      	ldr	r3, [r7, #28]
    216e:	695b      	ldr	r3, [r3, #20]
    2170:	2b00      	cmp	r3, #0
    2172:	d004      	beq.n	217e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2174:	69fb      	ldr	r3, [r7, #28]
    2176:	3304      	adds	r3, #4
    2178:	4618      	mov	r0, r3
    217a:	f000 fb77 	bl	286c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    217e:	463b      	mov	r3, r7
    2180:	4618      	mov	r0, r3
    2182:	f7ff ff87 	bl	2094 <prvSampleTimeNow>
    2186:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	3b01      	subs	r3, #1
    218c:	2b08      	cmp	r3, #8
    218e:	f200 8096 	bhi.w	22be <prvProcessReceivedCommands+0x166>
    2192:	a201      	add	r2, pc, #4	; (adr r2, 2198 <prvProcessReceivedCommands+0x40>)
    2194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2198:	000021bd 	.word	0x000021bd
    219c:	000021bd 	.word	0x000021bd
    21a0:	00002225 	.word	0x00002225
    21a4:	00002239 	.word	0x00002239
    21a8:	00002293 	.word	0x00002293
    21ac:	000021bd 	.word	0x000021bd
    21b0:	000021bd 	.word	0x000021bd
    21b4:	00002225 	.word	0x00002225
    21b8:	00002239 	.word	0x00002239
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    21bc:	69fb      	ldr	r3, [r7, #28]
    21be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    21c2:	f043 0301 	orr.w	r3, r3, #1
    21c6:	b2da      	uxtb	r2, r3
    21c8:	69fb      	ldr	r3, [r7, #28]
    21ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    21ce:	68ba      	ldr	r2, [r7, #8]
    21d0:	69fb      	ldr	r3, [r7, #28]
    21d2:	699b      	ldr	r3, [r3, #24]
    21d4:	18d1      	adds	r1, r2, r3
    21d6:	68bb      	ldr	r3, [r7, #8]
    21d8:	69ba      	ldr	r2, [r7, #24]
    21da:	69f8      	ldr	r0, [r7, #28]
    21dc:	f7ff ff7a 	bl	20d4 <prvInsertTimerInActiveList>
    21e0:	4603      	mov	r3, r0
    21e2:	2b00      	cmp	r3, #0
    21e4:	d06b      	beq.n	22be <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    21e6:	69fb      	ldr	r3, [r7, #28]
    21e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    21ec:	f003 0304 	and.w	r3, r3, #4
    21f0:	2b00      	cmp	r3, #0
    21f2:	d009      	beq.n	2208 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    21f4:	68ba      	ldr	r2, [r7, #8]
    21f6:	69fb      	ldr	r3, [r7, #28]
    21f8:	699b      	ldr	r3, [r3, #24]
    21fa:	4413      	add	r3, r2
    21fc:	69ba      	ldr	r2, [r7, #24]
    21fe:	4619      	mov	r1, r3
    2200:	69f8      	ldr	r0, [r7, #28]
    2202:	f7ff fe71 	bl	1ee8 <prvReloadTimer>
    2206:	e008      	b.n	221a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2208:	69fb      	ldr	r3, [r7, #28]
    220a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    220e:	f023 0301 	bic.w	r3, r3, #1
    2212:	b2da      	uxtb	r2, r3
    2214:	69fb      	ldr	r3, [r7, #28]
    2216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    221a:	69fb      	ldr	r3, [r7, #28]
    221c:	6a1b      	ldr	r3, [r3, #32]
    221e:	69f8      	ldr	r0, [r7, #28]
    2220:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
    2222:	e04c      	b.n	22be <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2224:	69fb      	ldr	r3, [r7, #28]
    2226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    222a:	f023 0301 	bic.w	r3, r3, #1
    222e:	b2da      	uxtb	r2, r3
    2230:	69fb      	ldr	r3, [r7, #28]
    2232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
    2236:	e042      	b.n	22be <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2238:	69fb      	ldr	r3, [r7, #28]
    223a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    223e:	f043 0301 	orr.w	r3, r3, #1
    2242:	b2da      	uxtb	r2, r3
    2244:	69fb      	ldr	r3, [r7, #28]
    2246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    224a:	68ba      	ldr	r2, [r7, #8]
    224c:	69fb      	ldr	r3, [r7, #28]
    224e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2250:	69fb      	ldr	r3, [r7, #28]
    2252:	699b      	ldr	r3, [r3, #24]
    2254:	2b00      	cmp	r3, #0
    2256:	d112      	bne.n	227e <prvProcessReceivedCommands+0x126>
    2258:	4b21      	ldr	r3, [pc, #132]	; (22e0 <prvProcessReceivedCommands+0x188>)
    225a:	617b      	str	r3, [r7, #20]
    225c:	697b      	ldr	r3, [r7, #20]
    225e:	681b      	ldr	r3, [r3, #0]
    2260:	f003 0301 	and.w	r3, r3, #1
    2264:	2b00      	cmp	r3, #0
    2266:	d00a      	beq.n	227e <prvProcessReceivedCommands+0x126>
        __asm volatile
    2268:	f04f 0340 	mov.w	r3, #64	; 0x40
    226c:	f383 8811 	msr	BASEPRI, r3
    2270:	f3bf 8f6f 	isb	sy
    2274:	f3bf 8f4f 	dsb	sy
    2278:	613b      	str	r3, [r7, #16]
    }
    227a:	bf00      	nop
    227c:	be00      	bkpt	0x0000
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    227e:	69fb      	ldr	r3, [r7, #28]
    2280:	699a      	ldr	r2, [r3, #24]
    2282:	69bb      	ldr	r3, [r7, #24]
    2284:	18d1      	adds	r1, r2, r3
    2286:	69bb      	ldr	r3, [r7, #24]
    2288:	69ba      	ldr	r2, [r7, #24]
    228a:	69f8      	ldr	r0, [r7, #28]
    228c:	f7ff ff22 	bl	20d4 <prvInsertTimerInActiveList>
                        break;
    2290:	e015      	b.n	22be <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2292:	69fb      	ldr	r3, [r7, #28]
    2294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    2298:	f003 0302 	and.w	r3, r3, #2
    229c:	2b00      	cmp	r3, #0
    229e:	d103      	bne.n	22a8 <prvProcessReceivedCommands+0x150>
                            {
                                vPortFree( pxTimer );
    22a0:	69f8      	ldr	r0, [r7, #28]
    22a2:	f000 f959 	bl	2558 <vPortFree>
    22a6:	e00a      	b.n	22be <prvProcessReceivedCommands+0x166>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    22a8:	69fb      	ldr	r3, [r7, #28]
    22aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    22ae:	f023 0301 	bic.w	r3, r3, #1
    22b2:	b2da      	uxtb	r2, r3
    22b4:	69fb      	ldr	r3, [r7, #28]
    22b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
    22ba:	e000      	b.n	22be <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
    22bc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    22be:	4b09      	ldr	r3, [pc, #36]	; (22e4 <prvProcessReceivedCommands+0x18c>)
    22c0:	681b      	ldr	r3, [r3, #0]
    22c2:	1d39      	adds	r1, r7, #4
    22c4:	2200      	movs	r2, #0
    22c6:	4618      	mov	r0, r3
    22c8:	f000 fdf4 	bl	2eb4 <xQueueReceive>
    22cc:	4603      	mov	r3, r0
    22ce:	2b00      	cmp	r3, #0
    22d0:	f47f af46 	bne.w	2160 <prvProcessReceivedCommands+0x8>
        }
    }
    22d4:	bf00      	nop
    22d6:	bf00      	nop
    22d8:	3720      	adds	r7, #32
    22da:	46bd      	mov	sp, r7
    22dc:	bd80      	pop	{r7, pc}
    22de:	bf00      	nop
    22e0:	e000edf0 	.word	0xe000edf0
    22e4:	20000130 	.word	0x20000130

000022e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    22e8:	b580      	push	{r7, lr}
    22ea:	b082      	sub	sp, #8
    22ec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    22ee:	e009      	b.n	2304 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    22f0:	4b0e      	ldr	r3, [pc, #56]	; (232c <prvSwitchTimerLists+0x44>)
    22f2:	681b      	ldr	r3, [r3, #0]
    22f4:	68db      	ldr	r3, [r3, #12]
    22f6:	681b      	ldr	r3, [r3, #0]
    22f8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    22fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    22fe:	6838      	ldr	r0, [r7, #0]
    2300:	f7ff fe14 	bl	1f2c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2304:	4b09      	ldr	r3, [pc, #36]	; (232c <prvSwitchTimerLists+0x44>)
    2306:	681b      	ldr	r3, [r3, #0]
    2308:	681b      	ldr	r3, [r3, #0]
    230a:	2b00      	cmp	r3, #0
    230c:	d1f0      	bne.n	22f0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
    230e:	4b07      	ldr	r3, [pc, #28]	; (232c <prvSwitchTimerLists+0x44>)
    2310:	681b      	ldr	r3, [r3, #0]
    2312:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
    2314:	4b06      	ldr	r3, [pc, #24]	; (2330 <prvSwitchTimerLists+0x48>)
    2316:	681b      	ldr	r3, [r3, #0]
    2318:	4a04      	ldr	r2, [pc, #16]	; (232c <prvSwitchTimerLists+0x44>)
    231a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
    231c:	4a04      	ldr	r2, [pc, #16]	; (2330 <prvSwitchTimerLists+0x48>)
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	6013      	str	r3, [r2, #0]
    }
    2322:	bf00      	nop
    2324:	3708      	adds	r7, #8
    2326:	46bd      	mov	sp, r7
    2328:	bd80      	pop	{r7, pc}
    232a:	bf00      	nop
    232c:	20000128 	.word	0x20000128
    2330:	2000012c 	.word	0x2000012c

00002334 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    2334:	b580      	push	{r7, lr}
    2336:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    2338:	f001 f9b8 	bl	36ac <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
    233c:	4b12      	ldr	r3, [pc, #72]	; (2388 <prvCheckForValidListAndQueue+0x54>)
    233e:	681b      	ldr	r3, [r3, #0]
    2340:	2b00      	cmp	r3, #0
    2342:	d11d      	bne.n	2380 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    2344:	4811      	ldr	r0, [pc, #68]	; (238c <prvCheckForValidListAndQueue+0x58>)
    2346:	f000 fa2b 	bl	27a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    234a:	4811      	ldr	r0, [pc, #68]	; (2390 <prvCheckForValidListAndQueue+0x5c>)
    234c:	f000 fa28 	bl	27a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    2350:	4b10      	ldr	r3, [pc, #64]	; (2394 <prvCheckForValidListAndQueue+0x60>)
    2352:	4a0e      	ldr	r2, [pc, #56]	; (238c <prvCheckForValidListAndQueue+0x58>)
    2354:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
    2356:	4b10      	ldr	r3, [pc, #64]	; (2398 <prvCheckForValidListAndQueue+0x64>)
    2358:	4a0d      	ldr	r2, [pc, #52]	; (2390 <prvCheckForValidListAndQueue+0x5c>)
    235a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    235c:	2200      	movs	r2, #0
    235e:	210c      	movs	r1, #12
    2360:	2020      	movs	r0, #32
    2362:	f000 fb4f 	bl	2a04 <xQueueGenericCreate>
    2366:	4603      	mov	r3, r0
    2368:	4a07      	ldr	r2, [pc, #28]	; (2388 <prvCheckForValidListAndQueue+0x54>)
    236a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
    236c:	4b06      	ldr	r3, [pc, #24]	; (2388 <prvCheckForValidListAndQueue+0x54>)
    236e:	681b      	ldr	r3, [r3, #0]
    2370:	2b00      	cmp	r3, #0
    2372:	d005      	beq.n	2380 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    2374:	4b04      	ldr	r3, [pc, #16]	; (2388 <prvCheckForValidListAndQueue+0x54>)
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	4908      	ldr	r1, [pc, #32]	; (239c <prvCheckForValidListAndQueue+0x68>)
    237a:	4618      	mov	r0, r3
    237c:	f000 ff9a 	bl	32b4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2380:	f001 f9ce 	bl	3720 <vPortExitCritical>
    }
    2384:	bf00      	nop
    2386:	bd80      	pop	{r7, pc}
    2388:	20000130 	.word	0x20000130
    238c:	20000100 	.word	0x20000100
    2390:	20000114 	.word	0x20000114
    2394:	20000128 	.word	0x20000128
    2398:	2000012c 	.word	0x2000012c
    239c:	00003bf4 	.word	0x00003bf4

000023a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    23a0:	b580      	push	{r7, lr}
    23a2:	b08c      	sub	sp, #48	; 0x30
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    23a8:	2300      	movs	r3, #0
    23aa:	627b      	str	r3, [r7, #36]	; 0x24
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
    23ac:	f7fe fe30 	bl	1010 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    23b0:	4b63      	ldr	r3, [pc, #396]	; (2540 <pvPortMalloc+0x1a0>)
    23b2:	681b      	ldr	r3, [r3, #0]
    23b4:	2b00      	cmp	r3, #0
    23b6:	d101      	bne.n	23bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
    23b8:	f000 f93c 	bl	2634 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	2b00      	cmp	r3, #0
    23c0:	d022      	beq.n	2408 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
    23c2:	2308      	movs	r3, #8
    23c4:	43db      	mvns	r3, r3
    23c6:	687a      	ldr	r2, [r7, #4]
    23c8:	429a      	cmp	r2, r3
    23ca:	d81b      	bhi.n	2404 <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
    23cc:	2208      	movs	r2, #8
    23ce:	687b      	ldr	r3, [r7, #4]
    23d0:	4413      	add	r3, r2
    23d2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	f003 0307 	and.w	r3, r3, #7
    23da:	2b00      	cmp	r3, #0
    23dc:	d014      	beq.n	2408 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	f003 0307 	and.w	r3, r3, #7
    23e4:	f1c3 0308 	rsb	r3, r3, #8
    23e8:	623b      	str	r3, [r7, #32]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
    23ea:	6a3b      	ldr	r3, [r7, #32]
    23ec:	43db      	mvns	r3, r3
    23ee:	687a      	ldr	r2, [r7, #4]
    23f0:	429a      	cmp	r2, r3
    23f2:	d804      	bhi.n	23fe <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
    23f4:	687a      	ldr	r2, [r7, #4]
    23f6:	6a3b      	ldr	r3, [r7, #32]
    23f8:	4413      	add	r3, r2
    23fa:	607b      	str	r3, [r7, #4]
    23fc:	e004      	b.n	2408 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
    23fe:	2300      	movs	r3, #0
    2400:	607b      	str	r3, [r7, #4]
    2402:	e001      	b.n	2408 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
    2404:	2300      	movs	r3, #0
    2406:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	2b00      	cmp	r3, #0
    240c:	db78      	blt.n	2500 <pvPortMalloc+0x160>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	2b00      	cmp	r3, #0
    2412:	d075      	beq.n	2500 <pvPortMalloc+0x160>
    2414:	4b4b      	ldr	r3, [pc, #300]	; (2544 <pvPortMalloc+0x1a4>)
    2416:	681b      	ldr	r3, [r3, #0]
    2418:	687a      	ldr	r2, [r7, #4]
    241a:	429a      	cmp	r2, r3
    241c:	d870      	bhi.n	2500 <pvPortMalloc+0x160>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    241e:	4b4a      	ldr	r3, [pc, #296]	; (2548 <pvPortMalloc+0x1a8>)
    2420:	62bb      	str	r3, [r7, #40]	; 0x28
                pxBlock = xStart.pxNextFreeBlock;
    2422:	4b49      	ldr	r3, [pc, #292]	; (2548 <pvPortMalloc+0x1a8>)
    2424:	681b      	ldr	r3, [r3, #0]
    2426:	62fb      	str	r3, [r7, #44]	; 0x2c

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    2428:	e004      	b.n	2434 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
    242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    242c:	62bb      	str	r3, [r7, #40]	; 0x28
                    pxBlock = pxBlock->pxNextFreeBlock;
    242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2430:	681b      	ldr	r3, [r3, #0]
    2432:	62fb      	str	r3, [r7, #44]	; 0x2c
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    2434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2436:	685b      	ldr	r3, [r3, #4]
    2438:	687a      	ldr	r2, [r7, #4]
    243a:	429a      	cmp	r2, r3
    243c:	d903      	bls.n	2446 <pvPortMalloc+0xa6>
    243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2440:	681b      	ldr	r3, [r3, #0]
    2442:	2b00      	cmp	r3, #0
    2444:	d1f1      	bne.n	242a <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    2446:	4b3e      	ldr	r3, [pc, #248]	; (2540 <pvPortMalloc+0x1a0>)
    2448:	681b      	ldr	r3, [r3, #0]
    244a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    244c:	429a      	cmp	r2, r3
    244e:	d057      	beq.n	2500 <pvPortMalloc+0x160>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    2450:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2452:	681b      	ldr	r3, [r3, #0]
    2454:	2208      	movs	r2, #8
    2456:	4413      	add	r3, r2
    2458:	627b      	str	r3, [r7, #36]	; 0x24

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    245c:	681a      	ldr	r2, [r3, #0]
    245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2460:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2464:	685a      	ldr	r2, [r3, #4]
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	1ad2      	subs	r2, r2, r3
    246a:	2308      	movs	r3, #8
    246c:	005b      	lsls	r3, r3, #1
    246e:	429a      	cmp	r2, r3
    2470:	d927      	bls.n	24c2 <pvPortMalloc+0x122>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    2472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2474:	687b      	ldr	r3, [r7, #4]
    2476:	4413      	add	r3, r2
    2478:	61fb      	str	r3, [r7, #28]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    247a:	69fb      	ldr	r3, [r7, #28]
    247c:	f003 0307 	and.w	r3, r3, #7
    2480:	2b00      	cmp	r3, #0
    2482:	d012      	beq.n	24aa <pvPortMalloc+0x10a>
    2484:	4b31      	ldr	r3, [pc, #196]	; (254c <pvPortMalloc+0x1ac>)
    2486:	61bb      	str	r3, [r7, #24]
    2488:	69bb      	ldr	r3, [r7, #24]
    248a:	681b      	ldr	r3, [r3, #0]
    248c:	f003 0301 	and.w	r3, r3, #1
    2490:	2b00      	cmp	r3, #0
    2492:	d00a      	beq.n	24aa <pvPortMalloc+0x10a>
        __asm volatile
    2494:	f04f 0340 	mov.w	r3, #64	; 0x40
    2498:	f383 8811 	msr	BASEPRI, r3
    249c:	f3bf 8f6f 	isb	sy
    24a0:	f3bf 8f4f 	dsb	sy
    24a4:	613b      	str	r3, [r7, #16]
    }
    24a6:	bf00      	nop
    24a8:	be00      	bkpt	0x0000

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    24aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24ac:	685a      	ldr	r2, [r3, #4]
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	1ad2      	subs	r2, r2, r3
    24b2:	69fb      	ldr	r3, [r7, #28]
    24b4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
    24b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24b8:	687a      	ldr	r2, [r7, #4]
    24ba:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    24bc:	69f8      	ldr	r0, [r7, #28]
    24be:	f000 f915 	bl	26ec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    24c2:	4b20      	ldr	r3, [pc, #128]	; (2544 <pvPortMalloc+0x1a4>)
    24c4:	681a      	ldr	r2, [r3, #0]
    24c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24c8:	685b      	ldr	r3, [r3, #4]
    24ca:	1ad3      	subs	r3, r2, r3
    24cc:	4a1d      	ldr	r2, [pc, #116]	; (2544 <pvPortMalloc+0x1a4>)
    24ce:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    24d0:	4b1c      	ldr	r3, [pc, #112]	; (2544 <pvPortMalloc+0x1a4>)
    24d2:	681a      	ldr	r2, [r3, #0]
    24d4:	4b1e      	ldr	r3, [pc, #120]	; (2550 <pvPortMalloc+0x1b0>)
    24d6:	681b      	ldr	r3, [r3, #0]
    24d8:	429a      	cmp	r2, r3
    24da:	d203      	bcs.n	24e4 <pvPortMalloc+0x144>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    24dc:	4b19      	ldr	r3, [pc, #100]	; (2544 <pvPortMalloc+0x1a4>)
    24de:	681b      	ldr	r3, [r3, #0]
    24e0:	4a1b      	ldr	r2, [pc, #108]	; (2550 <pvPortMalloc+0x1b0>)
    24e2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
    24e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24e6:	685b      	ldr	r3, [r3, #4]
    24e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    24ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24ee:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
    24f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24f2:	2200      	movs	r2, #0
    24f4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
    24f6:	4b17      	ldr	r3, [pc, #92]	; (2554 <pvPortMalloc+0x1b4>)
    24f8:	681b      	ldr	r3, [r3, #0]
    24fa:	3301      	adds	r3, #1
    24fc:	4a15      	ldr	r2, [pc, #84]	; (2554 <pvPortMalloc+0x1b4>)
    24fe:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    2500:	f7fe fd94 	bl	102c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    2504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2506:	f003 0307 	and.w	r3, r3, #7
    250a:	2b00      	cmp	r3, #0
    250c:	d012      	beq.n	2534 <pvPortMalloc+0x194>
    250e:	4b0f      	ldr	r3, [pc, #60]	; (254c <pvPortMalloc+0x1ac>)
    2510:	617b      	str	r3, [r7, #20]
    2512:	697b      	ldr	r3, [r7, #20]
    2514:	681b      	ldr	r3, [r3, #0]
    2516:	f003 0301 	and.w	r3, r3, #1
    251a:	2b00      	cmp	r3, #0
    251c:	d00a      	beq.n	2534 <pvPortMalloc+0x194>
        __asm volatile
    251e:	f04f 0340 	mov.w	r3, #64	; 0x40
    2522:	f383 8811 	msr	BASEPRI, r3
    2526:	f3bf 8f6f 	isb	sy
    252a:	f3bf 8f4f 	dsb	sy
    252e:	60fb      	str	r3, [r7, #12]
    }
    2530:	bf00      	nop
    2532:	be00      	bkpt	0x0000
    return pvReturn;
    2534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    2536:	4618      	mov	r0, r3
    2538:	3730      	adds	r7, #48	; 0x30
    253a:	46bd      	mov	sp, r7
    253c:	bd80      	pop	{r7, pc}
    253e:	bf00      	nop
    2540:	20001144 	.word	0x20001144
    2544:	20001148 	.word	0x20001148
    2548:	2000113c 	.word	0x2000113c
    254c:	e000edf0 	.word	0xe000edf0
    2550:	2000114c 	.word	0x2000114c
    2554:	20001150 	.word	0x20001150

00002558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    2558:	b580      	push	{r7, lr}
    255a:	b088      	sub	sp, #32
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
    2564:	687b      	ldr	r3, [r7, #4]
    2566:	2b00      	cmp	r3, #0
    2568:	d059      	beq.n	261e <vPortFree+0xc6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    256a:	2308      	movs	r3, #8
    256c:	425b      	negs	r3, r3
    256e:	69fa      	ldr	r2, [r7, #28]
    2570:	4413      	add	r3, r2
    2572:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
    2574:	69fb      	ldr	r3, [r7, #28]
    2576:	61bb      	str	r3, [r7, #24]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
    2578:	69bb      	ldr	r3, [r7, #24]
    257a:	685b      	ldr	r3, [r3, #4]
    257c:	2b00      	cmp	r3, #0
    257e:	db12      	blt.n	25a6 <vPortFree+0x4e>
    2580:	4b29      	ldr	r3, [pc, #164]	; (2628 <vPortFree+0xd0>)
    2582:	617b      	str	r3, [r7, #20]
    2584:	697b      	ldr	r3, [r7, #20]
    2586:	681b      	ldr	r3, [r3, #0]
    2588:	f003 0301 	and.w	r3, r3, #1
    258c:	2b00      	cmp	r3, #0
    258e:	d00a      	beq.n	25a6 <vPortFree+0x4e>
        __asm volatile
    2590:	f04f 0340 	mov.w	r3, #64	; 0x40
    2594:	f383 8811 	msr	BASEPRI, r3
    2598:	f3bf 8f6f 	isb	sy
    259c:	f3bf 8f4f 	dsb	sy
    25a0:	60fb      	str	r3, [r7, #12]
    }
    25a2:	bf00      	nop
    25a4:	be00      	bkpt	0x0000
        configASSERT( pxLink->pxNextFreeBlock == NULL );
    25a6:	69bb      	ldr	r3, [r7, #24]
    25a8:	681b      	ldr	r3, [r3, #0]
    25aa:	2b00      	cmp	r3, #0
    25ac:	d012      	beq.n	25d4 <vPortFree+0x7c>
    25ae:	4b1e      	ldr	r3, [pc, #120]	; (2628 <vPortFree+0xd0>)
    25b0:	613b      	str	r3, [r7, #16]
    25b2:	693b      	ldr	r3, [r7, #16]
    25b4:	681b      	ldr	r3, [r3, #0]
    25b6:	f003 0301 	and.w	r3, r3, #1
    25ba:	2b00      	cmp	r3, #0
    25bc:	d00a      	beq.n	25d4 <vPortFree+0x7c>
        __asm volatile
    25be:	f04f 0340 	mov.w	r3, #64	; 0x40
    25c2:	f383 8811 	msr	BASEPRI, r3
    25c6:	f3bf 8f6f 	isb	sy
    25ca:	f3bf 8f4f 	dsb	sy
    25ce:	60bb      	str	r3, [r7, #8]
    }
    25d0:	bf00      	nop
    25d2:	be00      	bkpt	0x0000

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
    25d4:	69bb      	ldr	r3, [r7, #24]
    25d6:	685b      	ldr	r3, [r3, #4]
    25d8:	0fdb      	lsrs	r3, r3, #31
    25da:	f003 0301 	and.w	r3, r3, #1
    25de:	b2db      	uxtb	r3, r3
    25e0:	2b00      	cmp	r3, #0
    25e2:	d01c      	beq.n	261e <vPortFree+0xc6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    25e4:	69bb      	ldr	r3, [r7, #24]
    25e6:	681b      	ldr	r3, [r3, #0]
    25e8:	2b00      	cmp	r3, #0
    25ea:	d118      	bne.n	261e <vPortFree+0xc6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
    25ec:	69bb      	ldr	r3, [r7, #24]
    25ee:	685b      	ldr	r3, [r3, #4]
    25f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    25f4:	69bb      	ldr	r3, [r7, #24]
    25f6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
    25f8:	f7fe fd0a 	bl	1010 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    25fc:	69bb      	ldr	r3, [r7, #24]
    25fe:	685a      	ldr	r2, [r3, #4]
    2600:	4b0a      	ldr	r3, [pc, #40]	; (262c <vPortFree+0xd4>)
    2602:	681b      	ldr	r3, [r3, #0]
    2604:	4413      	add	r3, r2
    2606:	4a09      	ldr	r2, [pc, #36]	; (262c <vPortFree+0xd4>)
    2608:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    260a:	69b8      	ldr	r0, [r7, #24]
    260c:	f000 f86e 	bl	26ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    2610:	4b07      	ldr	r3, [pc, #28]	; (2630 <vPortFree+0xd8>)
    2612:	681b      	ldr	r3, [r3, #0]
    2614:	3301      	adds	r3, #1
    2616:	4a06      	ldr	r2, [pc, #24]	; (2630 <vPortFree+0xd8>)
    2618:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
    261a:	f7fe fd07 	bl	102c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    261e:	bf00      	nop
    2620:	3720      	adds	r7, #32
    2622:	46bd      	mov	sp, r7
    2624:	bd80      	pop	{r7, pc}
    2626:	bf00      	nop
    2628:	e000edf0 	.word	0xe000edf0
    262c:	20001148 	.word	0x20001148
    2630:	20001154 	.word	0x20001154

00002634 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
    2634:	b480      	push	{r7}
    2636:	b085      	sub	sp, #20
    2638:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    263a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    263e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
    2640:	4b25      	ldr	r3, [pc, #148]	; (26d8 <prvHeapInit+0xa4>)
    2642:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    2644:	68fb      	ldr	r3, [r7, #12]
    2646:	f003 0307 	and.w	r3, r3, #7
    264a:	2b00      	cmp	r3, #0
    264c:	d00c      	beq.n	2668 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
    264e:	68fb      	ldr	r3, [r7, #12]
    2650:	3307      	adds	r3, #7
    2652:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    2654:	68fb      	ldr	r3, [r7, #12]
    2656:	f023 0307 	bic.w	r3, r3, #7
    265a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
    265c:	68ba      	ldr	r2, [r7, #8]
    265e:	68fb      	ldr	r3, [r7, #12]
    2660:	1ad3      	subs	r3, r2, r3
    2662:	4a1d      	ldr	r2, [pc, #116]	; (26d8 <prvHeapInit+0xa4>)
    2664:	4413      	add	r3, r2
    2666:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
    2668:	68fb      	ldr	r3, [r7, #12]
    266a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    266c:	4a1b      	ldr	r2, [pc, #108]	; (26dc <prvHeapInit+0xa8>)
    266e:	687b      	ldr	r3, [r7, #4]
    2670:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
    2672:	4b1a      	ldr	r3, [pc, #104]	; (26dc <prvHeapInit+0xa8>)
    2674:	2200      	movs	r2, #0
    2676:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
    2678:	687a      	ldr	r2, [r7, #4]
    267a:	68bb      	ldr	r3, [r7, #8]
    267c:	4413      	add	r3, r2
    267e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
    2680:	2208      	movs	r2, #8
    2682:	68fb      	ldr	r3, [r7, #12]
    2684:	1a9b      	subs	r3, r3, r2
    2686:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    2688:	68fb      	ldr	r3, [r7, #12]
    268a:	f023 0307 	bic.w	r3, r3, #7
    268e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
    2690:	68fb      	ldr	r3, [r7, #12]
    2692:	4a13      	ldr	r2, [pc, #76]	; (26e0 <prvHeapInit+0xac>)
    2694:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
    2696:	4b12      	ldr	r3, [pc, #72]	; (26e0 <prvHeapInit+0xac>)
    2698:	681b      	ldr	r3, [r3, #0]
    269a:	2200      	movs	r2, #0
    269c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
    269e:	4b10      	ldr	r3, [pc, #64]	; (26e0 <prvHeapInit+0xac>)
    26a0:	681b      	ldr	r3, [r3, #0]
    26a2:	2200      	movs	r2, #0
    26a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    26a6:	687b      	ldr	r3, [r7, #4]
    26a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
    26aa:	683b      	ldr	r3, [r7, #0]
    26ac:	68fa      	ldr	r2, [r7, #12]
    26ae:	1ad2      	subs	r2, r2, r3
    26b0:	683b      	ldr	r3, [r7, #0]
    26b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    26b4:	4b0a      	ldr	r3, [pc, #40]	; (26e0 <prvHeapInit+0xac>)
    26b6:	681a      	ldr	r2, [r3, #0]
    26b8:	683b      	ldr	r3, [r7, #0]
    26ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    26bc:	683b      	ldr	r3, [r7, #0]
    26be:	685b      	ldr	r3, [r3, #4]
    26c0:	4a08      	ldr	r2, [pc, #32]	; (26e4 <prvHeapInit+0xb0>)
    26c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	685b      	ldr	r3, [r3, #4]
    26c8:	4a07      	ldr	r2, [pc, #28]	; (26e8 <prvHeapInit+0xb4>)
    26ca:	6013      	str	r3, [r2, #0]
}
    26cc:	bf00      	nop
    26ce:	3714      	adds	r7, #20
    26d0:	46bd      	mov	sp, r7
    26d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    26d6:	4770      	bx	lr
    26d8:	2000013c 	.word	0x2000013c
    26dc:	2000113c 	.word	0x2000113c
    26e0:	20001144 	.word	0x20001144
    26e4:	2000114c 	.word	0x2000114c
    26e8:	20001148 	.word	0x20001148

000026ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    26ec:	b480      	push	{r7}
    26ee:	b085      	sub	sp, #20
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    26f4:	4b28      	ldr	r3, [pc, #160]	; (2798 <prvInsertBlockIntoFreeList+0xac>)
    26f6:	60fb      	str	r3, [r7, #12]
    26f8:	e002      	b.n	2700 <prvInsertBlockIntoFreeList+0x14>
    26fa:	68fb      	ldr	r3, [r7, #12]
    26fc:	681b      	ldr	r3, [r3, #0]
    26fe:	60fb      	str	r3, [r7, #12]
    2700:	68fb      	ldr	r3, [r7, #12]
    2702:	681b      	ldr	r3, [r3, #0]
    2704:	687a      	ldr	r2, [r7, #4]
    2706:	429a      	cmp	r2, r3
    2708:	d8f7      	bhi.n	26fa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
    270a:	68fb      	ldr	r3, [r7, #12]
    270c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    270e:	68fb      	ldr	r3, [r7, #12]
    2710:	685b      	ldr	r3, [r3, #4]
    2712:	68ba      	ldr	r2, [r7, #8]
    2714:	4413      	add	r3, r2
    2716:	687a      	ldr	r2, [r7, #4]
    2718:	429a      	cmp	r2, r3
    271a:	d108      	bne.n	272e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    271c:	68fb      	ldr	r3, [r7, #12]
    271e:	685a      	ldr	r2, [r3, #4]
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	685b      	ldr	r3, [r3, #4]
    2724:	441a      	add	r2, r3
    2726:	68fb      	ldr	r3, [r7, #12]
    2728:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
    272a:	68fb      	ldr	r3, [r7, #12]
    272c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	685b      	ldr	r3, [r3, #4]
    2736:	68ba      	ldr	r2, [r7, #8]
    2738:	441a      	add	r2, r3
    273a:	68fb      	ldr	r3, [r7, #12]
    273c:	681b      	ldr	r3, [r3, #0]
    273e:	429a      	cmp	r2, r3
    2740:	d118      	bne.n	2774 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    2742:	68fb      	ldr	r3, [r7, #12]
    2744:	681a      	ldr	r2, [r3, #0]
    2746:	4b15      	ldr	r3, [pc, #84]	; (279c <prvInsertBlockIntoFreeList+0xb0>)
    2748:	681b      	ldr	r3, [r3, #0]
    274a:	429a      	cmp	r2, r3
    274c:	d00d      	beq.n	276a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	685a      	ldr	r2, [r3, #4]
    2752:	68fb      	ldr	r3, [r7, #12]
    2754:	681b      	ldr	r3, [r3, #0]
    2756:	685b      	ldr	r3, [r3, #4]
    2758:	441a      	add	r2, r3
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    275e:	68fb      	ldr	r3, [r7, #12]
    2760:	681b      	ldr	r3, [r3, #0]
    2762:	681a      	ldr	r2, [r3, #0]
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	601a      	str	r2, [r3, #0]
    2768:	e008      	b.n	277c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    276a:	4b0c      	ldr	r3, [pc, #48]	; (279c <prvInsertBlockIntoFreeList+0xb0>)
    276c:	681a      	ldr	r2, [r3, #0]
    276e:	687b      	ldr	r3, [r7, #4]
    2770:	601a      	str	r2, [r3, #0]
    2772:	e003      	b.n	277c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    2774:	68fb      	ldr	r3, [r7, #12]
    2776:	681a      	ldr	r2, [r3, #0]
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    277c:	68fa      	ldr	r2, [r7, #12]
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	429a      	cmp	r2, r3
    2782:	d002      	beq.n	278a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    2784:	68fb      	ldr	r3, [r7, #12]
    2786:	687a      	ldr	r2, [r7, #4]
    2788:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    278a:	bf00      	nop
    278c:	3714      	adds	r7, #20
    278e:	46bd      	mov	sp, r7
    2790:	f85d 7b04 	ldr.w	r7, [sp], #4
    2794:	4770      	bx	lr
    2796:	bf00      	nop
    2798:	2000113c 	.word	0x2000113c
    279c:	20001144 	.word	0x20001144

000027a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    27a0:	b480      	push	{r7}
    27a2:	b083      	sub	sp, #12
    27a4:	af00      	add	r7, sp, #0
    27a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    27a8:	687b      	ldr	r3, [r7, #4]
    27aa:	f103 0208 	add.w	r2, r3, #8
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	f103 0208 	add.w	r2, r3, #8
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	f103 0208 	add.w	r2, r3, #8
    27ca:	687b      	ldr	r3, [r7, #4]
    27cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	2200      	movs	r2, #0
    27d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    27d4:	bf00      	nop
    27d6:	370c      	adds	r7, #12
    27d8:	46bd      	mov	sp, r7
    27da:	f85d 7b04 	ldr.w	r7, [sp], #4
    27de:	4770      	bx	lr

000027e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    27e0:	b480      	push	{r7}
    27e2:	b083      	sub	sp, #12
    27e4:	af00      	add	r7, sp, #0
    27e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	2200      	movs	r2, #0
    27ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    27ee:	bf00      	nop
    27f0:	370c      	adds	r7, #12
    27f2:	46bd      	mov	sp, r7
    27f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    27f8:	4770      	bx	lr

000027fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    27fa:	b480      	push	{r7}
    27fc:	b085      	sub	sp, #20
    27fe:	af00      	add	r7, sp, #0
    2800:	6078      	str	r0, [r7, #4]
    2802:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2804:	683b      	ldr	r3, [r7, #0]
    2806:	681b      	ldr	r3, [r3, #0]
    2808:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    280a:	68bb      	ldr	r3, [r7, #8]
    280c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2810:	d103      	bne.n	281a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	691b      	ldr	r3, [r3, #16]
    2816:	60fb      	str	r3, [r7, #12]
    2818:	e00c      	b.n	2834 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	3308      	adds	r3, #8
    281e:	60fb      	str	r3, [r7, #12]
    2820:	e002      	b.n	2828 <vListInsert+0x2e>
    2822:	68fb      	ldr	r3, [r7, #12]
    2824:	685b      	ldr	r3, [r3, #4]
    2826:	60fb      	str	r3, [r7, #12]
    2828:	68fb      	ldr	r3, [r7, #12]
    282a:	685b      	ldr	r3, [r3, #4]
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	68ba      	ldr	r2, [r7, #8]
    2830:	429a      	cmp	r2, r3
    2832:	d2f6      	bcs.n	2822 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2834:	68fb      	ldr	r3, [r7, #12]
    2836:	685a      	ldr	r2, [r3, #4]
    2838:	683b      	ldr	r3, [r7, #0]
    283a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    283c:	683b      	ldr	r3, [r7, #0]
    283e:	685b      	ldr	r3, [r3, #4]
    2840:	683a      	ldr	r2, [r7, #0]
    2842:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2844:	683b      	ldr	r3, [r7, #0]
    2846:	68fa      	ldr	r2, [r7, #12]
    2848:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
    284a:	68fb      	ldr	r3, [r7, #12]
    284c:	683a      	ldr	r2, [r7, #0]
    284e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    2850:	683b      	ldr	r3, [r7, #0]
    2852:	687a      	ldr	r2, [r7, #4]
    2854:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	681b      	ldr	r3, [r3, #0]
    285a:	1c5a      	adds	r2, r3, #1
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	601a      	str	r2, [r3, #0]
}
    2860:	bf00      	nop
    2862:	3714      	adds	r7, #20
    2864:	46bd      	mov	sp, r7
    2866:	f85d 7b04 	ldr.w	r7, [sp], #4
    286a:	4770      	bx	lr

0000286c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    286c:	b480      	push	{r7}
    286e:	b085      	sub	sp, #20
    2870:	af00      	add	r7, sp, #0
    2872:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	691b      	ldr	r3, [r3, #16]
    2878:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	685b      	ldr	r3, [r3, #4]
    287e:	687a      	ldr	r2, [r7, #4]
    2880:	6892      	ldr	r2, [r2, #8]
    2882:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	689b      	ldr	r3, [r3, #8]
    2888:	687a      	ldr	r2, [r7, #4]
    288a:	6852      	ldr	r2, [r2, #4]
    288c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    288e:	68fb      	ldr	r3, [r7, #12]
    2890:	685b      	ldr	r3, [r3, #4]
    2892:	687a      	ldr	r2, [r7, #4]
    2894:	429a      	cmp	r2, r3
    2896:	d103      	bne.n	28a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2898:	687b      	ldr	r3, [r7, #4]
    289a:	689a      	ldr	r2, [r3, #8]
    289c:	68fb      	ldr	r3, [r7, #12]
    289e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	2200      	movs	r2, #0
    28a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
    28a6:	68fb      	ldr	r3, [r7, #12]
    28a8:	681b      	ldr	r3, [r3, #0]
    28aa:	1e5a      	subs	r2, r3, #1
    28ac:	68fb      	ldr	r3, [r7, #12]
    28ae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
    28b0:	68fb      	ldr	r3, [r7, #12]
    28b2:	681b      	ldr	r3, [r3, #0]
}
    28b4:	4618      	mov	r0, r3
    28b6:	3714      	adds	r7, #20
    28b8:	46bd      	mov	sp, r7
    28ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    28be:	4770      	bx	lr

000028c0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    28c0:	b580      	push	{r7, lr}
    28c2:	b088      	sub	sp, #32
    28c4:	af00      	add	r7, sp, #0
    28c6:	6078      	str	r0, [r7, #4]
    28c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
    28ca:	2301      	movs	r3, #1
    28cc:	61fb      	str	r3, [r7, #28]
    Queue_t * const pxQueue = xQueue;
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	61bb      	str	r3, [r7, #24]

    configASSERT( pxQueue );
    28d2:	69bb      	ldr	r3, [r7, #24]
    28d4:	2b00      	cmp	r3, #0
    28d6:	d112      	bne.n	28fe <xQueueGenericReset+0x3e>
    28d8:	4b48      	ldr	r3, [pc, #288]	; (29fc <xQueueGenericReset+0x13c>)
    28da:	617b      	str	r3, [r7, #20]
    28dc:	697b      	ldr	r3, [r7, #20]
    28de:	681b      	ldr	r3, [r3, #0]
    28e0:	f003 0301 	and.w	r3, r3, #1
    28e4:	2b00      	cmp	r3, #0
    28e6:	d00a      	beq.n	28fe <xQueueGenericReset+0x3e>
        __asm volatile
    28e8:	f04f 0340 	mov.w	r3, #64	; 0x40
    28ec:	f383 8811 	msr	BASEPRI, r3
    28f0:	f3bf 8f6f 	isb	sy
    28f4:	f3bf 8f4f 	dsb	sy
    28f8:	60fb      	str	r3, [r7, #12]
    }
    28fa:	bf00      	nop
    28fc:	be00      	bkpt	0x0000

    if( ( pxQueue != NULL ) &&
    28fe:	69bb      	ldr	r3, [r7, #24]
    2900:	2b00      	cmp	r3, #0
    2902:	d05d      	beq.n	29c0 <xQueueGenericReset+0x100>
        ( pxQueue->uxLength >= 1U ) &&
    2904:	69bb      	ldr	r3, [r7, #24]
    2906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
    2908:	2b00      	cmp	r3, #0
    290a:	d059      	beq.n	29c0 <xQueueGenericReset+0x100>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    290c:	69bb      	ldr	r3, [r7, #24]
    290e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2910:	69bb      	ldr	r3, [r7, #24]
    2912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2914:	2100      	movs	r1, #0
    2916:	fba3 2302 	umull	r2, r3, r3, r2
    291a:	2b00      	cmp	r3, #0
    291c:	d000      	beq.n	2920 <xQueueGenericReset+0x60>
    291e:	2101      	movs	r1, #1
    2920:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
    2922:	2b00      	cmp	r3, #0
    2924:	d14c      	bne.n	29c0 <xQueueGenericReset+0x100>
    {
        taskENTER_CRITICAL();
    2926:	f000 fec1 	bl	36ac <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    292a:	69bb      	ldr	r3, [r7, #24]
    292c:	681a      	ldr	r2, [r3, #0]
    292e:	69bb      	ldr	r3, [r7, #24]
    2930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2932:	69b9      	ldr	r1, [r7, #24]
    2934:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2936:	fb01 f303 	mul.w	r3, r1, r3
    293a:	441a      	add	r2, r3
    293c:	69bb      	ldr	r3, [r7, #24]
    293e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2940:	69bb      	ldr	r3, [r7, #24]
    2942:	2200      	movs	r2, #0
    2944:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
    2946:	69bb      	ldr	r3, [r7, #24]
    2948:	681a      	ldr	r2, [r3, #0]
    294a:	69bb      	ldr	r3, [r7, #24]
    294c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    294e:	69bb      	ldr	r3, [r7, #24]
    2950:	681a      	ldr	r2, [r3, #0]
    2952:	69bb      	ldr	r3, [r7, #24]
    2954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2956:	3b01      	subs	r3, #1
    2958:	69b9      	ldr	r1, [r7, #24]
    295a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    295c:	fb01 f303 	mul.w	r3, r1, r3
    2960:	441a      	add	r2, r3
    2962:	69bb      	ldr	r3, [r7, #24]
    2964:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
    2966:	69bb      	ldr	r3, [r7, #24]
    2968:	22ff      	movs	r2, #255	; 0xff
    296a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
    296e:	69bb      	ldr	r3, [r7, #24]
    2970:	22ff      	movs	r2, #255	; 0xff
    2972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
    2976:	683b      	ldr	r3, [r7, #0]
    2978:	2b00      	cmp	r3, #0
    297a:	d114      	bne.n	29a6 <xQueueGenericReset+0xe6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    297c:	69bb      	ldr	r3, [r7, #24]
    297e:	691b      	ldr	r3, [r3, #16]
    2980:	2b00      	cmp	r3, #0
    2982:	d01a      	beq.n	29ba <xQueueGenericReset+0xfa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2984:	69bb      	ldr	r3, [r7, #24]
    2986:	3310      	adds	r3, #16
    2988:	4618      	mov	r0, r3
    298a:	f7fe fe8f 	bl	16ac <xTaskRemoveFromEventList>
    298e:	4603      	mov	r3, r0
    2990:	2b00      	cmp	r3, #0
    2992:	d012      	beq.n	29ba <xQueueGenericReset+0xfa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    2994:	4b1a      	ldr	r3, [pc, #104]	; (2a00 <xQueueGenericReset+0x140>)
    2996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    299a:	601a      	str	r2, [r3, #0]
    299c:	f3bf 8f4f 	dsb	sy
    29a0:	f3bf 8f6f 	isb	sy
    29a4:	e009      	b.n	29ba <xQueueGenericReset+0xfa>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    29a6:	69bb      	ldr	r3, [r7, #24]
    29a8:	3310      	adds	r3, #16
    29aa:	4618      	mov	r0, r3
    29ac:	f7ff fef8 	bl	27a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    29b0:	69bb      	ldr	r3, [r7, #24]
    29b2:	3324      	adds	r3, #36	; 0x24
    29b4:	4618      	mov	r0, r3
    29b6:	f7ff fef3 	bl	27a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
    29ba:	f000 feb1 	bl	3720 <vPortExitCritical>
    29be:	e001      	b.n	29c4 <xQueueGenericReset+0x104>
    }
    else
    {
        xReturn = pdFAIL;
    29c0:	2300      	movs	r3, #0
    29c2:	61fb      	str	r3, [r7, #28]
    }

    configASSERT( xReturn != pdFAIL );
    29c4:	69fb      	ldr	r3, [r7, #28]
    29c6:	2b00      	cmp	r3, #0
    29c8:	d112      	bne.n	29f0 <xQueueGenericReset+0x130>
    29ca:	4b0c      	ldr	r3, [pc, #48]	; (29fc <xQueueGenericReset+0x13c>)
    29cc:	613b      	str	r3, [r7, #16]
    29ce:	693b      	ldr	r3, [r7, #16]
    29d0:	681b      	ldr	r3, [r3, #0]
    29d2:	f003 0301 	and.w	r3, r3, #1
    29d6:	2b00      	cmp	r3, #0
    29d8:	d00a      	beq.n	29f0 <xQueueGenericReset+0x130>
        __asm volatile
    29da:	f04f 0340 	mov.w	r3, #64	; 0x40
    29de:	f383 8811 	msr	BASEPRI, r3
    29e2:	f3bf 8f6f 	isb	sy
    29e6:	f3bf 8f4f 	dsb	sy
    29ea:	60bb      	str	r3, [r7, #8]
    }
    29ec:	bf00      	nop
    29ee:	be00      	bkpt	0x0000

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
    29f0:	69fb      	ldr	r3, [r7, #28]
}
    29f2:	4618      	mov	r0, r3
    29f4:	3720      	adds	r7, #32
    29f6:	46bd      	mov	sp, r7
    29f8:	bd80      	pop	{r7, pc}
    29fa:	bf00      	nop
    29fc:	e000edf0 	.word	0xe000edf0
    2a00:	e000ed04 	.word	0xe000ed04

00002a04 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
    2a04:	b580      	push	{r7, lr}
    2a06:	b08c      	sub	sp, #48	; 0x30
    2a08:	af02      	add	r7, sp, #8
    2a0a:	60f8      	str	r0, [r7, #12]
    2a0c:	60b9      	str	r1, [r7, #8]
    2a0e:	4613      	mov	r3, r2
    2a10:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
    2a12:	2300      	movs	r3, #0
    2a14:	627b      	str	r3, [r7, #36]	; 0x24
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    2a16:	68fb      	ldr	r3, [r7, #12]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d02e      	beq.n	2a7a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    2a1c:	2100      	movs	r1, #0
    2a1e:	68ba      	ldr	r2, [r7, #8]
    2a20:	68fb      	ldr	r3, [r7, #12]
    2a22:	fba3 2302 	umull	r2, r3, r3, r2
    2a26:	2b00      	cmp	r3, #0
    2a28:	d000      	beq.n	2a2c <xQueueGenericCreate+0x28>
    2a2a:	2101      	movs	r1, #1
    2a2c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d123      	bne.n	2a7a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
    2a32:	68fb      	ldr	r3, [r7, #12]
    2a34:	68ba      	ldr	r2, [r7, #8]
    2a36:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    2a3a:	f113 0f51 	cmn.w	r3, #81	; 0x51
    2a3e:	d81c      	bhi.n	2a7a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2a40:	68fb      	ldr	r3, [r7, #12]
    2a42:	68ba      	ldr	r2, [r7, #8]
    2a44:	fb02 f303 	mul.w	r3, r2, r3
    2a48:	623b      	str	r3, [r7, #32]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    2a4a:	6a3b      	ldr	r3, [r7, #32]
    2a4c:	3350      	adds	r3, #80	; 0x50
    2a4e:	4618      	mov	r0, r3
    2a50:	f7ff fca6 	bl	23a0 <pvPortMalloc>
    2a54:	6278      	str	r0, [r7, #36]	; 0x24

            if( pxNewQueue != NULL )
    2a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d024      	beq.n	2aa6 <xQueueGenericCreate+0xa2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
    2a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a5e:	61fb      	str	r3, [r7, #28]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    2a60:	69fb      	ldr	r3, [r7, #28]
    2a62:	3350      	adds	r3, #80	; 0x50
    2a64:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    2a66:	79fa      	ldrb	r2, [r7, #7]
    2a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a6a:	9300      	str	r3, [sp, #0]
    2a6c:	4613      	mov	r3, r2
    2a6e:	69fa      	ldr	r2, [r7, #28]
    2a70:	68b9      	ldr	r1, [r7, #8]
    2a72:	68f8      	ldr	r0, [r7, #12]
    2a74:	f000 f81e 	bl	2ab4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
    2a78:	e015      	b.n	2aa6 <xQueueGenericCreate+0xa2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
    2a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d112      	bne.n	2aa6 <xQueueGenericCreate+0xa2>
    2a80:	4b0b      	ldr	r3, [pc, #44]	; (2ab0 <xQueueGenericCreate+0xac>)
    2a82:	61bb      	str	r3, [r7, #24]
    2a84:	69bb      	ldr	r3, [r7, #24]
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	f003 0301 	and.w	r3, r3, #1
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d00a      	beq.n	2aa6 <xQueueGenericCreate+0xa2>
        __asm volatile
    2a90:	f04f 0340 	mov.w	r3, #64	; 0x40
    2a94:	f383 8811 	msr	BASEPRI, r3
    2a98:	f3bf 8f6f 	isb	sy
    2a9c:	f3bf 8f4f 	dsb	sy
    2aa0:	617b      	str	r3, [r7, #20]
    }
    2aa2:	bf00      	nop
    2aa4:	be00      	bkpt	0x0000
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
    2aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    2aa8:	4618      	mov	r0, r3
    2aaa:	3728      	adds	r7, #40	; 0x28
    2aac:	46bd      	mov	sp, r7
    2aae:	bd80      	pop	{r7, pc}
    2ab0:	e000edf0 	.word	0xe000edf0

00002ab4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
    2ab4:	b580      	push	{r7, lr}
    2ab6:	b084      	sub	sp, #16
    2ab8:	af00      	add	r7, sp, #0
    2aba:	60f8      	str	r0, [r7, #12]
    2abc:	60b9      	str	r1, [r7, #8]
    2abe:	607a      	str	r2, [r7, #4]
    2ac0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
    2ac2:	68bb      	ldr	r3, [r7, #8]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d103      	bne.n	2ad0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    2ac8:	69bb      	ldr	r3, [r7, #24]
    2aca:	69ba      	ldr	r2, [r7, #24]
    2acc:	601a      	str	r2, [r3, #0]
    2ace:	e002      	b.n	2ad6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    2ad0:	69bb      	ldr	r3, [r7, #24]
    2ad2:	687a      	ldr	r2, [r7, #4]
    2ad4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
    2ad6:	69bb      	ldr	r3, [r7, #24]
    2ad8:	68fa      	ldr	r2, [r7, #12]
    2ada:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
    2adc:	69bb      	ldr	r3, [r7, #24]
    2ade:	68ba      	ldr	r2, [r7, #8]
    2ae0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    2ae2:	2101      	movs	r1, #1
    2ae4:	69b8      	ldr	r0, [r7, #24]
    2ae6:	f7ff feeb 	bl	28c0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
    2aea:	69bb      	ldr	r3, [r7, #24]
    2aec:	78fa      	ldrb	r2, [r7, #3]
    2aee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
    2af2:	bf00      	nop
    2af4:	3710      	adds	r7, #16
    2af6:	46bd      	mov	sp, r7
    2af8:	bd80      	pop	{r7, pc}
	...

00002afc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
    2afc:	b580      	push	{r7, lr}
    2afe:	b092      	sub	sp, #72	; 0x48
    2b00:	af00      	add	r7, sp, #0
    2b02:	60f8      	str	r0, [r7, #12]
    2b04:	60b9      	str	r1, [r7, #8]
    2b06:	607a      	str	r2, [r7, #4]
    2b08:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    2b0a:	2300      	movs	r3, #0
    2b0c:	647b      	str	r3, [r7, #68]	; 0x44
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
    2b0e:	68fb      	ldr	r3, [r7, #12]
    2b10:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
    2b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2b14:	2b00      	cmp	r3, #0
    2b16:	d112      	bne.n	2b3e <xQueueGenericSend+0x42>
    2b18:	4b7f      	ldr	r3, [pc, #508]	; (2d18 <xQueueGenericSend+0x21c>)
    2b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    2b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b1e:	681b      	ldr	r3, [r3, #0]
    2b20:	f003 0301 	and.w	r3, r3, #1
    2b24:	2b00      	cmp	r3, #0
    2b26:	d00a      	beq.n	2b3e <xQueueGenericSend+0x42>
        __asm volatile
    2b28:	f04f 0340 	mov.w	r3, #64	; 0x40
    2b2c:	f383 8811 	msr	BASEPRI, r3
    2b30:	f3bf 8f6f 	isb	sy
    2b34:	f3bf 8f4f 	dsb	sy
    2b38:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    2b3a:	bf00      	nop
    2b3c:	be00      	bkpt	0x0000
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2b3e:	68bb      	ldr	r3, [r7, #8]
    2b40:	2b00      	cmp	r3, #0
    2b42:	d116      	bne.n	2b72 <xQueueGenericSend+0x76>
    2b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d012      	beq.n	2b72 <xQueueGenericSend+0x76>
    2b4c:	4b72      	ldr	r3, [pc, #456]	; (2d18 <xQueueGenericSend+0x21c>)
    2b4e:	63bb      	str	r3, [r7, #56]	; 0x38
    2b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b52:	681b      	ldr	r3, [r3, #0]
    2b54:	f003 0301 	and.w	r3, r3, #1
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d00a      	beq.n	2b72 <xQueueGenericSend+0x76>
        __asm volatile
    2b5c:	f04f 0340 	mov.w	r3, #64	; 0x40
    2b60:	f383 8811 	msr	BASEPRI, r3
    2b64:	f3bf 8f6f 	isb	sy
    2b68:	f3bf 8f4f 	dsb	sy
    2b6c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    2b6e:	bf00      	nop
    2b70:	be00      	bkpt	0x0000
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2b72:	683b      	ldr	r3, [r7, #0]
    2b74:	2b02      	cmp	r3, #2
    2b76:	d116      	bne.n	2ba6 <xQueueGenericSend+0xaa>
    2b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2b7c:	2b01      	cmp	r3, #1
    2b7e:	d012      	beq.n	2ba6 <xQueueGenericSend+0xaa>
    2b80:	4b65      	ldr	r3, [pc, #404]	; (2d18 <xQueueGenericSend+0x21c>)
    2b82:	637b      	str	r3, [r7, #52]	; 0x34
    2b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	f003 0301 	and.w	r3, r3, #1
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d00a      	beq.n	2ba6 <xQueueGenericSend+0xaa>
        __asm volatile
    2b90:	f04f 0340 	mov.w	r3, #64	; 0x40
    2b94:	f383 8811 	msr	BASEPRI, r3
    2b98:	f3bf 8f6f 	isb	sy
    2b9c:	f3bf 8f4f 	dsb	sy
    2ba0:	623b      	str	r3, [r7, #32]
    }
    2ba2:	bf00      	nop
    2ba4:	be00      	bkpt	0x0000
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2ba6:	f7fe ff73 	bl	1a90 <xTaskGetSchedulerState>
    2baa:	4603      	mov	r3, r0
    2bac:	2b00      	cmp	r3, #0
    2bae:	d115      	bne.n	2bdc <xQueueGenericSend+0xe0>
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d012      	beq.n	2bdc <xQueueGenericSend+0xe0>
    2bb6:	4b58      	ldr	r3, [pc, #352]	; (2d18 <xQueueGenericSend+0x21c>)
    2bb8:	633b      	str	r3, [r7, #48]	; 0x30
    2bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bbc:	681b      	ldr	r3, [r3, #0]
    2bbe:	f003 0301 	and.w	r3, r3, #1
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d00a      	beq.n	2bdc <xQueueGenericSend+0xe0>
        __asm volatile
    2bc6:	f04f 0340 	mov.w	r3, #64	; 0x40
    2bca:	f383 8811 	msr	BASEPRI, r3
    2bce:	f3bf 8f6f 	isb	sy
    2bd2:	f3bf 8f4f 	dsb	sy
    2bd6:	61fb      	str	r3, [r7, #28]
    }
    2bd8:	bf00      	nop
    2bda:	be00      	bkpt	0x0000
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    2bdc:	f000 fd66 	bl	36ac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2be8:	429a      	cmp	r2, r3
    2bea:	d302      	bcc.n	2bf2 <xQueueGenericSend+0xf6>
    2bec:	683b      	ldr	r3, [r7, #0]
    2bee:	2b02      	cmp	r3, #2
    2bf0:	d129      	bne.n	2c46 <xQueueGenericSend+0x14a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2bf2:	683a      	ldr	r2, [r7, #0]
    2bf4:	68b9      	ldr	r1, [r7, #8]
    2bf6:	6c38      	ldr	r0, [r7, #64]	; 0x40
    2bf8:	f000 fa4c 	bl	3094 <prvCopyDataToQueue>
    2bfc:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c02:	2b00      	cmp	r3, #0
    2c04:	d010      	beq.n	2c28 <xQueueGenericSend+0x12c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c08:	3324      	adds	r3, #36	; 0x24
    2c0a:	4618      	mov	r0, r3
    2c0c:	f7fe fd4e 	bl	16ac <xTaskRemoveFromEventList>
    2c10:	4603      	mov	r3, r0
    2c12:	2b00      	cmp	r3, #0
    2c14:	d013      	beq.n	2c3e <xQueueGenericSend+0x142>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
    2c16:	4b41      	ldr	r3, [pc, #260]	; (2d1c <xQueueGenericSend+0x220>)
    2c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2c1c:	601a      	str	r2, [r3, #0]
    2c1e:	f3bf 8f4f 	dsb	sy
    2c22:	f3bf 8f6f 	isb	sy
    2c26:	e00a      	b.n	2c3e <xQueueGenericSend+0x142>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
    2c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d007      	beq.n	2c3e <xQueueGenericSend+0x142>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
    2c2e:	4b3b      	ldr	r3, [pc, #236]	; (2d1c <xQueueGenericSend+0x220>)
    2c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2c34:	601a      	str	r2, [r3, #0]
    2c36:	f3bf 8f4f 	dsb	sy
    2c3a:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    2c3e:	f000 fd6f 	bl	3720 <vPortExitCritical>
                return pdPASS;
    2c42:	2301      	movs	r3, #1
    2c44:	e063      	b.n	2d0e <xQueueGenericSend+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d103      	bne.n	2c54 <xQueueGenericSend+0x158>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    2c4c:	f000 fd68 	bl	3720 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
    2c50:	2300      	movs	r3, #0
    2c52:	e05c      	b.n	2d0e <xQueueGenericSend+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
    2c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2c56:	2b00      	cmp	r3, #0
    2c58:	d106      	bne.n	2c68 <xQueueGenericSend+0x16c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    2c5a:	f107 0314 	add.w	r3, r7, #20
    2c5e:	4618      	mov	r0, r3
    2c60:	f7fe fe06 	bl	1870 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    2c64:	2301      	movs	r3, #1
    2c66:	647b      	str	r3, [r7, #68]	; 0x44
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    2c68:	f000 fd5a 	bl	3720 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    2c6c:	f7fe f9d0 	bl	1010 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2c70:	f000 fd1c 	bl	36ac <vPortEnterCritical>
    2c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    2c7a:	b25b      	sxtb	r3, r3
    2c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2c80:	d103      	bne.n	2c8a <xQueueGenericSend+0x18e>
    2c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c84:	2200      	movs	r2, #0
    2c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    2c90:	b25b      	sxtb	r3, r3
    2c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2c96:	d103      	bne.n	2ca0 <xQueueGenericSend+0x1a4>
    2c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c9a:	2200      	movs	r2, #0
    2c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    2ca0:	f000 fd3e 	bl	3720 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2ca4:	1d3a      	adds	r2, r7, #4
    2ca6:	f107 0314 	add.w	r3, r7, #20
    2caa:	4611      	mov	r1, r2
    2cac:	4618      	mov	r0, r3
    2cae:	f7fe fdf5 	bl	189c <xTaskCheckForTimeOut>
    2cb2:	4603      	mov	r3, r0
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d124      	bne.n	2d02 <xQueueGenericSend+0x206>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2cb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
    2cba:	f000 fae3 	bl	3284 <prvIsQueueFull>
    2cbe:	4603      	mov	r3, r0
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d018      	beq.n	2cf6 <xQueueGenericSend+0x1fa>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2cc6:	3310      	adds	r3, #16
    2cc8:	687a      	ldr	r2, [r7, #4]
    2cca:	4611      	mov	r1, r2
    2ccc:	4618      	mov	r0, r3
    2cce:	f7fe fc6f 	bl	15b0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    2cd2:	6c38      	ldr	r0, [r7, #64]	; 0x40
    2cd4:	f000 fa6e 	bl	31b4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    2cd8:	f7fe f9a8 	bl	102c <xTaskResumeAll>
    2cdc:	4603      	mov	r3, r0
    2cde:	2b00      	cmp	r3, #0
    2ce0:	f47f af7c 	bne.w	2bdc <xQueueGenericSend+0xe0>
                {
                    portYIELD_WITHIN_API();
    2ce4:	4b0d      	ldr	r3, [pc, #52]	; (2d1c <xQueueGenericSend+0x220>)
    2ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2cea:	601a      	str	r2, [r3, #0]
    2cec:	f3bf 8f4f 	dsb	sy
    2cf0:	f3bf 8f6f 	isb	sy
    2cf4:	e772      	b.n	2bdc <xQueueGenericSend+0xe0>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    2cf6:	6c38      	ldr	r0, [r7, #64]	; 0x40
    2cf8:	f000 fa5c 	bl	31b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    2cfc:	f7fe f996 	bl	102c <xTaskResumeAll>
    2d00:	e76c      	b.n	2bdc <xQueueGenericSend+0xe0>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    2d02:	6c38      	ldr	r0, [r7, #64]	; 0x40
    2d04:	f000 fa56 	bl	31b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    2d08:	f7fe f990 	bl	102c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
    2d0c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
    2d0e:	4618      	mov	r0, r3
    2d10:	3748      	adds	r7, #72	; 0x48
    2d12:	46bd      	mov	sp, r7
    2d14:	bd80      	pop	{r7, pc}
    2d16:	bf00      	nop
    2d18:	e000edf0 	.word	0xe000edf0
    2d1c:	e000ed04 	.word	0xe000ed04

00002d20 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b096      	sub	sp, #88	; 0x58
    2d24:	af00      	add	r7, sp, #0
    2d26:	60f8      	str	r0, [r7, #12]
    2d28:	60b9      	str	r1, [r7, #8]
    2d2a:	607a      	str	r2, [r7, #4]
    2d2c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
    2d2e:	68fb      	ldr	r3, [r7, #12]
    2d30:	653b      	str	r3, [r7, #80]	; 0x50

    configASSERT( pxQueue );
    2d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2d34:	2b00      	cmp	r3, #0
    2d36:	d112      	bne.n	2d5e <xQueueGenericSendFromISR+0x3e>
    2d38:	4b5d      	ldr	r3, [pc, #372]	; (2eb0 <xQueueGenericSendFromISR+0x190>)
    2d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    2d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2d3e:	681b      	ldr	r3, [r3, #0]
    2d40:	f003 0301 	and.w	r3, r3, #1
    2d44:	2b00      	cmp	r3, #0
    2d46:	d00a      	beq.n	2d5e <xQueueGenericSendFromISR+0x3e>
        __asm volatile
    2d48:	f04f 0340 	mov.w	r3, #64	; 0x40
    2d4c:	f383 8811 	msr	BASEPRI, r3
    2d50:	f3bf 8f6f 	isb	sy
    2d54:	f3bf 8f4f 	dsb	sy
    2d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    2d5a:	bf00      	nop
    2d5c:	be00      	bkpt	0x0000
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2d5e:	68bb      	ldr	r3, [r7, #8]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d116      	bne.n	2d92 <xQueueGenericSendFromISR+0x72>
    2d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d012      	beq.n	2d92 <xQueueGenericSendFromISR+0x72>
    2d6c:	4b50      	ldr	r3, [pc, #320]	; (2eb0 <xQueueGenericSendFromISR+0x190>)
    2d6e:	64bb      	str	r3, [r7, #72]	; 0x48
    2d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d72:	681b      	ldr	r3, [r3, #0]
    2d74:	f003 0301 	and.w	r3, r3, #1
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d00a      	beq.n	2d92 <xQueueGenericSendFromISR+0x72>
        __asm volatile
    2d7c:	f04f 0340 	mov.w	r3, #64	; 0x40
    2d80:	f383 8811 	msr	BASEPRI, r3
    2d84:	f3bf 8f6f 	isb	sy
    2d88:	f3bf 8f4f 	dsb	sy
    2d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    2d8e:	bf00      	nop
    2d90:	be00      	bkpt	0x0000
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2d92:	683b      	ldr	r3, [r7, #0]
    2d94:	2b02      	cmp	r3, #2
    2d96:	d116      	bne.n	2dc6 <xQueueGenericSendFromISR+0xa6>
    2d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d9c:	2b01      	cmp	r3, #1
    2d9e:	d012      	beq.n	2dc6 <xQueueGenericSendFromISR+0xa6>
    2da0:	4b43      	ldr	r3, [pc, #268]	; (2eb0 <xQueueGenericSendFromISR+0x190>)
    2da2:	647b      	str	r3, [r7, #68]	; 0x44
    2da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2da6:	681b      	ldr	r3, [r3, #0]
    2da8:	f003 0301 	and.w	r3, r3, #1
    2dac:	2b00      	cmp	r3, #0
    2dae:	d00a      	beq.n	2dc6 <xQueueGenericSendFromISR+0xa6>
        __asm volatile
    2db0:	f04f 0340 	mov.w	r3, #64	; 0x40
    2db4:	f383 8811 	msr	BASEPRI, r3
    2db8:	f3bf 8f6f 	isb	sy
    2dbc:	f3bf 8f4f 	dsb	sy
    2dc0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    2dc2:	bf00      	nop
    2dc4:	be00      	bkpt	0x0000
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    2dc6:	f000 fd69 	bl	389c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
    2dca:	f3ef 8211 	mrs	r2, BASEPRI
    2dce:	f04f 0340 	mov.w	r3, #64	; 0x40
    2dd2:	f383 8811 	msr	BASEPRI, r3
    2dd6:	f3bf 8f6f 	isb	sy
    2dda:	f3bf 8f4f 	dsb	sy
    2dde:	623a      	str	r2, [r7, #32]
    2de0:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
    2de2:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2de4:	643b      	str	r3, [r7, #64]	; 0x40
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2dee:	429a      	cmp	r2, r3
    2df0:	d302      	bcc.n	2df8 <xQueueGenericSendFromISR+0xd8>
    2df2:	683b      	ldr	r3, [r7, #0]
    2df4:	2b02      	cmp	r3, #2
    2df6:	d14e      	bne.n	2e96 <xQueueGenericSendFromISR+0x176>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    2df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    2dfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    2e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2e06:	63bb      	str	r3, [r7, #56]	; 0x38
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e08:	683a      	ldr	r2, [r7, #0]
    2e0a:	68b9      	ldr	r1, [r7, #8]
    2e0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    2e0e:	f000 f941 	bl	3094 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    2e12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
    2e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2e1a:	d112      	bne.n	2e42 <xQueueGenericSendFromISR+0x122>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e20:	2b00      	cmp	r3, #0
    2e22:	d035      	beq.n	2e90 <xQueueGenericSendFromISR+0x170>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2e26:	3324      	adds	r3, #36	; 0x24
    2e28:	4618      	mov	r0, r3
    2e2a:	f7fe fc3f 	bl	16ac <xTaskRemoveFromEventList>
    2e2e:	4603      	mov	r3, r0
    2e30:	2b00      	cmp	r3, #0
    2e32:	d02d      	beq.n	2e90 <xQueueGenericSendFromISR+0x170>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	2b00      	cmp	r3, #0
    2e38:	d02a      	beq.n	2e90 <xQueueGenericSendFromISR+0x170>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    2e3a:	687b      	ldr	r3, [r7, #4]
    2e3c:	2201      	movs	r2, #1
    2e3e:	601a      	str	r2, [r3, #0]
    2e40:	e026      	b.n	2e90 <xQueueGenericSendFromISR+0x170>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    2e42:	f7fe fa09 	bl	1258 <uxTaskGetNumberOfTasks>
    2e46:	6378      	str	r0, [r7, #52]	; 0x34
    2e48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
    2e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2e4e:	429a      	cmp	r2, r3
    2e50:	d91e      	bls.n	2e90 <xQueueGenericSendFromISR+0x170>
    2e52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
    2e56:	2b7f      	cmp	r3, #127	; 0x7f
    2e58:	d112      	bne.n	2e80 <xQueueGenericSendFromISR+0x160>
    2e5a:	4b15      	ldr	r3, [pc, #84]	; (2eb0 <xQueueGenericSendFromISR+0x190>)
    2e5c:	633b      	str	r3, [r7, #48]	; 0x30
    2e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e60:	681b      	ldr	r3, [r3, #0]
    2e62:	f003 0301 	and.w	r3, r3, #1
    2e66:	2b00      	cmp	r3, #0
    2e68:	d00a      	beq.n	2e80 <xQueueGenericSendFromISR+0x160>
        __asm volatile
    2e6a:	f04f 0340 	mov.w	r3, #64	; 0x40
    2e6e:	f383 8811 	msr	BASEPRI, r3
    2e72:	f3bf 8f6f 	isb	sy
    2e76:	f3bf 8f4f 	dsb	sy
    2e7a:	61bb      	str	r3, [r7, #24]
    }
    2e7c:	bf00      	nop
    2e7e:	be00      	bkpt	0x0000
    2e80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    2e84:	3301      	adds	r3, #1
    2e86:	b2db      	uxtb	r3, r3
    2e88:	b25a      	sxtb	r2, r3
    2e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
    2e90:	2301      	movs	r3, #1
    2e92:	657b      	str	r3, [r7, #84]	; 0x54
        {
    2e94:	e001      	b.n	2e9a <xQueueGenericSendFromISR+0x17a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    2e96:	2300      	movs	r3, #0
    2e98:	657b      	str	r3, [r7, #84]	; 0x54
    2e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2e9c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
    2e9e:	697b      	ldr	r3, [r7, #20]
    2ea0:	f383 8811 	msr	BASEPRI, r3
        (
            "   msr basepri, %0 "::"r" ( ulNewMaskValue ) : "memory"
        );
    }
    2ea4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
    2ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
    2ea8:	4618      	mov	r0, r3
    2eaa:	3758      	adds	r7, #88	; 0x58
    2eac:	46bd      	mov	sp, r7
    2eae:	bd80      	pop	{r7, pc}
    2eb0:	e000edf0 	.word	0xe000edf0

00002eb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
    2eb4:	b580      	push	{r7, lr}
    2eb6:	b090      	sub	sp, #64	; 0x40
    2eb8:	af00      	add	r7, sp, #0
    2eba:	60f8      	str	r0, [r7, #12]
    2ebc:	60b9      	str	r1, [r7, #8]
    2ebe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
    2ec0:	2300      	movs	r3, #0
    2ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
    2ec4:	68fb      	ldr	r3, [r7, #12]
    2ec6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
    2ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d112      	bne.n	2ef4 <xQueueReceive+0x40>
    2ece:	4b6f      	ldr	r3, [pc, #444]	; (308c <xQueueReceive+0x1d8>)
    2ed0:	637b      	str	r3, [r7, #52]	; 0x34
    2ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ed4:	681b      	ldr	r3, [r3, #0]
    2ed6:	f003 0301 	and.w	r3, r3, #1
    2eda:	2b00      	cmp	r3, #0
    2edc:	d00a      	beq.n	2ef4 <xQueueReceive+0x40>
        __asm volatile
    2ede:	f04f 0340 	mov.w	r3, #64	; 0x40
    2ee2:	f383 8811 	msr	BASEPRI, r3
    2ee6:	f3bf 8f6f 	isb	sy
    2eea:	f3bf 8f4f 	dsb	sy
    2eee:	627b      	str	r3, [r7, #36]	; 0x24
    }
    2ef0:	bf00      	nop
    2ef2:	be00      	bkpt	0x0000

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2ef4:	68bb      	ldr	r3, [r7, #8]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d116      	bne.n	2f28 <xQueueReceive+0x74>
    2efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2efe:	2b00      	cmp	r3, #0
    2f00:	d012      	beq.n	2f28 <xQueueReceive+0x74>
    2f02:	4b62      	ldr	r3, [pc, #392]	; (308c <xQueueReceive+0x1d8>)
    2f04:	633b      	str	r3, [r7, #48]	; 0x30
    2f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	f003 0301 	and.w	r3, r3, #1
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d00a      	beq.n	2f28 <xQueueReceive+0x74>
        __asm volatile
    2f12:	f04f 0340 	mov.w	r3, #64	; 0x40
    2f16:	f383 8811 	msr	BASEPRI, r3
    2f1a:	f3bf 8f6f 	isb	sy
    2f1e:	f3bf 8f4f 	dsb	sy
    2f22:	623b      	str	r3, [r7, #32]
    }
    2f24:	bf00      	nop
    2f26:	be00      	bkpt	0x0000

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2f28:	f7fe fdb2 	bl	1a90 <xTaskGetSchedulerState>
    2f2c:	4603      	mov	r3, r0
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d115      	bne.n	2f5e <xQueueReceive+0xaa>
    2f32:	687b      	ldr	r3, [r7, #4]
    2f34:	2b00      	cmp	r3, #0
    2f36:	d012      	beq.n	2f5e <xQueueReceive+0xaa>
    2f38:	4b54      	ldr	r3, [pc, #336]	; (308c <xQueueReceive+0x1d8>)
    2f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2f3e:	681b      	ldr	r3, [r3, #0]
    2f40:	f003 0301 	and.w	r3, r3, #1
    2f44:	2b00      	cmp	r3, #0
    2f46:	d00a      	beq.n	2f5e <xQueueReceive+0xaa>
        __asm volatile
    2f48:	f04f 0340 	mov.w	r3, #64	; 0x40
    2f4c:	f383 8811 	msr	BASEPRI, r3
    2f50:	f3bf 8f6f 	isb	sy
    2f54:	f3bf 8f4f 	dsb	sy
    2f58:	61fb      	str	r3, [r7, #28]
    }
    2f5a:	bf00      	nop
    2f5c:	be00      	bkpt	0x0000
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    2f5e:	f000 fba5 	bl	36ac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2f66:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d01f      	beq.n	2fae <xQueueReceive+0xfa>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
    2f6e:	68b9      	ldr	r1, [r7, #8]
    2f70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    2f72:	f000 f8f9 	bl	3168 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    2f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f78:	1e5a      	subs	r2, r3, #1
    2f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f7c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f80:	691b      	ldr	r3, [r3, #16]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d00f      	beq.n	2fa6 <xQueueReceive+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f88:	3310      	adds	r3, #16
    2f8a:	4618      	mov	r0, r3
    2f8c:	f7fe fb8e 	bl	16ac <xTaskRemoveFromEventList>
    2f90:	4603      	mov	r3, r0
    2f92:	2b00      	cmp	r3, #0
    2f94:	d007      	beq.n	2fa6 <xQueueReceive+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    2f96:	4b3e      	ldr	r3, [pc, #248]	; (3090 <xQueueReceive+0x1dc>)
    2f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2f9c:	601a      	str	r2, [r3, #0]
    2f9e:	f3bf 8f4f 	dsb	sy
    2fa2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    2fa6:	f000 fbbb 	bl	3720 <vPortExitCritical>
                return pdPASS;
    2faa:	2301      	movs	r3, #1
    2fac:	e069      	b.n	3082 <xQueueReceive+0x1ce>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d103      	bne.n	2fbc <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    2fb4:	f000 fbb4 	bl	3720 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    2fb8:	2300      	movs	r3, #0
    2fba:	e062      	b.n	3082 <xQueueReceive+0x1ce>
                }
                else if( xEntryTimeSet == pdFALSE )
    2fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d106      	bne.n	2fd0 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    2fc2:	f107 0314 	add.w	r3, r7, #20
    2fc6:	4618      	mov	r0, r3
    2fc8:	f7fe fc52 	bl	1870 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    2fcc:	2301      	movs	r3, #1
    2fce:	63fb      	str	r3, [r7, #60]	; 0x3c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    2fd0:	f000 fba6 	bl	3720 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    2fd4:	f7fe f81c 	bl	1010 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2fd8:	f000 fb68 	bl	36ac <vPortEnterCritical>
    2fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    2fe2:	b25b      	sxtb	r3, r3
    2fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2fe8:	d103      	bne.n	2ff2 <xQueueReceive+0x13e>
    2fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2fec:	2200      	movs	r2, #0
    2fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    2ff8:	b25b      	sxtb	r3, r3
    2ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2ffe:	d103      	bne.n	3008 <xQueueReceive+0x154>
    3000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3002:	2200      	movs	r2, #0
    3004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    3008:	f000 fb8a 	bl	3720 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    300c:	1d3a      	adds	r2, r7, #4
    300e:	f107 0314 	add.w	r3, r7, #20
    3012:	4611      	mov	r1, r2
    3014:	4618      	mov	r0, r3
    3016:	f7fe fc41 	bl	189c <xTaskCheckForTimeOut>
    301a:	4603      	mov	r3, r0
    301c:	2b00      	cmp	r3, #0
    301e:	d123      	bne.n	3068 <xQueueReceive+0x1b4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3022:	f000 f919 	bl	3258 <prvIsQueueEmpty>
    3026:	4603      	mov	r3, r0
    3028:	2b00      	cmp	r3, #0
    302a:	d017      	beq.n	305c <xQueueReceive+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    302e:	3324      	adds	r3, #36	; 0x24
    3030:	687a      	ldr	r2, [r7, #4]
    3032:	4611      	mov	r1, r2
    3034:	4618      	mov	r0, r3
    3036:	f7fe fabb 	bl	15b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    303a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    303c:	f000 f8ba 	bl	31b4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    3040:	f7fd fff4 	bl	102c <xTaskResumeAll>
    3044:	4603      	mov	r3, r0
    3046:	2b00      	cmp	r3, #0
    3048:	d189      	bne.n	2f5e <xQueueReceive+0xaa>
                {
                    portYIELD_WITHIN_API();
    304a:	4b11      	ldr	r3, [pc, #68]	; (3090 <xQueueReceive+0x1dc>)
    304c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3050:	601a      	str	r2, [r3, #0]
    3052:	f3bf 8f4f 	dsb	sy
    3056:	f3bf 8f6f 	isb	sy
    305a:	e780      	b.n	2f5e <xQueueReceive+0xaa>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
    305c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    305e:	f000 f8a9 	bl	31b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    3062:	f7fd ffe3 	bl	102c <xTaskResumeAll>
    3066:	e77a      	b.n	2f5e <xQueueReceive+0xaa>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
    3068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    306a:	f000 f8a3 	bl	31b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    306e:	f7fd ffdd 	bl	102c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3072:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3074:	f000 f8f0 	bl	3258 <prvIsQueueEmpty>
    3078:	4603      	mov	r3, r0
    307a:	2b00      	cmp	r3, #0
    307c:	f43f af6f 	beq.w	2f5e <xQueueReceive+0xaa>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    3080:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    3082:	4618      	mov	r0, r3
    3084:	3740      	adds	r7, #64	; 0x40
    3086:	46bd      	mov	sp, r7
    3088:	bd80      	pop	{r7, pc}
    308a:	bf00      	nop
    308c:	e000edf0 	.word	0xe000edf0
    3090:	e000ed04 	.word	0xe000ed04

00003094 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    3094:	b580      	push	{r7, lr}
    3096:	b086      	sub	sp, #24
    3098:	af00      	add	r7, sp, #0
    309a:	60f8      	str	r0, [r7, #12]
    309c:	60b9      	str	r1, [r7, #8]
    309e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
    30a0:	2300      	movs	r3, #0
    30a2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    30a4:	68fb      	ldr	r3, [r7, #12]
    30a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30a8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    30aa:	68fb      	ldr	r3, [r7, #12]
    30ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30ae:	2b00      	cmp	r3, #0
    30b0:	d10d      	bne.n	30ce <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    30b2:	68fb      	ldr	r3, [r7, #12]
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d14d      	bne.n	3156 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    30ba:	68fb      	ldr	r3, [r7, #12]
    30bc:	689b      	ldr	r3, [r3, #8]
    30be:	4618      	mov	r0, r3
    30c0:	f7fe fd04 	bl	1acc <xTaskPriorityDisinherit>
    30c4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
    30c6:	68fb      	ldr	r3, [r7, #12]
    30c8:	2200      	movs	r2, #0
    30ca:	609a      	str	r2, [r3, #8]
    30cc:	e043      	b.n	3156 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	2b00      	cmp	r3, #0
    30d2:	d119      	bne.n	3108 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    30d4:	68fb      	ldr	r3, [r7, #12]
    30d6:	6858      	ldr	r0, [r3, #4]
    30d8:	68fb      	ldr	r3, [r7, #12]
    30da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30dc:	461a      	mov	r2, r3
    30de:	68b9      	ldr	r1, [r7, #8]
    30e0:	f000 fc2e 	bl	3940 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    30e4:	68fb      	ldr	r3, [r7, #12]
    30e6:	685a      	ldr	r2, [r3, #4]
    30e8:	68fb      	ldr	r3, [r7, #12]
    30ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30ec:	441a      	add	r2, r3
    30ee:	68fb      	ldr	r3, [r7, #12]
    30f0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    30f2:	68fb      	ldr	r3, [r7, #12]
    30f4:	685a      	ldr	r2, [r3, #4]
    30f6:	68fb      	ldr	r3, [r7, #12]
    30f8:	689b      	ldr	r3, [r3, #8]
    30fa:	429a      	cmp	r2, r3
    30fc:	d32b      	bcc.n	3156 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
    30fe:	68fb      	ldr	r3, [r7, #12]
    3100:	681a      	ldr	r2, [r3, #0]
    3102:	68fb      	ldr	r3, [r7, #12]
    3104:	605a      	str	r2, [r3, #4]
    3106:	e026      	b.n	3156 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    3108:	68fb      	ldr	r3, [r7, #12]
    310a:	68d8      	ldr	r0, [r3, #12]
    310c:	68fb      	ldr	r3, [r7, #12]
    310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3110:	461a      	mov	r2, r3
    3112:	68b9      	ldr	r1, [r7, #8]
    3114:	f000 fc14 	bl	3940 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	68da      	ldr	r2, [r3, #12]
    311c:	68fb      	ldr	r3, [r7, #12]
    311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3120:	425b      	negs	r3, r3
    3122:	441a      	add	r2, r3
    3124:	68fb      	ldr	r3, [r7, #12]
    3126:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3128:	68fb      	ldr	r3, [r7, #12]
    312a:	68da      	ldr	r2, [r3, #12]
    312c:	68fb      	ldr	r3, [r7, #12]
    312e:	681b      	ldr	r3, [r3, #0]
    3130:	429a      	cmp	r2, r3
    3132:	d207      	bcs.n	3144 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    3134:	68fb      	ldr	r3, [r7, #12]
    3136:	689a      	ldr	r2, [r3, #8]
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    313c:	425b      	negs	r3, r3
    313e:	441a      	add	r2, r3
    3140:	68fb      	ldr	r3, [r7, #12]
    3142:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
    3144:	687b      	ldr	r3, [r7, #4]
    3146:	2b02      	cmp	r3, #2
    3148:	d105      	bne.n	3156 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    314a:	693b      	ldr	r3, [r7, #16]
    314c:	2b00      	cmp	r3, #0
    314e:	d002      	beq.n	3156 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
    3150:	693b      	ldr	r3, [r7, #16]
    3152:	3b01      	subs	r3, #1
    3154:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    3156:	693b      	ldr	r3, [r7, #16]
    3158:	1c5a      	adds	r2, r3, #1
    315a:	68fb      	ldr	r3, [r7, #12]
    315c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
    315e:	697b      	ldr	r3, [r7, #20]
}
    3160:	4618      	mov	r0, r3
    3162:	3718      	adds	r7, #24
    3164:	46bd      	mov	sp, r7
    3166:	bd80      	pop	{r7, pc}

00003168 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    3168:	b580      	push	{r7, lr}
    316a:	b082      	sub	sp, #8
    316c:	af00      	add	r7, sp, #0
    316e:	6078      	str	r0, [r7, #4]
    3170:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3172:	687b      	ldr	r3, [r7, #4]
    3174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3176:	2b00      	cmp	r3, #0
    3178:	d018      	beq.n	31ac <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    317a:	687b      	ldr	r3, [r7, #4]
    317c:	68da      	ldr	r2, [r3, #12]
    317e:	687b      	ldr	r3, [r7, #4]
    3180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3182:	441a      	add	r2, r3
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3188:	687b      	ldr	r3, [r7, #4]
    318a:	68da      	ldr	r2, [r3, #12]
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	689b      	ldr	r3, [r3, #8]
    3190:	429a      	cmp	r2, r3
    3192:	d303      	bcc.n	319c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    3194:	687b      	ldr	r3, [r7, #4]
    3196:	681a      	ldr	r2, [r3, #0]
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	68d9      	ldr	r1, [r3, #12]
    31a0:	687b      	ldr	r3, [r7, #4]
    31a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31a4:	461a      	mov	r2, r3
    31a6:	6838      	ldr	r0, [r7, #0]
    31a8:	f000 fbca 	bl	3940 <memcpy>
    }
}
    31ac:	bf00      	nop
    31ae:	3708      	adds	r7, #8
    31b0:	46bd      	mov	sp, r7
    31b2:	bd80      	pop	{r7, pc}

000031b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b084      	sub	sp, #16
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
    31bc:	f000 fa76 	bl	36ac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    31c6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
    31c8:	e011      	b.n	31ee <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31ca:	687b      	ldr	r3, [r7, #4]
    31cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31ce:	2b00      	cmp	r3, #0
    31d0:	d012      	beq.n	31f8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	3324      	adds	r3, #36	; 0x24
    31d6:	4618      	mov	r0, r3
    31d8:	f7fe fa68 	bl	16ac <xTaskRemoveFromEventList>
    31dc:	4603      	mov	r3, r0
    31de:	2b00      	cmp	r3, #0
    31e0:	d001      	beq.n	31e6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
    31e2:	f7fe fbd3 	bl	198c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
    31e6:	7bfb      	ldrb	r3, [r7, #15]
    31e8:	3b01      	subs	r3, #1
    31ea:	b2db      	uxtb	r3, r3
    31ec:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
    31ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31f2:	2b00      	cmp	r3, #0
    31f4:	dce9      	bgt.n	31ca <prvUnlockQueue+0x16>
    31f6:	e000      	b.n	31fa <prvUnlockQueue+0x46>
                    break;
    31f8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	22ff      	movs	r2, #255	; 0xff
    31fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
    3202:	f000 fa8d 	bl	3720 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    3206:	f000 fa51 	bl	36ac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    3210:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
    3212:	e011      	b.n	3238 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	691b      	ldr	r3, [r3, #16]
    3218:	2b00      	cmp	r3, #0
    321a:	d012      	beq.n	3242 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	3310      	adds	r3, #16
    3220:	4618      	mov	r0, r3
    3222:	f7fe fa43 	bl	16ac <xTaskRemoveFromEventList>
    3226:	4603      	mov	r3, r0
    3228:	2b00      	cmp	r3, #0
    322a:	d001      	beq.n	3230 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
    322c:	f7fe fbae 	bl	198c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
    3230:	7bbb      	ldrb	r3, [r7, #14]
    3232:	3b01      	subs	r3, #1
    3234:	b2db      	uxtb	r3, r3
    3236:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
    3238:	f997 300e 	ldrsb.w	r3, [r7, #14]
    323c:	2b00      	cmp	r3, #0
    323e:	dce9      	bgt.n	3214 <prvUnlockQueue+0x60>
    3240:	e000      	b.n	3244 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
    3242:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	22ff      	movs	r2, #255	; 0xff
    3248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
    324c:	f000 fa68 	bl	3720 <vPortExitCritical>
}
    3250:	bf00      	nop
    3252:	3710      	adds	r7, #16
    3254:	46bd      	mov	sp, r7
    3256:	bd80      	pop	{r7, pc}

00003258 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
    3258:	b580      	push	{r7, lr}
    325a:	b084      	sub	sp, #16
    325c:	af00      	add	r7, sp, #0
    325e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    3260:	f000 fa24 	bl	36ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3268:	2b00      	cmp	r3, #0
    326a:	d102      	bne.n	3272 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
    326c:	2301      	movs	r3, #1
    326e:	60fb      	str	r3, [r7, #12]
    3270:	e001      	b.n	3276 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
    3272:	2300      	movs	r3, #0
    3274:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
    3276:	f000 fa53 	bl	3720 <vPortExitCritical>

    return xReturn;
    327a:	68fb      	ldr	r3, [r7, #12]
}
    327c:	4618      	mov	r0, r3
    327e:	3710      	adds	r7, #16
    3280:	46bd      	mov	sp, r7
    3282:	bd80      	pop	{r7, pc}

00003284 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    3284:	b580      	push	{r7, lr}
    3286:	b084      	sub	sp, #16
    3288:	af00      	add	r7, sp, #0
    328a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    328c:	f000 fa0e 	bl	36ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3298:	429a      	cmp	r2, r3
    329a:	d102      	bne.n	32a2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
    329c:	2301      	movs	r3, #1
    329e:	60fb      	str	r3, [r7, #12]
    32a0:	e001      	b.n	32a6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
    32a2:	2300      	movs	r3, #0
    32a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
    32a6:	f000 fa3b 	bl	3720 <vPortExitCritical>

    return xReturn;
    32aa:	68fb      	ldr	r3, [r7, #12]
}
    32ac:	4618      	mov	r0, r3
    32ae:	3710      	adds	r7, #16
    32b0:	46bd      	mov	sp, r7
    32b2:	bd80      	pop	{r7, pc}

000032b4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
    32b4:	b480      	push	{r7}
    32b6:	b087      	sub	sp, #28
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
    32bc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
    32be:	2300      	movs	r3, #0
    32c0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	2b00      	cmp	r3, #0
    32c6:	d112      	bne.n	32ee <vQueueAddToRegistry+0x3a>
    32c8:	4b24      	ldr	r3, [pc, #144]	; (335c <vQueueAddToRegistry+0xa8>)
    32ca:	60fb      	str	r3, [r7, #12]
    32cc:	68fb      	ldr	r3, [r7, #12]
    32ce:	681b      	ldr	r3, [r3, #0]
    32d0:	f003 0301 	and.w	r3, r3, #1
    32d4:	2b00      	cmp	r3, #0
    32d6:	d00a      	beq.n	32ee <vQueueAddToRegistry+0x3a>
        __asm volatile
    32d8:	f04f 0340 	mov.w	r3, #64	; 0x40
    32dc:	f383 8811 	msr	BASEPRI, r3
    32e0:	f3bf 8f6f 	isb	sy
    32e4:	f3bf 8f4f 	dsb	sy
    32e8:	60bb      	str	r3, [r7, #8]
    }
    32ea:	bf00      	nop
    32ec:	be00      	bkpt	0x0000

        if( pcQueueName != NULL )
    32ee:	683b      	ldr	r3, [r7, #0]
    32f0:	2b00      	cmp	r3, #0
    32f2:	d024      	beq.n	333e <vQueueAddToRegistry+0x8a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    32f4:	2300      	movs	r3, #0
    32f6:	617b      	str	r3, [r7, #20]
    32f8:	e01e      	b.n	3338 <vQueueAddToRegistry+0x84>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
    32fa:	4a19      	ldr	r2, [pc, #100]	; (3360 <vQueueAddToRegistry+0xac>)
    32fc:	697b      	ldr	r3, [r7, #20]
    32fe:	00db      	lsls	r3, r3, #3
    3300:	4413      	add	r3, r2
    3302:	685b      	ldr	r3, [r3, #4]
    3304:	687a      	ldr	r2, [r7, #4]
    3306:	429a      	cmp	r2, r3
    3308:	d105      	bne.n	3316 <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
    330a:	697b      	ldr	r3, [r7, #20]
    330c:	00db      	lsls	r3, r3, #3
    330e:	4a14      	ldr	r2, [pc, #80]	; (3360 <vQueueAddToRegistry+0xac>)
    3310:	4413      	add	r3, r2
    3312:	613b      	str	r3, [r7, #16]
                    break;
    3314:	e013      	b.n	333e <vQueueAddToRegistry+0x8a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
    3316:	693b      	ldr	r3, [r7, #16]
    3318:	2b00      	cmp	r3, #0
    331a:	d10a      	bne.n	3332 <vQueueAddToRegistry+0x7e>
    331c:	4a10      	ldr	r2, [pc, #64]	; (3360 <vQueueAddToRegistry+0xac>)
    331e:	697b      	ldr	r3, [r7, #20]
    3320:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3324:	2b00      	cmp	r3, #0
    3326:	d104      	bne.n	3332 <vQueueAddToRegistry+0x7e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
    3328:	697b      	ldr	r3, [r7, #20]
    332a:	00db      	lsls	r3, r3, #3
    332c:	4a0c      	ldr	r2, [pc, #48]	; (3360 <vQueueAddToRegistry+0xac>)
    332e:	4413      	add	r3, r2
    3330:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3332:	697b      	ldr	r3, [r7, #20]
    3334:	3301      	adds	r3, #1
    3336:	617b      	str	r3, [r7, #20]
    3338:	697b      	ldr	r3, [r7, #20]
    333a:	2b01      	cmp	r3, #1
    333c:	d9dd      	bls.n	32fa <vQueueAddToRegistry+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
    333e:	693b      	ldr	r3, [r7, #16]
    3340:	2b00      	cmp	r3, #0
    3342:	d005      	beq.n	3350 <vQueueAddToRegistry+0x9c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
    3344:	693b      	ldr	r3, [r7, #16]
    3346:	683a      	ldr	r2, [r7, #0]
    3348:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
    334a:	693b      	ldr	r3, [r7, #16]
    334c:	687a      	ldr	r2, [r7, #4]
    334e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
    3350:	bf00      	nop
    3352:	371c      	adds	r7, #28
    3354:	46bd      	mov	sp, r7
    3356:	f85d 7b04 	ldr.w	r7, [sp], #4
    335a:	4770      	bx	lr
    335c:	e000edf0 	.word	0xe000edf0
    3360:	20001158 	.word	0x20001158

00003364 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    3364:	b580      	push	{r7, lr}
    3366:	b086      	sub	sp, #24
    3368:	af00      	add	r7, sp, #0
    336a:	60f8      	str	r0, [r7, #12]
    336c:	60b9      	str	r1, [r7, #8]
    336e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
    3370:	68fb      	ldr	r3, [r7, #12]
    3372:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    3374:	f000 f99a 	bl	36ac <vPortEnterCritical>
    3378:	697b      	ldr	r3, [r7, #20]
    337a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    337e:	b25b      	sxtb	r3, r3
    3380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3384:	d103      	bne.n	338e <vQueueWaitForMessageRestricted+0x2a>
    3386:	697b      	ldr	r3, [r7, #20]
    3388:	2200      	movs	r2, #0
    338a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    338e:	697b      	ldr	r3, [r7, #20]
    3390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    3394:	b25b      	sxtb	r3, r3
    3396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    339a:	d103      	bne.n	33a4 <vQueueWaitForMessageRestricted+0x40>
    339c:	697b      	ldr	r3, [r7, #20]
    339e:	2200      	movs	r2, #0
    33a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    33a4:	f000 f9bc 	bl	3720 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    33a8:	697b      	ldr	r3, [r7, #20]
    33aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    33ac:	2b00      	cmp	r3, #0
    33ae:	d106      	bne.n	33be <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    33b0:	697b      	ldr	r3, [r7, #20]
    33b2:	3324      	adds	r3, #36	; 0x24
    33b4:	687a      	ldr	r2, [r7, #4]
    33b6:	68b9      	ldr	r1, [r7, #8]
    33b8:	4618      	mov	r0, r3
    33ba:	f7fe f927 	bl	160c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    33be:	6978      	ldr	r0, [r7, #20]
    33c0:	f7ff fef8 	bl	31b4 <prvUnlockQueue>
    }
    33c4:	bf00      	nop
    33c6:	3718      	adds	r7, #24
    33c8:	46bd      	mov	sp, r7
    33ca:	bd80      	pop	{r7, pc}

000033cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
    33cc:	b480      	push	{r7}
    33ce:	b085      	sub	sp, #20
    33d0:	af00      	add	r7, sp, #0
    33d2:	60f8      	str	r0, [r7, #12]
    33d4:	60b9      	str	r1, [r7, #8]
    33d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
    33d8:	68fb      	ldr	r3, [r7, #12]
    33da:	3b04      	subs	r3, #4
    33dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
    33de:	68fb      	ldr	r3, [r7, #12]
    33e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    33e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
    33e6:	68fb      	ldr	r3, [r7, #12]
    33e8:	3b04      	subs	r3, #4
    33ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
    33ec:	68bb      	ldr	r3, [r7, #8]
    33ee:	f023 0201 	bic.w	r2, r3, #1
    33f2:	68fb      	ldr	r3, [r7, #12]
    33f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
    33f6:	68fb      	ldr	r3, [r7, #12]
    33f8:	3b04      	subs	r3, #4
    33fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
    33fc:	4a0c      	ldr	r2, [pc, #48]	; (3430 <pxPortInitialiseStack+0x64>)
    33fe:	68fb      	ldr	r3, [r7, #12]
    3400:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
    3402:	68fb      	ldr	r3, [r7, #12]
    3404:	3b14      	subs	r3, #20
    3406:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
    3408:	687a      	ldr	r2, [r7, #4]
    340a:	68fb      	ldr	r3, [r7, #12]
    340c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
    340e:	68fb      	ldr	r3, [r7, #12]
    3410:	3b04      	subs	r3, #4
    3412:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
    3414:	68fb      	ldr	r3, [r7, #12]
    3416:	f06f 0202 	mvn.w	r2, #2
    341a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
    341c:	68fb      	ldr	r3, [r7, #12]
    341e:	3b20      	subs	r3, #32
    3420:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
    3422:	68fb      	ldr	r3, [r7, #12]
}
    3424:	4618      	mov	r0, r3
    3426:	3714      	adds	r7, #20
    3428:	46bd      	mov	sp, r7
    342a:	f85d 7b04 	ldr.w	r7, [sp], #4
    342e:	4770      	bx	lr
    3430:	00003435 	.word	0x00003435

00003434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    3434:	b480      	push	{r7}
    3436:	b085      	sub	sp, #20
    3438:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
    343a:	2300      	movs	r3, #0
    343c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    343e:	4b16      	ldr	r3, [pc, #88]	; (3498 <prvTaskExitError+0x64>)
    3440:	681b      	ldr	r3, [r3, #0]
    3442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3446:	d012      	beq.n	346e <prvTaskExitError+0x3a>
    3448:	4b14      	ldr	r3, [pc, #80]	; (349c <prvTaskExitError+0x68>)
    344a:	60fb      	str	r3, [r7, #12]
    344c:	68fb      	ldr	r3, [r7, #12]
    344e:	681b      	ldr	r3, [r3, #0]
    3450:	f003 0301 	and.w	r3, r3, #1
    3454:	2b00      	cmp	r3, #0
    3456:	d00a      	beq.n	346e <prvTaskExitError+0x3a>
        __asm volatile
    3458:	f04f 0340 	mov.w	r3, #64	; 0x40
    345c:	f383 8811 	msr	BASEPRI, r3
    3460:	f3bf 8f6f 	isb	sy
    3464:	f3bf 8f4f 	dsb	sy
    3468:	60bb      	str	r3, [r7, #8]
    }
    346a:	bf00      	nop
    346c:	be00      	bkpt	0x0000
        __asm volatile
    346e:	f04f 0340 	mov.w	r3, #64	; 0x40
    3472:	f383 8811 	msr	BASEPRI, r3
    3476:	f3bf 8f6f 	isb	sy
    347a:	f3bf 8f4f 	dsb	sy
    347e:	607b      	str	r3, [r7, #4]
    }
    3480:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
    3482:	bf00      	nop
    3484:	683b      	ldr	r3, [r7, #0]
    3486:	2b00      	cmp	r3, #0
    3488:	d0fc      	beq.n	3484 <prvTaskExitError+0x50>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
    348a:	bf00      	nop
    348c:	bf00      	nop
    348e:	3714      	adds	r7, #20
    3490:	46bd      	mov	sp, r7
    3492:	f85d 7b04 	ldr.w	r7, [sp], #4
    3496:	4770      	bx	lr
    3498:	20000004 	.word	0x20000004
    349c:	e000edf0 	.word	0xe000edf0

000034a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
    34a0:	4b07      	ldr	r3, [pc, #28]	; (34c0 <pxCurrentTCBConst2>)
    34a2:	6819      	ldr	r1, [r3, #0]
    34a4:	6808      	ldr	r0, [r1, #0]
    34a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34aa:	f380 8809 	msr	PSP, r0
    34ae:	f3bf 8f6f 	isb	sy
    34b2:	f04f 0000 	mov.w	r0, #0
    34b6:	f380 8811 	msr	BASEPRI, r0
    34ba:	4770      	bx	lr
    34bc:	f3af 8000 	nop.w

000034c0 <pxCurrentTCBConst2>:
    34c0:	20000014 	.word	0x20000014
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
    34c4:	bf00      	nop
    34c6:	bf00      	nop

000034c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
    34c8:	4808      	ldr	r0, [pc, #32]	; (34ec <prvPortStartFirstTask+0x24>)
    34ca:	6800      	ldr	r0, [r0, #0]
    34cc:	6800      	ldr	r0, [r0, #0]
    34ce:	f380 8808 	msr	MSP, r0
    34d2:	f04f 0000 	mov.w	r0, #0
    34d6:	f380 8814 	msr	CONTROL, r0
    34da:	b662      	cpsie	i
    34dc:	b661      	cpsie	f
    34de:	f3bf 8f4f 	dsb	sy
    34e2:	f3bf 8f6f 	isb	sy
    34e6:	df00      	svc	0
    34e8:	bf00      	nop
    34ea:	0000      	.short	0x0000
    34ec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
    34f0:	bf00      	nop
    34f2:	bf00      	nop

000034f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    34f4:	b580      	push	{r7, lr}
    34f6:	b08c      	sub	sp, #48	; 0x30
    34f8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
    34fa:	4b62      	ldr	r3, [pc, #392]	; (3684 <xPortStartScheduler+0x190>)
    34fc:	681b      	ldr	r3, [r3, #0]
    34fe:	4a62      	ldr	r2, [pc, #392]	; (3688 <xPortStartScheduler+0x194>)
    3500:	4293      	cmp	r3, r2
    3502:	d112      	bne.n	352a <xPortStartScheduler+0x36>
    3504:	4b61      	ldr	r3, [pc, #388]	; (368c <xPortStartScheduler+0x198>)
    3506:	62fb      	str	r3, [r7, #44]	; 0x2c
    3508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    350a:	681b      	ldr	r3, [r3, #0]
    350c:	f003 0301 	and.w	r3, r3, #1
    3510:	2b00      	cmp	r3, #0
    3512:	d00a      	beq.n	352a <xPortStartScheduler+0x36>
        __asm volatile
    3514:	f04f 0340 	mov.w	r3, #64	; 0x40
    3518:	f383 8811 	msr	BASEPRI, r3
    351c:	f3bf 8f6f 	isb	sy
    3520:	f3bf 8f4f 	dsb	sy
    3524:	61bb      	str	r3, [r7, #24]
    }
    3526:	bf00      	nop
    3528:	be00      	bkpt	0x0000
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
    352a:	4b56      	ldr	r3, [pc, #344]	; (3684 <xPortStartScheduler+0x190>)
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	4a58      	ldr	r2, [pc, #352]	; (3690 <xPortStartScheduler+0x19c>)
    3530:	4293      	cmp	r3, r2
    3532:	d112      	bne.n	355a <xPortStartScheduler+0x66>
    3534:	4b55      	ldr	r3, [pc, #340]	; (368c <xPortStartScheduler+0x198>)
    3536:	62bb      	str	r3, [r7, #40]	; 0x28
    3538:	6abb      	ldr	r3, [r7, #40]	; 0x28
    353a:	681b      	ldr	r3, [r3, #0]
    353c:	f003 0301 	and.w	r3, r3, #1
    3540:	2b00      	cmp	r3, #0
    3542:	d00a      	beq.n	355a <xPortStartScheduler+0x66>
        __asm volatile
    3544:	f04f 0340 	mov.w	r3, #64	; 0x40
    3548:	f383 8811 	msr	BASEPRI, r3
    354c:	f3bf 8f6f 	isb	sy
    3550:	f3bf 8f4f 	dsb	sy
    3554:	617b      	str	r3, [r7, #20]
    }
    3556:	bf00      	nop
    3558:	be00      	bkpt	0x0000

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
    355a:	2300      	movs	r3, #0
    355c:	607b      	str	r3, [r7, #4]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
    355e:	4b4d      	ldr	r3, [pc, #308]	; (3694 <xPortStartScheduler+0x1a0>)
    3560:	627b      	str	r3, [r7, #36]	; 0x24
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
    3562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3564:	781b      	ldrb	r3, [r3, #0]
    3566:	b2db      	uxtb	r3, r3
    3568:	72fb      	strb	r3, [r7, #11]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    356c:	22ff      	movs	r2, #255	; 0xff
    356e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    3570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3572:	781b      	ldrb	r3, [r3, #0]
    3574:	b2db      	uxtb	r3, r3
    3576:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    3578:	78fb      	ldrb	r3, [r7, #3]
    357a:	b2db      	uxtb	r3, r3
    357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3580:	b2da      	uxtb	r2, r3
    3582:	4b45      	ldr	r3, [pc, #276]	; (3698 <xPortStartScheduler+0x1a4>)
    3584:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
    3586:	4b44      	ldr	r3, [pc, #272]	; (3698 <xPortStartScheduler+0x1a4>)
    3588:	781b      	ldrb	r3, [r3, #0]
    358a:	2b00      	cmp	r3, #0
    358c:	d112      	bne.n	35b4 <xPortStartScheduler+0xc0>
    358e:	4b3f      	ldr	r3, [pc, #252]	; (368c <xPortStartScheduler+0x198>)
    3590:	623b      	str	r3, [r7, #32]
    3592:	6a3b      	ldr	r3, [r7, #32]
    3594:	681b      	ldr	r3, [r3, #0]
    3596:	f003 0301 	and.w	r3, r3, #1
    359a:	2b00      	cmp	r3, #0
    359c:	d00a      	beq.n	35b4 <xPortStartScheduler+0xc0>
        __asm volatile
    359e:	f04f 0340 	mov.w	r3, #64	; 0x40
    35a2:	f383 8811 	msr	BASEPRI, r3
    35a6:	f3bf 8f6f 	isb	sy
    35aa:	f3bf 8f4f 	dsb	sy
    35ae:	613b      	str	r3, [r7, #16]
    }
    35b0:	bf00      	nop
    35b2:	be00      	bkpt	0x0000

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
    35b4:	78fb      	ldrb	r3, [r7, #3]
    35b6:	b2db      	uxtb	r3, r3
    35b8:	43db      	mvns	r3, r3
    35ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    35be:	2b00      	cmp	r3, #0
    35c0:	d01b      	beq.n	35fa <xPortStartScheduler+0x106>
    35c2:	4b32      	ldr	r3, [pc, #200]	; (368c <xPortStartScheduler+0x198>)
    35c4:	61fb      	str	r3, [r7, #28]
    35c6:	69fb      	ldr	r3, [r7, #28]
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	f003 0301 	and.w	r3, r3, #1
    35ce:	2b00      	cmp	r3, #0
    35d0:	d013      	beq.n	35fa <xPortStartScheduler+0x106>
        __asm volatile
    35d2:	f04f 0340 	mov.w	r3, #64	; 0x40
    35d6:	f383 8811 	msr	BASEPRI, r3
    35da:	f3bf 8f6f 	isb	sy
    35de:	f3bf 8f4f 	dsb	sy
    35e2:	60fb      	str	r3, [r7, #12]
    }
    35e4:	bf00      	nop
    35e6:	be00      	bkpt	0x0000

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    35e8:	e007      	b.n	35fa <xPortStartScheduler+0x106>
        {
            ulImplementedPrioBits++;
    35ea:	687b      	ldr	r3, [r7, #4]
    35ec:	3301      	adds	r3, #1
    35ee:	607b      	str	r3, [r7, #4]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
    35f0:	78fb      	ldrb	r3, [r7, #3]
    35f2:	b2db      	uxtb	r3, r3
    35f4:	005b      	lsls	r3, r3, #1
    35f6:	b2db      	uxtb	r3, r3
    35f8:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    35fa:	78fb      	ldrb	r3, [r7, #3]
    35fc:	b2db      	uxtb	r3, r3
    35fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3602:	2b80      	cmp	r3, #128	; 0x80
    3604:	d0f1      	beq.n	35ea <xPortStartScheduler+0xf6>
        }

        if( ulImplementedPrioBits == 8 )
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	2b08      	cmp	r3, #8
    360a:	d103      	bne.n	3614 <xPortStartScheduler+0x120>
            *
            * The following assert ensures that the sub-priority bit in the
            * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
            * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
    360c:	4b23      	ldr	r3, [pc, #140]	; (369c <xPortStartScheduler+0x1a8>)
    360e:	2200      	movs	r2, #0
    3610:	601a      	str	r2, [r3, #0]
    3612:	e004      	b.n	361e <xPortStartScheduler+0x12a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	f1c3 0307 	rsb	r3, r3, #7
    361a:	4a20      	ldr	r2, [pc, #128]	; (369c <xPortStartScheduler+0x1a8>)
    361c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    361e:	4b1f      	ldr	r3, [pc, #124]	; (369c <xPortStartScheduler+0x1a8>)
    3620:	681b      	ldr	r3, [r3, #0]
    3622:	021b      	lsls	r3, r3, #8
    3624:	4a1d      	ldr	r2, [pc, #116]	; (369c <xPortStartScheduler+0x1a8>)
    3626:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    3628:	4b1c      	ldr	r3, [pc, #112]	; (369c <xPortStartScheduler+0x1a8>)
    362a:	681b      	ldr	r3, [r3, #0]
    362c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3630:	4a1a      	ldr	r2, [pc, #104]	; (369c <xPortStartScheduler+0x1a8>)
    3632:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
    3634:	7afb      	ldrb	r3, [r7, #11]
    3636:	b2da      	uxtb	r2, r3
    3638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    363a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
    363c:	4b18      	ldr	r3, [pc, #96]	; (36a0 <xPortStartScheduler+0x1ac>)
    363e:	681b      	ldr	r3, [r3, #0]
    3640:	4a17      	ldr	r2, [pc, #92]	; (36a0 <xPortStartScheduler+0x1ac>)
    3642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    3646:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
    3648:	4b15      	ldr	r3, [pc, #84]	; (36a0 <xPortStartScheduler+0x1ac>)
    364a:	681b      	ldr	r3, [r3, #0]
    364c:	4a14      	ldr	r2, [pc, #80]	; (36a0 <xPortStartScheduler+0x1ac>)
    364e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    3652:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
    3654:	f000 f8f2 	bl	383c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
    3658:	4b12      	ldr	r3, [pc, #72]	; (36a4 <xPortStartScheduler+0x1b0>)
    365a:	2200      	movs	r2, #0
    365c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
    365e:	f000 f911 	bl	3884 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    3662:	4b11      	ldr	r3, [pc, #68]	; (36a8 <xPortStartScheduler+0x1b4>)
    3664:	681b      	ldr	r3, [r3, #0]
    3666:	4a10      	ldr	r2, [pc, #64]	; (36a8 <xPortStartScheduler+0x1b4>)
    3668:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    366c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
    366e:	f7ff ff2b 	bl	34c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
    3672:	f7fd ff11 	bl	1498 <vTaskSwitchContext>
    prvTaskExitError();
    3676:	f7ff fedd 	bl	3434 <prvTaskExitError>

    /* Should not get here! */
    return 0;
    367a:	2300      	movs	r3, #0
}
    367c:	4618      	mov	r0, r3
    367e:	3730      	adds	r7, #48	; 0x30
    3680:	46bd      	mov	sp, r7
    3682:	bd80      	pop	{r7, pc}
    3684:	e000ed00 	.word	0xe000ed00
    3688:	410fc271 	.word	0x410fc271
    368c:	e000edf0 	.word	0xe000edf0
    3690:	410fc270 	.word	0x410fc270
    3694:	e000e400 	.word	0xe000e400
    3698:	20001168 	.word	0x20001168
    369c:	2000116c 	.word	0x2000116c
    36a0:	e000ed20 	.word	0xe000ed20
    36a4:	20000004 	.word	0x20000004
    36a8:	e000ef34 	.word	0xe000ef34

000036ac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    36ac:	b480      	push	{r7}
    36ae:	b085      	sub	sp, #20
    36b0:	af00      	add	r7, sp, #0
        __asm volatile
    36b2:	f04f 0340 	mov.w	r3, #64	; 0x40
    36b6:	f383 8811 	msr	BASEPRI, r3
    36ba:	f3bf 8f6f 	isb	sy
    36be:	f3bf 8f4f 	dsb	sy
    36c2:	60bb      	str	r3, [r7, #8]
    }
    36c4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
    36c6:	4b13      	ldr	r3, [pc, #76]	; (3714 <vPortEnterCritical+0x68>)
    36c8:	681b      	ldr	r3, [r3, #0]
    36ca:	3301      	adds	r3, #1
    36cc:	4a11      	ldr	r2, [pc, #68]	; (3714 <vPortEnterCritical+0x68>)
    36ce:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    36d0:	4b10      	ldr	r3, [pc, #64]	; (3714 <vPortEnterCritical+0x68>)
    36d2:	681b      	ldr	r3, [r3, #0]
    36d4:	2b01      	cmp	r3, #1
    36d6:	d117      	bne.n	3708 <vPortEnterCritical+0x5c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    36d8:	4b0f      	ldr	r3, [pc, #60]	; (3718 <vPortEnterCritical+0x6c>)
    36da:	681b      	ldr	r3, [r3, #0]
    36dc:	b2db      	uxtb	r3, r3
    36de:	2b00      	cmp	r3, #0
    36e0:	d012      	beq.n	3708 <vPortEnterCritical+0x5c>
    36e2:	4b0e      	ldr	r3, [pc, #56]	; (371c <vPortEnterCritical+0x70>)
    36e4:	60fb      	str	r3, [r7, #12]
    36e6:	68fb      	ldr	r3, [r7, #12]
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	f003 0301 	and.w	r3, r3, #1
    36ee:	2b00      	cmp	r3, #0
    36f0:	d00a      	beq.n	3708 <vPortEnterCritical+0x5c>
        __asm volatile
    36f2:	f04f 0340 	mov.w	r3, #64	; 0x40
    36f6:	f383 8811 	msr	BASEPRI, r3
    36fa:	f3bf 8f6f 	isb	sy
    36fe:	f3bf 8f4f 	dsb	sy
    3702:	607b      	str	r3, [r7, #4]
    }
    3704:	bf00      	nop
    3706:	be00      	bkpt	0x0000
    }
}
    3708:	bf00      	nop
    370a:	3714      	adds	r7, #20
    370c:	46bd      	mov	sp, r7
    370e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3712:	4770      	bx	lr
    3714:	20000004 	.word	0x20000004
    3718:	e000ed04 	.word	0xe000ed04
    371c:	e000edf0 	.word	0xe000edf0

00003720 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    3720:	b480      	push	{r7}
    3722:	b085      	sub	sp, #20
    3724:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    3726:	4b16      	ldr	r3, [pc, #88]	; (3780 <vPortExitCritical+0x60>)
    3728:	681b      	ldr	r3, [r3, #0]
    372a:	2b00      	cmp	r3, #0
    372c:	d112      	bne.n	3754 <vPortExitCritical+0x34>
    372e:	4b15      	ldr	r3, [pc, #84]	; (3784 <vPortExitCritical+0x64>)
    3730:	60fb      	str	r3, [r7, #12]
    3732:	68fb      	ldr	r3, [r7, #12]
    3734:	681b      	ldr	r3, [r3, #0]
    3736:	f003 0301 	and.w	r3, r3, #1
    373a:	2b00      	cmp	r3, #0
    373c:	d00a      	beq.n	3754 <vPortExitCritical+0x34>
        __asm volatile
    373e:	f04f 0340 	mov.w	r3, #64	; 0x40
    3742:	f383 8811 	msr	BASEPRI, r3
    3746:	f3bf 8f6f 	isb	sy
    374a:	f3bf 8f4f 	dsb	sy
    374e:	60bb      	str	r3, [r7, #8]
    }
    3750:	bf00      	nop
    3752:	be00      	bkpt	0x0000
    uxCriticalNesting--;
    3754:	4b0a      	ldr	r3, [pc, #40]	; (3780 <vPortExitCritical+0x60>)
    3756:	681b      	ldr	r3, [r3, #0]
    3758:	3b01      	subs	r3, #1
    375a:	4a09      	ldr	r2, [pc, #36]	; (3780 <vPortExitCritical+0x60>)
    375c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
    375e:	4b08      	ldr	r3, [pc, #32]	; (3780 <vPortExitCritical+0x60>)
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	2b00      	cmp	r3, #0
    3764:	d105      	bne.n	3772 <vPortExitCritical+0x52>
    3766:	2300      	movs	r3, #0
    3768:	607b      	str	r3, [r7, #4]
        __asm volatile
    376a:	687b      	ldr	r3, [r7, #4]
    376c:	f383 8811 	msr	BASEPRI, r3
    }
    3770:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
    3772:	bf00      	nop
    3774:	3714      	adds	r7, #20
    3776:	46bd      	mov	sp, r7
    3778:	f85d 7b04 	ldr.w	r7, [sp], #4
    377c:	4770      	bx	lr
    377e:	bf00      	nop
    3780:	20000004 	.word	0x20000004
    3784:	e000edf0 	.word	0xe000edf0
	...

00003790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
    3790:	f3ef 8009 	mrs	r0, PSP
    3794:	f3bf 8f6f 	isb	sy
    3798:	4b15      	ldr	r3, [pc, #84]	; (37f0 <pxCurrentTCBConst>)
    379a:	681a      	ldr	r2, [r3, #0]
    379c:	f01e 0f10 	tst.w	lr, #16
    37a0:	bf08      	it	eq
    37a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    37a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37aa:	6010      	str	r0, [r2, #0]
    37ac:	e92d 0009 	stmdb	sp!, {r0, r3}
    37b0:	f04f 0040 	mov.w	r0, #64	; 0x40
    37b4:	f380 8811 	msr	BASEPRI, r0
    37b8:	f3bf 8f4f 	dsb	sy
    37bc:	f3bf 8f6f 	isb	sy
    37c0:	f7fd fe6a 	bl	1498 <vTaskSwitchContext>
    37c4:	f04f 0000 	mov.w	r0, #0
    37c8:	f380 8811 	msr	BASEPRI, r0
    37cc:	bc09      	pop	{r0, r3}
    37ce:	6819      	ldr	r1, [r3, #0]
    37d0:	6808      	ldr	r0, [r1, #0]
    37d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37d6:	f01e 0f10 	tst.w	lr, #16
    37da:	bf08      	it	eq
    37dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    37e0:	f380 8809 	msr	PSP, r0
    37e4:	f3bf 8f6f 	isb	sy
    37e8:	4770      	bx	lr
    37ea:	bf00      	nop
    37ec:	f3af 8000 	nop.w

000037f0 <pxCurrentTCBConst>:
    37f0:	20000014 	.word	0x20000014
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
    37f4:	bf00      	nop
    37f6:	bf00      	nop

000037f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    37f8:	b580      	push	{r7, lr}
    37fa:	b082      	sub	sp, #8
    37fc:	af00      	add	r7, sp, #0
        __asm volatile
    37fe:	f04f 0340 	mov.w	r3, #64	; 0x40
    3802:	f383 8811 	msr	BASEPRI, r3
    3806:	f3bf 8f6f 	isb	sy
    380a:	f3bf 8f4f 	dsb	sy
    380e:	607b      	str	r3, [r7, #4]
    }
    3810:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
    3812:	f7fd fd2d 	bl	1270 <xTaskIncrementTick>
    3816:	4603      	mov	r3, r0
    3818:	2b00      	cmp	r3, #0
    381a:	d003      	beq.n	3824 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    381c:	4b06      	ldr	r3, [pc, #24]	; (3838 <SysTick_Handler+0x40>)
    381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3822:	601a      	str	r2, [r3, #0]
    3824:	2300      	movs	r3, #0
    3826:	603b      	str	r3, [r7, #0]
        __asm volatile
    3828:	683b      	ldr	r3, [r7, #0]
    382a:	f383 8811 	msr	BASEPRI, r3
    }
    382e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
    3830:	bf00      	nop
    3832:	3708      	adds	r7, #8
    3834:	46bd      	mov	sp, r7
    3836:	bd80      	pop	{r7, pc}
    3838:	e000ed04 	.word	0xe000ed04

0000383c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
    383c:	b480      	push	{r7}
    383e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
    3840:	4b0b      	ldr	r3, [pc, #44]	; (3870 <vPortSetupTimerInterrupt+0x34>)
    3842:	2200      	movs	r2, #0
    3844:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    3846:	4b0b      	ldr	r3, [pc, #44]	; (3874 <vPortSetupTimerInterrupt+0x38>)
    3848:	2200      	movs	r2, #0
    384a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    384c:	4b0a      	ldr	r3, [pc, #40]	; (3878 <vPortSetupTimerInterrupt+0x3c>)
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	4a0a      	ldr	r2, [pc, #40]	; (387c <vPortSetupTimerInterrupt+0x40>)
    3852:	fba2 2303 	umull	r2, r3, r2, r3
    3856:	099b      	lsrs	r3, r3, #6
    3858:	4a09      	ldr	r2, [pc, #36]	; (3880 <vPortSetupTimerInterrupt+0x44>)
    385a:	3b01      	subs	r3, #1
    385c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
    385e:	4b04      	ldr	r3, [pc, #16]	; (3870 <vPortSetupTimerInterrupt+0x34>)
    3860:	2207      	movs	r2, #7
    3862:	601a      	str	r2, [r3, #0]
}
    3864:	bf00      	nop
    3866:	46bd      	mov	sp, r7
    3868:	f85d 7b04 	ldr.w	r7, [sp], #4
    386c:	4770      	bx	lr
    386e:	bf00      	nop
    3870:	e000e010 	.word	0xe000e010
    3874:	e000e018 	.word	0xe000e018
    3878:	2000000c 	.word	0x2000000c
    387c:	10624dd3 	.word	0x10624dd3
    3880:	e000e014 	.word	0xe000e014

00003884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
    3884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 3894 <vPortEnableVFP+0x10>
    3888:	6801      	ldr	r1, [r0, #0]
    388a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    388e:	6001      	str	r1, [r0, #0]
    3890:	4770      	bx	lr
    3892:	0000      	.short	0x0000
    3894:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
    3898:	bf00      	nop
    389a:	bf00      	nop

0000389c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
    389c:	b480      	push	{r7}
    389e:	b087      	sub	sp, #28
    38a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
    38a2:	f3ef 8305 	mrs	r3, IPSR
    38a6:	617b      	str	r3, [r7, #20]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
    38a8:	697b      	ldr	r3, [r7, #20]
    38aa:	2b0f      	cmp	r3, #15
    38ac:	d91c      	bls.n	38e8 <vPortValidateInterruptPriority+0x4c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
    38ae:	4a1f      	ldr	r2, [pc, #124]	; (392c <vPortValidateInterruptPriority+0x90>)
    38b0:	697b      	ldr	r3, [r7, #20]
    38b2:	4413      	add	r3, r2
    38b4:	781b      	ldrb	r3, [r3, #0]
    38b6:	74fb      	strb	r3, [r7, #19]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    38b8:	4b1d      	ldr	r3, [pc, #116]	; (3930 <vPortValidateInterruptPriority+0x94>)
    38ba:	781b      	ldrb	r3, [r3, #0]
    38bc:	7cfa      	ldrb	r2, [r7, #19]
    38be:	429a      	cmp	r2, r3
    38c0:	d212      	bcs.n	38e8 <vPortValidateInterruptPriority+0x4c>
    38c2:	4b1c      	ldr	r3, [pc, #112]	; (3934 <vPortValidateInterruptPriority+0x98>)
    38c4:	60fb      	str	r3, [r7, #12]
    38c6:	68fb      	ldr	r3, [r7, #12]
    38c8:	681b      	ldr	r3, [r3, #0]
    38ca:	f003 0301 	and.w	r3, r3, #1
    38ce:	2b00      	cmp	r3, #0
    38d0:	d00a      	beq.n	38e8 <vPortValidateInterruptPriority+0x4c>
        __asm volatile
    38d2:	f04f 0340 	mov.w	r3, #64	; 0x40
    38d6:	f383 8811 	msr	BASEPRI, r3
    38da:	f3bf 8f6f 	isb	sy
    38de:	f3bf 8f4f 	dsb	sy
    38e2:	607b      	str	r3, [r7, #4]
    }
    38e4:	bf00      	nop
    38e6:	be00      	bkpt	0x0000
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    38e8:	4b13      	ldr	r3, [pc, #76]	; (3938 <vPortValidateInterruptPriority+0x9c>)
    38ea:	681b      	ldr	r3, [r3, #0]
    38ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
    38f0:	4b12      	ldr	r3, [pc, #72]	; (393c <vPortValidateInterruptPriority+0xa0>)
    38f2:	681b      	ldr	r3, [r3, #0]
    38f4:	429a      	cmp	r2, r3
    38f6:	d912      	bls.n	391e <vPortValidateInterruptPriority+0x82>
    38f8:	4b0e      	ldr	r3, [pc, #56]	; (3934 <vPortValidateInterruptPriority+0x98>)
    38fa:	60bb      	str	r3, [r7, #8]
    38fc:	68bb      	ldr	r3, [r7, #8]
    38fe:	681b      	ldr	r3, [r3, #0]
    3900:	f003 0301 	and.w	r3, r3, #1
    3904:	2b00      	cmp	r3, #0
    3906:	d00a      	beq.n	391e <vPortValidateInterruptPriority+0x82>
        __asm volatile
    3908:	f04f 0340 	mov.w	r3, #64	; 0x40
    390c:	f383 8811 	msr	BASEPRI, r3
    3910:	f3bf 8f6f 	isb	sy
    3914:	f3bf 8f4f 	dsb	sy
    3918:	603b      	str	r3, [r7, #0]
    }
    391a:	bf00      	nop
    391c:	be00      	bkpt	0x0000
    }
    391e:	bf00      	nop
    3920:	371c      	adds	r7, #28
    3922:	46bd      	mov	sp, r7
    3924:	f85d 7b04 	ldr.w	r7, [sp], #4
    3928:	4770      	bx	lr
    392a:	bf00      	nop
    392c:	e000e3f0 	.word	0xe000e3f0
    3930:	20001168 	.word	0x20001168
    3934:	e000edf0 	.word	0xe000edf0
    3938:	e000ed0c 	.word	0xe000ed0c
    393c:	2000116c 	.word	0x2000116c

00003940 <memcpy>:
    3940:	4684      	mov	ip, r0
    3942:	ea41 0300 	orr.w	r3, r1, r0
    3946:	f013 0303 	ands.w	r3, r3, #3
    394a:	d16d      	bne.n	3a28 <memcpy+0xe8>
    394c:	3a40      	subs	r2, #64	; 0x40
    394e:	d341      	bcc.n	39d4 <memcpy+0x94>
    3950:	f851 3b04 	ldr.w	r3, [r1], #4
    3954:	f840 3b04 	str.w	r3, [r0], #4
    3958:	f851 3b04 	ldr.w	r3, [r1], #4
    395c:	f840 3b04 	str.w	r3, [r0], #4
    3960:	f851 3b04 	ldr.w	r3, [r1], #4
    3964:	f840 3b04 	str.w	r3, [r0], #4
    3968:	f851 3b04 	ldr.w	r3, [r1], #4
    396c:	f840 3b04 	str.w	r3, [r0], #4
    3970:	f851 3b04 	ldr.w	r3, [r1], #4
    3974:	f840 3b04 	str.w	r3, [r0], #4
    3978:	f851 3b04 	ldr.w	r3, [r1], #4
    397c:	f840 3b04 	str.w	r3, [r0], #4
    3980:	f851 3b04 	ldr.w	r3, [r1], #4
    3984:	f840 3b04 	str.w	r3, [r0], #4
    3988:	f851 3b04 	ldr.w	r3, [r1], #4
    398c:	f840 3b04 	str.w	r3, [r0], #4
    3990:	f851 3b04 	ldr.w	r3, [r1], #4
    3994:	f840 3b04 	str.w	r3, [r0], #4
    3998:	f851 3b04 	ldr.w	r3, [r1], #4
    399c:	f840 3b04 	str.w	r3, [r0], #4
    39a0:	f851 3b04 	ldr.w	r3, [r1], #4
    39a4:	f840 3b04 	str.w	r3, [r0], #4
    39a8:	f851 3b04 	ldr.w	r3, [r1], #4
    39ac:	f840 3b04 	str.w	r3, [r0], #4
    39b0:	f851 3b04 	ldr.w	r3, [r1], #4
    39b4:	f840 3b04 	str.w	r3, [r0], #4
    39b8:	f851 3b04 	ldr.w	r3, [r1], #4
    39bc:	f840 3b04 	str.w	r3, [r0], #4
    39c0:	f851 3b04 	ldr.w	r3, [r1], #4
    39c4:	f840 3b04 	str.w	r3, [r0], #4
    39c8:	f851 3b04 	ldr.w	r3, [r1], #4
    39cc:	f840 3b04 	str.w	r3, [r0], #4
    39d0:	3a40      	subs	r2, #64	; 0x40
    39d2:	d2bd      	bcs.n	3950 <memcpy+0x10>
    39d4:	3230      	adds	r2, #48	; 0x30
    39d6:	d311      	bcc.n	39fc <memcpy+0xbc>
    39d8:	f851 3b04 	ldr.w	r3, [r1], #4
    39dc:	f840 3b04 	str.w	r3, [r0], #4
    39e0:	f851 3b04 	ldr.w	r3, [r1], #4
    39e4:	f840 3b04 	str.w	r3, [r0], #4
    39e8:	f851 3b04 	ldr.w	r3, [r1], #4
    39ec:	f840 3b04 	str.w	r3, [r0], #4
    39f0:	f851 3b04 	ldr.w	r3, [r1], #4
    39f4:	f840 3b04 	str.w	r3, [r0], #4
    39f8:	3a10      	subs	r2, #16
    39fa:	d2ed      	bcs.n	39d8 <memcpy+0x98>
    39fc:	320c      	adds	r2, #12
    39fe:	d305      	bcc.n	3a0c <memcpy+0xcc>
    3a00:	f851 3b04 	ldr.w	r3, [r1], #4
    3a04:	f840 3b04 	str.w	r3, [r0], #4
    3a08:	3a04      	subs	r2, #4
    3a0a:	d2f9      	bcs.n	3a00 <memcpy+0xc0>
    3a0c:	3204      	adds	r2, #4
    3a0e:	d008      	beq.n	3a22 <memcpy+0xe2>
    3a10:	07d2      	lsls	r2, r2, #31
    3a12:	bf1c      	itt	ne
    3a14:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3a18:	f800 3b01 	strbne.w	r3, [r0], #1
    3a1c:	d301      	bcc.n	3a22 <memcpy+0xe2>
    3a1e:	880b      	ldrh	r3, [r1, #0]
    3a20:	8003      	strh	r3, [r0, #0]
    3a22:	4660      	mov	r0, ip
    3a24:	4770      	bx	lr
    3a26:	bf00      	nop
    3a28:	2a08      	cmp	r2, #8
    3a2a:	d313      	bcc.n	3a54 <memcpy+0x114>
    3a2c:	078b      	lsls	r3, r1, #30
    3a2e:	d08d      	beq.n	394c <memcpy+0xc>
    3a30:	f010 0303 	ands.w	r3, r0, #3
    3a34:	d08a      	beq.n	394c <memcpy+0xc>
    3a36:	f1c3 0304 	rsb	r3, r3, #4
    3a3a:	1ad2      	subs	r2, r2, r3
    3a3c:	07db      	lsls	r3, r3, #31
    3a3e:	bf1c      	itt	ne
    3a40:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3a44:	f800 3b01 	strbne.w	r3, [r0], #1
    3a48:	d380      	bcc.n	394c <memcpy+0xc>
    3a4a:	f831 3b02 	ldrh.w	r3, [r1], #2
    3a4e:	f820 3b02 	strh.w	r3, [r0], #2
    3a52:	e77b      	b.n	394c <memcpy+0xc>
    3a54:	3a04      	subs	r2, #4
    3a56:	d3d9      	bcc.n	3a0c <memcpy+0xcc>
    3a58:	3a01      	subs	r2, #1
    3a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
    3a5e:	f800 3b01 	strb.w	r3, [r0], #1
    3a62:	d2f9      	bcs.n	3a58 <memcpy+0x118>
    3a64:	780b      	ldrb	r3, [r1, #0]
    3a66:	7003      	strb	r3, [r0, #0]
    3a68:	784b      	ldrb	r3, [r1, #1]
    3a6a:	7043      	strb	r3, [r0, #1]
    3a6c:	788b      	ldrb	r3, [r1, #2]
    3a6e:	7083      	strb	r3, [r0, #2]
    3a70:	4660      	mov	r0, ip
    3a72:	4770      	bx	lr
    3a74:	6b636974 	.word	0x6b636974
    3a78:	636f7420 	.word	0x636f7420
    3a7c:	0d202e6b 	.word	0x0d202e6b
    3a80:	0000000a 	.word	0x0000000a
    3a84:	4a325b1b 	.word	0x4a325b1b
    3a88:	65746e45 	.word	0x65746e45
    3a8c:	65742072 	.word	0x65742072
    3a90:	203a7478 	.word	0x203a7478
    3a94:	00000a0d 	.word	0x00000a0d
    3a98:	73615476 	.word	0x73615476
    3a9c:	0000006b 	.word	0x0000006b

00003aa0 <g_pulGPIOBaseAddrs>:
    3aa0:	40004000 40058000 40005000 40059000     .@.@...@.P.@...@
    3ab0:	40006000 4005a000 40007000 4005b000     .`.@...@.p.@...@
    3ac0:	40024000 4005c000 40025000 4005d000     .@.@...@.P.@...@
    3ad0:	40026000 4005e000 40027000 4005f000     .`.@...@.p.@...@
    3ae0:	4003d000 40060000 40061000 40061000     ...@...@...@...@
    3af0:	40062000 40062000 40063000 40063000     . .@. .@.0.@.0.@
    3b00:	40064000 40064000 40065000 40065000     .@.@.@.@.P.@.P.@
    3b10:	40066000 40066000 6573552f 6d2f7372     .`.@.`.@/Users/m
    3b20:	79616279 65642f73 6f6c6576 636d2f70     ybays/develop/mc
    3b30:	72612d75 6c2f6863 3166346d 452f3032     u-arch/lm4f120/E
    3b40:	4d4c2d4b 32314634 2f4c5830 452d5753     K-LM4F120XL/SW-E
    3b50:	4d4c2d4b 32314634 2d4c5830 33353439     K-LM4F120XL-9453
    3b60:	7665642e 6972642f 6c726576 672f6269     .dev/driverlib/g
    3b70:	2e6f6970 00000063                       pio.c...

00003b78 <g_pulXtals>:
    3b78:	000f4240 001c2000 001e8480 00258000     @B... ........%.
    3b88:	00369e99 00384000 003d0900 003e8000     ..6..@8...=...>.
    3b98:	004b0000 004c4b40 004e2000 005b8d80     ..K.@KL.. N...[.
    3ba8:	005dc000 00708000 007a1200 007d0000     ..]...p...z...}.
    3bb8:	00989680 00b71b00 00bb8000 00cee8c0     ................
    3bc8:	00da7a64 00f42400 00fa0000 0112a880     dz...$..........
    3bd8:	01312d00 016e3600 017d7840 454c4449     .-1..6n.@x}.IDLE
    3be8:	00000000 20726d54 00637653 51726d54     ....Tmr Svc.TmrQ
	...
